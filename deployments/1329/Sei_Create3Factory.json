{
  "address": "0x6df7bf308ABaf673f38Db316ECc97b988CE1Ca78",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "deployed",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        }
      ],
      "name": "LogDeployed",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "bytecode",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "deploy",
      "outputs": [
        {
          "internalType": "address",
          "name": "deployed",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        }
      ],
      "name": "getDeployed",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "artifact_path": "Create3Factory.sol",
  "artifact_full_path": "Create3Factory.sol:Create3Factory",
  "bytecode": "0x608060405234801561001057600080fd5b50610530806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806350f1c4641461003b578063c7aeef0f1461006a575b600080fd5b61004e6100493660046103b9565b61007d565b6040516001600160a01b03909116815260200160405180910390f35b61004e610078366004610407565b6100c3565b604080516001600160a01b038416602080830191909152818301849052825180830384018152606090920190925280519101206000906100bc9061014e565b9392505050565b6040805133602080830191909152818301869052825180830384018152606090920190925280519101206000906100fb90848461024a565b604080516001600160a01b03831681523360208201529081018690529091507fdcacc22833c6088cb24af3f735ee2744334a150babf878da84ecddbfcc77897e9060600160405180910390a19392505050565b604080518082018252601081526f67363d3d37363d34f03d5260086018f360801b60209182015290517fff00000000000000000000000000000000000000000000000000000000000000918101919091526bffffffffffffffffffffffff193060601b166021820152603581018290527f21c35dbe1b344a2488cf3321d6ce542f8e9f305544ff09e4993a62319a497c1f6055820152600090819061020a906075015b6040516020818303038152906040528051906020012090565b6040516135a560f21b60208201526bffffffffffffffffffffffff19606083901b166022820152600160f81b60368201529091506100bc906037016101f1565b6000806040518060400160405280601081526020016f67363d3d37363d34f03d5260086018f360801b81525090506000858251602084016000f590506001600160a01b0381166102e15760405162461bcd60e51b815260206004820152601160248201527f4445504c4f594d454e545f4641494c454400000000000000000000000000000060448201526064015b60405180910390fd5b6102ea8661014e565b92506000816001600160a01b0316858760405161030791906104cb565b60006040518083038185875af1925050503d8060008114610344576040519150601f19603f3d011682016040523d82523d6000602084013e610349565b606091505b5050905080801561036357506001600160a01b0384163b15155b6103af5760405162461bcd60e51b815260206004820152601560248201527f494e495449414c495a4154494f4e5f4641494c4544000000000000000000000060448201526064016102d8565b5050509392505050565b600080604083850312156103cc57600080fd5b82356001600160a01b03811681146103e357600080fd5b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b60008060006060848603121561041c57600080fd5b83359250602084013567ffffffffffffffff8082111561043b57600080fd5b818601915086601f83011261044f57600080fd5b813581811115610461576104616103f1565b604051601f8201601f19908116603f01168101908382118183101715610489576104896103f1565b816040528281528960208487010111156104a257600080fd5b826020860160208301376000602084830101528096505050505050604084013590509250925092565b6000825160005b818110156104ec57602081860181015185830152016104d2565b50600092019182525091905056fea2646970667358221220e6b42f1072123a355b340beec30a0031a44f3e4e317b9a040b8e1ad386d6099a64736f6c63430008140033",
  "args_data": "0x",
  "tx_hash": "0x3c98203606f87a3e16dfbeff7fb62ae37a9f8bfd12f22a651eca8826d8730a04",
  "args": null,
  "data": "0x99cc618dd38c5d54a82f54427614d02c90b6f5656011827e7bb73a2ed57c818e608060405234801561001057600080fd5b50610530806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806350f1c4641461003b578063c7aeef0f1461006a575b600080fd5b61004e6100493660046103b9565b61007d565b6040516001600160a01b03909116815260200160405180910390f35b61004e610078366004610407565b6100c3565b604080516001600160a01b038416602080830191909152818301849052825180830384018152606090920190925280519101206000906100bc9061014e565b9392505050565b6040805133602080830191909152818301869052825180830384018152606090920190925280519101206000906100fb90848461024a565b604080516001600160a01b03831681523360208201529081018690529091507fdcacc22833c6088cb24af3f735ee2744334a150babf878da84ecddbfcc77897e9060600160405180910390a19392505050565b604080518082018252601081526f67363d3d37363d34f03d5260086018f360801b60209182015290517fff00000000000000000000000000000000000000000000000000000000000000918101919091526bffffffffffffffffffffffff193060601b166021820152603581018290527f21c35dbe1b344a2488cf3321d6ce542f8e9f305544ff09e4993a62319a497c1f6055820152600090819061020a906075015b6040516020818303038152906040528051906020012090565b6040516135a560f21b60208201526bffffffffffffffffffffffff19606083901b166022820152600160f81b60368201529091506100bc906037016101f1565b6000806040518060400160405280601081526020016f67363d3d37363d34f03d5260086018f360801b81525090506000858251602084016000f590506001600160a01b0381166102e15760405162461bcd60e51b815260206004820152601160248201527f4445504c4f594d454e545f4641494c454400000000000000000000000000000060448201526064015b60405180910390fd5b6102ea8661014e565b92506000816001600160a01b0316858760405161030791906104cb565b60006040518083038185875af1925050503d8060008114610344576040519150601f19603f3d011682016040523d82523d6000602084013e610349565b606091505b5050905080801561036357506001600160a01b0384163b15155b6103af5760405162461bcd60e51b815260206004820152601560248201527f494e495449414c495a4154494f4e5f4641494c4544000000000000000000000060448201526064016102d8565b5050509392505050565b600080604083850312156103cc57600080fd5b82356001600160a01b03811681146103e357600080fd5b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b60008060006060848603121561041c57600080fd5b83359250602084013567ffffffffffffffff8082111561043b57600080fd5b818601915086601f83011261044f57600080fd5b813581811115610461576104616103f1565b604051601f8201601f19908116603f01168101908382118183101715610489576104896103f1565b816040528281528960208487010111156104a257600080fd5b826020860160208301376000602084830101528096505050505050604084013590509250925092565b6000825160005b818110156104ec57602081860181015185830152016104d2565b50600092019182525091905056fea2646970667358221220e6b42f1072123a355b340beec30a0031a44f3e4e317b9a040b8e1ad386d6099a64736f6c63430008140033",
  "standardJsonInput": {
    "language": "Solidity",
    "sources": {
      "src/mixins/Create3Factory.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\nimport {CREATE3} from \"solmate/utils/CREATE3.sol\";\n\ncontract Create3Factory {\n    event LogDeployed(address deployed, address sender, bytes32 salt);\n\n    function deploy(bytes32 salt, bytes memory bytecode, uint256 value) public returns (address deployed) {\n        deployed = CREATE3.deploy(_getSalt(msg.sender, salt), bytecode, value);\n        emit LogDeployed(deployed, msg.sender, salt);\n    }\n\n    function getDeployed(address account, bytes32 salt) public view returns (address) {\n        return CREATE3.getDeployed(_getSalt(account, salt));\n    }\n\n    function _getSalt(address account, bytes32 salt) internal pure returns (bytes32) {\n        return keccak256(abi.encode(account, salt));\n    }\n}\n"
      },
      "lib/solmate/src/utils/CREATE3.sol": {
        "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\nimport {Bytes32AddressLib} from \"./Bytes32AddressLib.sol\";\n\n/// @notice Deploy to deterministic addresses without an initcode factor.\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/CREATE3.sol)\n/// @author Modified from 0xSequence (https://github.com/0xSequence/create3/blob/master/contracts/Create3.sol)\nlibrary CREATE3 {\n    using Bytes32AddressLib for bytes32;\n\n    //--------------------------------------------------------------------------------//\n    // Opcode     | Opcode + Arguments    | Description      | Stack View             //\n    //--------------------------------------------------------------------------------//\n    // 0x36       |  0x36                 | CALLDATASIZE     | size                   //\n    // 0x3d       |  0x3d                 | RETURNDATASIZE   | 0 size                 //\n    // 0x3d       |  0x3d                 | RETURNDATASIZE   | 0 0 size               //\n    // 0x37       |  0x37                 | CALLDATACOPY     |                        //\n    // 0x36       |  0x36                 | CALLDATASIZE     | size                   //\n    // 0x3d       |  0x3d                 | RETURNDATASIZE   | 0 size                 //\n    // 0x34       |  0x34                 | CALLVALUE        | value 0 size           //\n    // 0xf0       |  0xf0                 | CREATE           | newContract            //\n    //--------------------------------------------------------------------------------//\n    // Opcode     | Opcode + Arguments    | Description      | Stack View             //\n    //--------------------------------------------------------------------------------//\n    // 0x67       |  0x67XXXXXXXXXXXXXXXX | PUSH8 bytecode   | bytecode               //\n    // 0x3d       |  0x3d                 | RETURNDATASIZE   | 0 bytecode             //\n    // 0x52       |  0x52                 | MSTORE           |                        //\n    // 0x60       |  0x6008               | PUSH1 08         | 8                      //\n    // 0x60       |  0x6018               | PUSH1 18         | 24 8                   //\n    // 0xf3       |  0xf3                 | RETURN           |                        //\n    //--------------------------------------------------------------------------------//\n    bytes internal constant PROXY_BYTECODE = hex\"67_36_3d_3d_37_36_3d_34_f0_3d_52_60_08_60_18_f3\";\n\n    bytes32 internal constant PROXY_BYTECODE_HASH = keccak256(PROXY_BYTECODE);\n\n    function deploy(\n        bytes32 salt,\n        bytes memory creationCode,\n        uint256 value\n    ) internal returns (address deployed) {\n        bytes memory proxyChildBytecode = PROXY_BYTECODE;\n\n        address proxy;\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Deploy a new contract with our pre-made bytecode via CREATE2.\n            // We start 32 bytes into the code to avoid copying the byte length.\n            proxy := create2(0, add(proxyChildBytecode, 32), mload(proxyChildBytecode), salt)\n        }\n        require(proxy != address(0), \"DEPLOYMENT_FAILED\");\n\n        deployed = getDeployed(salt);\n        (bool success, ) = proxy.call{value: value}(creationCode);\n        require(success && deployed.code.length != 0, \"INITIALIZATION_FAILED\");\n    }\n\n    function getDeployed(bytes32 salt) internal view returns (address) {\n        address proxy = keccak256(\n            abi.encodePacked(\n                // Prefix:\n                bytes1(0xFF),\n                // Creator:\n                address(this),\n                // Salt:\n                salt,\n                // Bytecode hash:\n                PROXY_BYTECODE_HASH\n            )\n        ).fromLast20Bytes();\n\n        return\n            keccak256(\n                abi.encodePacked(\n                    // 0xd6 = 0xc0 (short RLP prefix) + 0x16 (length of: 0x94 ++ proxy ++ 0x01)\n                    // 0x94 = 0x80 + 0x14 (0x14 = the length of an address, 20 bytes, in hex)\n                    hex\"d6_94\",\n                    proxy,\n                    hex\"01\" // Nonce of the proxy contract (1)\n                )\n            ).fromLast20Bytes();\n    }\n}\n"
      },
      "lib/solmate/src/utils/Bytes32AddressLib.sol": {
        "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\n/// @notice Library for converting between addresses and bytes32 values.\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/Bytes32AddressLib.sol)\nlibrary Bytes32AddressLib {\n    function fromLast20Bytes(bytes32 bytesValue) internal pure returns (address) {\n        return address(uint160(uint256(bytesValue)));\n    }\n\n    function fillLast12Bytes(address addressValue) internal pure returns (bytes32) {\n        return bytes32(bytes20(addressValue));\n    }\n}\n"
      }
    },
    "settings": {
      "remappings": [
        "/=src/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/",
        "BoringSolidity/=lib/BoringSolidity/contracts/",
        "ds-test/=lib/forge-std/lib/ds-test/src/",
        "forge-std/=lib/forge-std/src/",
        "solmate/=lib/solmate/src/",
        "utils/=utils/",
        "libraries/=src/libraries/",
        "interfaces/=src/interfaces/",
        "cauldrons/=src/cauldrons/",
        "staking/=src/staking/",
        "swappers/=src/swappers/",
        "oracles/=src/oracles/",
        "strategies/=src/strategies/",
        "tokens/=src/tokens/",
        "periphery/=src/periphery/",
        "mixins/=src/mixins/",
        "lenses/=src/lenses/",
        "surl/=lib/surl/src/",
        "solady/=lib/solady/src/",
        "forge-deploy/=lib/forge-deploy/contracts/",
        "ExcessivelySafeCall/=lib/ExcessivelySafeCall/src/",
        "safe-contracts/=lib/safe-contracts/contracts/",
        "fuzzlib/=lib/fuzzlib/src/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 400
      },
      "metadata": {
        "useLiteralContent": false,
        "bytecodeHash": "ipfs",
        "appendCBOR": true
      },
      "outputSelection": {
        "*": {
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "evmVersion": "paris",
      "viaIR": false,
      "libraries": {}
    }
  },
  "compiler": "0.8.20+commit.a1b79de6"
}