{
  "address": "0x5B05677971a28d57d27BBa63D039CE5600805302",
  "abi": [
    {
      "type": "constructor",
      "inputs": [
        {
          "name": "bentoBox_",
          "type": "address",
          "internalType": "contract IBentoBoxV1"
        },
        {
          "name": "magicInternetMoney_",
          "type": "address",
          "internalType": "contract IERC20"
        },
        {
          "name": "owner_",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "BORROW_OPENING_FEE",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "COLLATERIZATION_RATE",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "LIQUIDATION_MULTIPLIER",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "accrue",
      "inputs": [],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "accrueInfo",
      "inputs": [],
      "outputs": [
        {
          "name": "lastAccrued",
          "type": "uint64",
          "internalType": "uint64"
        },
        {
          "name": "feesEarned",
          "type": "uint128",
          "internalType": "uint128"
        },
        {
          "name": "INTEREST_PER_SECOND",
          "type": "uint64",
          "internalType": "uint64"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "addCollateral",
      "inputs": [
        {
          "name": "to",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "skim",
          "type": "bool",
          "internalType": "bool"
        },
        {
          "name": "share",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "bentoBox",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "contract IBentoBoxV1"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "blacklistedCallees",
      "inputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "borrow",
      "inputs": [
        {
          "name": "to",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "amount",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "part",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "share",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "borrowLimit",
      "inputs": [],
      "outputs": [
        {
          "name": "total",
          "type": "uint128",
          "internalType": "uint128"
        },
        {
          "name": "borrowPartPerAddress",
          "type": "uint128",
          "internalType": "uint128"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "changeBorrowLimit",
      "inputs": [
        {
          "name": "newBorrowLimit",
          "type": "uint128",
          "internalType": "uint128"
        },
        {
          "name": "perAddressPart",
          "type": "uint128",
          "internalType": "uint128"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "changeInterestRate",
      "inputs": [
        {
          "name": "newInterestRate",
          "type": "uint64",
          "internalType": "uint64"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "collateral",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "contract IERC20"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "cook",
      "inputs": [
        {
          "name": "actions",
          "type": "uint8[]",
          "internalType": "uint8[]"
        },
        {
          "name": "values",
          "type": "uint256[]",
          "internalType": "uint256[]"
        },
        {
          "name": "datas",
          "type": "bytes[]",
          "internalType": "bytes[]"
        }
      ],
      "outputs": [
        {
          "name": "value1",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "value2",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "exchangeRate",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "feeTo",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "init",
      "inputs": [
        {
          "name": "data",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "outputs": [],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "isSolvent",
      "inputs": [
        {
          "name": "user",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "liquidate",
      "inputs": [
        {
          "name": "users",
          "type": "address[]",
          "internalType": "address[]"
        },
        {
          "name": "maxBorrowParts",
          "type": "uint256[]",
          "internalType": "uint256[]"
        },
        {
          "name": "to",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "swapper",
          "type": "address",
          "internalType": "contract ISwapperV2"
        },
        {
          "name": "swapperData",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "magicInternetMoney",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "contract IERC20"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "masterContract",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "contract CauldronV4"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "oracle",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "contract IOracle"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "oracleData",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "owner",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "reduceSupply",
      "inputs": [
        {
          "name": "amount",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "removeCollateral",
      "inputs": [
        {
          "name": "to",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "share",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "repay",
      "inputs": [
        {
          "name": "to",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "skim",
          "type": "bool",
          "internalType": "bool"
        },
        {
          "name": "part",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "amount",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "setBlacklistedCallee",
      "inputs": [
        {
          "name": "callee",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "blacklisted",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "setBorrowOpeningFee",
      "inputs": [
        {
          "name": "_borrowOpeningFee",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "setCollateralizationRate",
      "inputs": [
        {
          "name": "_collateralizationRate",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "setFeeTo",
      "inputs": [
        {
          "name": "newFeeTo",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "setLiquidationMultiplier",
      "inputs": [
        {
          "name": "_liquidationMultiplier",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "totalBorrow",
      "inputs": [],
      "outputs": [
        {
          "name": "elastic",
          "type": "uint128",
          "internalType": "uint128"
        },
        {
          "name": "base",
          "type": "uint128",
          "internalType": "uint128"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "totalCollateralShare",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "transferOwnership",
      "inputs": [
        {
          "name": "newOwner",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "updateExchangeRate",
      "inputs": [],
      "outputs": [
        {
          "name": "updated",
          "type": "bool",
          "internalType": "bool"
        },
        {
          "name": "rate",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "userBorrowPart",
      "inputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "userCollateralShare",
      "inputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "withdrawFees",
      "inputs": [],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "event",
      "name": "LogAccrue",
      "inputs": [
        {
          "name": "accruedAmount",
          "type": "uint128",
          "indexed": false,
          "internalType": "uint128"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "LogAddCollateral",
      "inputs": [
        {
          "name": "from",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "to",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "share",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "LogBorrow",
      "inputs": [
        {
          "name": "from",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "to",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "amount",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        },
        {
          "name": "part",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "LogBorrowOpeningFeeChanged",
      "inputs": [
        {
          "name": "previous",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        },
        {
          "name": "current",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "LogChangeBlacklistedCallee",
      "inputs": [
        {
          "name": "account",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "blacklisted",
          "type": "bool",
          "indexed": false,
          "internalType": "bool"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "LogChangeBorrowLimit",
      "inputs": [
        {
          "name": "newLimit",
          "type": "uint128",
          "indexed": false,
          "internalType": "uint128"
        },
        {
          "name": "perAddressPart",
          "type": "uint128",
          "indexed": false,
          "internalType": "uint128"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "LogCollateralizationRateChanged",
      "inputs": [
        {
          "name": "previous",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        },
        {
          "name": "current",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "LogExchangeRate",
      "inputs": [
        {
          "name": "rate",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "LogFeeTo",
      "inputs": [
        {
          "name": "newFeeTo",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "LogInterestChange",
      "inputs": [
        {
          "name": "oldInterestRate",
          "type": "uint64",
          "indexed": false,
          "internalType": "uint64"
        },
        {
          "name": "newInterestRate",
          "type": "uint64",
          "indexed": false,
          "internalType": "uint64"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "LogLiquidation",
      "inputs": [
        {
          "name": "from",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "user",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "to",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "collateralShare",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        },
        {
          "name": "borrowAmount",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        },
        {
          "name": "borrowPart",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "LogLiquidationMultiplierChanged",
      "inputs": [
        {
          "name": "previous",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        },
        {
          "name": "current",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "LogRemoveCollateral",
      "inputs": [
        {
          "name": "from",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "to",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "share",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "LogRepay",
      "inputs": [
        {
          "name": "from",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "to",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "amount",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        },
        {
          "name": "part",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "LogWithdrawFees",
      "inputs": [
        {
          "name": "feeTo",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "feesEarnedFraction",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "OwnershipTransferred",
      "inputs": [
        {
          "name": "user",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "newOwner",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "error",
      "name": "ErrNotClone",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrOverflow",
      "inputs": []
    }
  ],
  "bytecode": "0x60e060405234801561000f575f80fd5b5060405161543038038061543083398101604081905261002e91610164565b5f80546001600160a01b0319166001600160a01b03831690811782556040518392907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506001600160a01b03838116608081905290831660c0523060a08190525f828152600a602081815260408084208054600160ff199182168117909255958552818520805490961681179095558051638da5cb5b60e01b8152905194959294638da5cb5b926004808401939192918290030181865afa1580156100f9573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061011d91906101ae565b6001600160a01b0316815260208101919091526040015f20805460ff1916911515919091179055506101d0915050565b6001600160a01b0381168114610161575f80fd5b50565b5f805f60608486031215610176575f80fd5b83516101818161014d565b60208501519093506101928161014d565b60408501519092506101a38161014d565b809150509250925092565b5f602082840312156101be575f80fd5b81516101c98161014d565b9392505050565b60805160a05160c0516150ca6103665f395f818161059a01528181610bd001528181610ca601528181610ff801528181611a8801528181611ee40152818161202a01528181612e7201528181612fe10152818161306a015281816131200152818161326a0152818161333e015281816137c4015261387d01525f8181610693015281816108ac01528181610a0901528181610b4001528181610e1d015281816111ba01528181611dfd0152818161223601528181612351015261263401525f818161044d01528181610c2601528181610ce601528181610fc90152818161106501528181611640015281816117ef015281816118e601528181611a5901528181611f1d0152818161206e015281816121580152818161242b015281816129d401528181612eaa01528181612f4f015281816130a00152818161315e015281816132a00152818161330f0152818161336a0152818161340901528181613526015281816137fb015281816138bd01528181613a4201528181613b1601528181613bb90152818161401001526140ff01526150ca5ff3fe608060405260043610610228575f3560e01c80638062344411610129578063cd446e22116100a8578063f2fde38b1161006d578063f2fde38b1461073c578063f46901ed1461075b578063f7dad4341461077a578063f8ba4cff14610799578063ff6ff84b146107ad575f80fd5b8063cd446e2214610682578063d8dfeb45146106b5578063e551d11d146106d4578063ec7eb7e9146106fe578063eeae797b1461071d575f80fd5b80639b352ae1116100ee5780639b352ae114610589578063aba024f4146105bc578063b27c0e74146105d1578063c7ee2a7b1461063f578063cb0dc54814610654575f80fd5b806380623444146104c45780638285ef40146104e3578063860ffea11461052d578063876467f81461054c5780638da5cb5b1461056b575f80fd5b8063476343ee116101b5578063656f3d641161017a578063656f3d64146104295780636b2ace871461043c5780636ec097fb1461046f57806374645ff3146104845780637dc0d1d0146104a5575f80fd5b8063476343ee1461038457806348e4163e146103985780634b8a3529146103c35780634ddf47d4146103f75780635100b5671461040a575f80fd5b80631cd4c966116101fb5780631cd4c966146102eb5780631e35078e1461030c57806338b51ce11461032b5780633ba0b9a91461035a578063473e3ce71461036f575f80fd5b8063017e7e581461022c57806302ce728f1461026857806315294c40146102935780631c9e379b146102c0575b5f80fd5b348015610237575f80fd5b5060015461024b906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b348015610273575f80fd5b5061027c6107cc565b60408051921515835260208301919091520161025f565b34801561029e575f80fd5b506102b26102ad3660046142ab565b61088e565b60405190815260200161025f565b3480156102cb575f80fd5b506102b26102da3660046142e9565b60086020525f908152604090205481565b3480156102f6575f80fd5b5061030a61030536600461431f565b6108aa565b005b348015610317575f80fd5b5061030a610326366004614338565b610a07565b348015610336575f80fd5b5061034a6103453660046142e9565b610b22565b604051901515815260200161025f565b348015610365575f80fd5b506102b2600b5481565b34801561037a575f80fd5b506102b260065481565b34801561038f575f80fd5b5061030a610b35565b3480156103a3575f80fd5b506102b26103b23660046142e9565b60096020525f908152604090205481565b3480156103ce575f80fd5b506103e26103dd36600461434f565b610d95565b6040805192835260208301919091520161025f565b61030a610405366004614379565b610e13565b348015610415575f80fd5b5061030a610424366004614338565b6111b8565b6103e261043736600461442c565b6112d3565b348015610447575f80fd5b5061024b7f000000000000000000000000000000000000000000000000000000000000000081565b34801561047a575f80fd5b506102b2600e5481565b34801561048f575f80fd5b50610498611d6f565b60405161025f9190614515565b3480156104b0575f80fd5b5060035461024b906001600160a01b031681565b3480156104cf575f80fd5b5061030a6104de366004614338565b611dfb565b3480156104ee575f80fd5b5060075461050d906001600160801b0380821691600160801b90041682565b604080516001600160801b0393841681529290911660208301520161025f565b348015610538575f80fd5b5061030a6105473660046142ab565b6120df565b348015610557575f80fd5b5061030a61056636600461434f565b6121c0565b348015610576575f80fd5b505f5461024b906001600160a01b031681565b348015610594575f80fd5b5061024b7f000000000000000000000000000000000000000000000000000000000000000081565b3480156105c7575f80fd5b506102b2600f5481565b3480156105dc575f80fd5b50600c5461060d906001600160401b03808216916001600160801b03600160401b82041691600160c01b9091041683565b604080516001600160401b0394851681526001600160801b03909316602084015292169181019190915260600161025f565b34801561064a575f80fd5b506102b2600d5481565b34801561065f575f80fd5b5061034a61066e3660046142e9565b600a6020525f908152604090205460ff1681565b34801561068d575f80fd5b5061024b7f000000000000000000000000000000000000000000000000000000000000000081565b3480156106c0575f80fd5b5060025461024b906001600160a01b031681565b3480156106df575f80fd5b5060055461050d906001600160801b0380821691600160801b90041682565b348015610709575f80fd5b5061030a610718366004614338565b612234565b348015610728575f80fd5b5061030a610737366004614527565b61234f565b348015610747575f80fd5b5061030a6107563660046142e9565b61250f565b348015610766575f80fd5b5061030a6107753660046142e9565b6125a1565b348015610785575f80fd5b5061030a610794366004614572565b612632565b3480156107a4575f80fd5b5061030a612775565b3480156107b8575f80fd5b5061030a6107c7366004614745565b612996565b60035460405163d6d7d52560e01b81525f9182916001600160a01b039091169063d6d7d5259061080090600490810161482d565b60408051808303815f875af115801561081b573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061083f91906148bf565b9092509050811561088657600b8190556040518181527f9f9192b5edb17356c524e08d9e025c8e2f6307e6ea52fb7968faa3081f51c3c89060200160405180910390a19091565b50600b549091565b5f610897612775565b6108a28484846131c4565b949350505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610906573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061092a91906148eb565b6001600160a01b0316336001600160a01b0316146109895760405162461bcd60e51b815260206004820152601760248201527621b0b63632b91034b9903737ba103a34329037bbb732b960491b60448201526064015b60405180910390fd5b610991612775565b600c5460408051600160c01b9092046001600160401b039081168352831660208301527f76bc92b92b7755bcb03b25070431a80435c4d3fbf91c6c81c0c0cc350f6b5c6a910160405180910390a1600c80546001600160401b03909216600160c01b026001600160c01b03909216919091179055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a63573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610a8791906148eb565b6001600160a01b0316336001600160a01b031614610ae15760405162461bcd60e51b815260206004820152601760248201527621b0b63632b91034b9903737ba103a34329037bbb732b960491b6044820152606401610980565b600d5460408051918252602082018390527f57eec44a5232b75b6ec0bcc71b82495f7de44ea4279afe1aa3e867dd521a075e910160405180910390a1600d55565b5f610b2f82600b5461347c565b92915050565b610b3d612775565b5f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663017e7e586040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b9a573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610bbe91906148eb565b600c54604051636d289ce560e11b81527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b039081166004830152600160401b9092046001600160801b0316602482018190525f6044830181905293945092917f0000000000000000000000000000000000000000000000000000000000000000169063da5139ca90606401602060405180830381865afa158015610c6b573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610c8f9190614906565b604051633c6340f360e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301523060248301528581166044830152606482018390529192507f00000000000000000000000000000000000000000000000000000000000000009091169063f18d03cc906084015f604051808303815f87803b158015610d29575f80fd5b505af1158015610d3b573d5f803e3d5ffd5b5050600c8054600160401b600160c01b031916905550506040518281526001600160a01b038416907fbe641c3ffc44b2d6c184f023fa4ed7bda4b6ffa71e03b3c98ae0c776da1f17e79060200160405180910390a2505050565b5f80610d9f612775565b610da984846135f1565b90925090505f610db76107cc565b915050610dc4338261347c565b610e0b5760405162461bcd60e51b815260206004820152601860248201527710d85d5b191c9bdb8e881d5cd95c881a5b9cdbdb1d995b9d60421b6044820152606401610980565b509250929050565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610e5c57604051637e933e4b60e11b815260040160405180910390fd5b6002546001600160a01b031615610eb55760405162461bcd60e51b815260206004820152601d60248201527f4361756c64726f6e3a20616c726561647920696e697469616c697a65640000006044820152606401610980565b610ec18183018361491d565b600f819055600d829055600e839055600c80546001600160c01b0316600160c01b6001600160401b0387160217905560025f6003816004610f028a826149ef565b50815461010091820a6001600160a01b03818102199092169b8216029a909a17909155825491900a8089021990911698881602979097179096555050604080518082019091526001600160801b0380825260209091015250505f19600555600254169050610fb25760405162461bcd60e51b815260206004820152601260248201527f4361756c64726f6e3a20626164207061697200000000000000000000000000006044820152606401610980565b60405163095ea7b360e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301525f1960248301527f0000000000000000000000000000000000000000000000000000000000000000169063095ea7b3906044016020604051808303815f875af115801561103e573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906110629190614aa9565b507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165f818152600a602081815260408084208054600160ff1991821681179092553086528286208054909116821790558151638da5cb5b60e01b81529151909593949392638da5cb5b92600480820193918290030181865afa1580156110f3573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061111791906148eb565b6001600160a01b039081168252602082019290925260409081015f20805460ff191693151593909317909255600354915163d6d7d52560e01b815291169063d6d7d5259061116990600490810161482d565b60408051808303815f875af1158015611184573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906111a891906148bf565b600b55506111b4612775565b5050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611214573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061123891906148eb565b6001600160a01b0316336001600160a01b0316146112925760405162461bcd60e51b815260206004820152601760248201527621b0b63632b91034b9903737ba103a34329037bbb732b960491b6044820152606401610980565b600f5460408051918252602082018390527f4216a3e7a11e36090889fb0df2992ee9a622c5e97f8498a468c2b3474fa1d3a0910160405180910390a1600f55565b604080518082019091525f808252602082018190529081905f5b88811015611cfc575f8a8a8381811061130857611308614ac4565b905060200201602081019061131d9190614ae6565b905082602001511580156113345750600a8160ff16105b1561134957611341612775565b600160208401525b60091960ff8216016113a7575f805f89898681811061136a5761136a614ac4565b905060200281019061137c9190614b01565b8101906113899190614b43565b92509250925061139f8282610547868c8c61396e565b505050611cf3565b60011960ff82160161140b575f805f8989868181106113c8576113c8614ac4565b90506020028101906113da9190614b01565b8101906113e79190614b43565b92509250925061140282826113fd868c8c61396e565b6131c4565b50505050611cf3565b60031960ff82160161146d575f8088888581811061142b5761142b614ac4565b905060200281019061143d9190614b01565b81019061144a9190614b82565b915091506114628161145d848a8a61396e565b613993565b505060018352611cf3565b60041960ff8216016114d5575f8088888581811061148d5761148d614ac4565b905060200281019061149f9190614b01565b8101906114ac9190614b82565b915091506114c4816114bf848a8a61396e565b6135f1565b600187529097509550611cf3915050565b600a1960ff8216016115a7575f805f8989868181106114f6576114f6614ac4565b90506020028101906115089190614b01565b8101906115159190614ba5565b9250925092505f806115256107cc565b915091508415806115335750815b801561153e57508381115b8015611551575082158061155157508281105b61159d5760405162461bcd60e51b815260206004820152601560248201527f4361756c64726f6e3a2072617465206e6f74206f6b00000000000000000000006044820152606401610980565b5050505050611cf3565b60171960ff8216016116a4575f805f805f808c8c898181106115cb576115cb614ac4565b90506020028101906115dd9190614b01565b8101906115ea9190614bd7565b60405163c0a47c9360e01b81526001600160a01b0387811660048301528681166024830152851515604483015260ff851660648301526084820184905260a48201839052969c50949a50929850909650945092507f00000000000000000000000000000000000000000000000000000000000000009091169063c0a47c939060c4015f604051808303815f87803b158015611683575f80fd5b505af1158015611695573d5f803e3d5ffd5b50505050505050505050611cf3565b60131960ff8216016117375761172d8787848181106116c5576116c5614ac4565b90506020028101906116d79190614b01565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f920191909152508d92508c915086905081811061171f5761171f614ac4565b905060200201358787613a9f565b9095509350611cf3565b60141960ff8216016117a75761172d87878481811061175857611758614ac4565b905060200281019061176a9190614b01565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f92019190915250899250889150613b959050565b60151960ff82160161189e575f805f8989868181106117c8576117c8614ac4565b90506020028101906117da9190614b01565b8101906117e79190614c41565b9250925092507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f18d03cc84338561182a868e8e61396e565b6040516001600160e01b031960e087901b1681526001600160a01b03948516600482015292841660248401529216604482015260648101919091526084015b5f604051808303815f87803b158015611880575f80fd5b505af1158015611892573d5f803e3d5ffd5b50505050505050611cf3565b60161960ff821601611936575f805f8989868181106118bf576118bf614ac4565b90506020028101906118d19190614b01565b8101906118de9190614c6e565b9250925092507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630fca8843843385856040518563ffffffff1660e01b81526004016118699493929190614ce2565b601d1960ff821601611a17575f806119c18b8b8681811061195957611959614ac4565b905060200201358a8a8781811061197257611972614ac4565b90506020028101906119849190614b01565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f920191909152508c92508b9150613c939050565b915091508060ff166001036119eb57818060200190518101906119e49190614906565b9650611a10565b8060ff16600203611a105781806020019051810190611a0a9190614d8f565b90975095505b5050611cf3565b60051960ff821601611b5f575f878784818110611a3657611a36614ac4565b9050602002810190611a489190614b01565b810190611a559190614338565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663da5139ca7f0000000000000000000000000000000000000000000000000000000000000000611ae5611ab5858b8b61396e565b604080518082019091526007546001600160801b038082168352600160801b909104166020820152906001613e71565b6040516001600160e01b031960e085901b1681526001600160a01b039092166004830152602482015260016044820152606401602060405180830381865afa158015611b33573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611b579190614906565b955050611cf3565b60061960ff821601611bdc575f878784818110611b7e57611b7e614ac4565b9050602002810190611b909190614b01565b810190611b9d9190614338565b9050611b57611bad82888861396e565b604080518082019091526007546001600160801b038082168352600160801b909104166020820152905f613f0c565b601e1960ff821601611c1957611c14878784818110611bfd57611bfd614ac4565b9050602002810190611c0f9190614b01565b613f7f565b611cf3565b5f805f611c9b84878e8e89818110611c3357611c33614ac4565b905060200201358d8d8a818110611c4c57611c4c614ac4565b9050602002810190611c5e9190614b01565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f920191909152508f92508e9150613fb09050565b9250925092508095508160ff16600103611cca5782806020019051810190611cc39190614906565b9750611cef565b8160ff16600203611cef5782806020019051810190611ce99190614d8f565b90985096505b5050505b506001016112ed565b50805115611d63575f611d0d6107cc565b915050611d1a338261347c565b611d615760405162461bcd60e51b815260206004820152601860248201527710d85d5b191c9bdb8e881d5cd95c881a5b9cdbdb1d995b9d60421b6044820152606401610980565b505b50965096945050505050565b60048054611d7c906147f5565b80601f0160208091040260200160405190810160405280929190818152602001828054611da8906147f5565b8015611df35780601f10611dca57610100808354040283529160200191611df3565b820191905f5260205f20905b815481529060010190602001808311611dd657829003601f168201915b505050505081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e57573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611e7b91906148eb565b6001600160a01b0316336001600160a01b031614611ed55760405162461bcd60e51b815260206004820152601760248201527621b0b63632b91034b9903737ba103a34329037bbb732b960491b6044820152606401610980565b604051633de222bb60e21b81527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0381811660048401523060248401525f927f00000000000000000000000000000000000000000000000000000000000000009190911691635662311891839063f7888aec90604401602060405180830381865afa158015611f6d573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611f919190614906565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201525f6044820152606401602060405180830381865afa158015611fde573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906120029190614906565b90508181116120115780612013565b815b60405163097da6d360e41b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152306024830152336044830152606482018390525f60848301529193507f0000000000000000000000000000000000000000000000000000000000000000909116906397da6d309060a40160408051808303815f875af11580156120b5573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906120d99190614d8f565b50505050565b6001600160a01b0383165f908152600860205260409020546121019082613fd4565b6001600160a01b0384165f908152600860205260409020556006546121268183613fd4565b600655600254612141906001600160a01b0316838386613fdf565b836001600160a01b0316836121565733612178565b7f00000000000000000000000000000000000000000000000000000000000000005b6001600160a01b03167f9ed03113de523cebfe5e49d5f8e12894b1c0d42ce805990461726444c90eab87846040516121b291815260200190565b60405180910390a350505050565b6121c8612775565b6121d28282613993565b5f6121db6107cc565b9150506121e8338261347c565b61222f5760405162461bcd60e51b815260206004820152601860248201527710d85d5b191c9bdb8e881d5cd95c881a5b9cdbdb1d995b9d60421b6044820152606401610980565b505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612290573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906122b491906148eb565b6001600160a01b0316336001600160a01b03161461230e5760405162461bcd60e51b815260206004820152601760248201527621b0b63632b91034b9903737ba103a34329037bbb732b960491b6044820152606401610980565b600e5460408051918252602082018390527f4308679a9f572f4c8fc208e7d44e15ab655281fca9957589fdafa2791787b57a910160405180910390a1600e55565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156123ab573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906123cf91906148eb565b6001600160a01b0316336001600160a01b0316146124295760405162461bcd60e51b815260206004820152601760248201527621b0b63632b91034b9903737ba103a34329037bbb732b960491b6044820152606401610980565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b03161415801561247457506001600160a01b0382163014155b6124b15760405162461bcd60e51b815260206004820152600e60248201526d696e76616c69642063616c6c656560901b6044820152606401610980565b6001600160a01b0382165f818152600a6020908152604091829020805460ff191685151590811790915591519182527fc5bd4365c17df9e09859dec0d4cd85d49349f6b2d710024a59a124925189615f910160405180910390a25050565b5f546001600160a01b031633146125575760405162461bcd60e51b815260206004820152600c60248201526b15539055551213d49256915160a21b6044820152606401610980565b5f80546001600160a01b0319166001600160a01b0383169081178255604051909133917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a350565b5f546001600160a01b031633146125e95760405162461bcd60e51b815260206004820152600c60248201526b15539055551213d49256915160a21b6044820152606401610980565b600180546001600160a01b0319166001600160a01b0383169081179091556040517fcf1d3f17e521c635e0d20b8acba94ba170afc041d0546d46dafa09d3c9c19eb3905f90a250565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561268e573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906126b291906148eb565b6001600160a01b0316336001600160a01b03161461270c5760405162461bcd60e51b815260206004820152601760248201527621b0b63632b91034b9903737ba103a34329037bbb732b960491b6044820152606401610980565b6040805180820182526001600160801b038481168083529084166020928301819052600160801b810282176005558351918252918101919091527ff1fce436bc22563026222b3b2bdc088cb69d25192974264114df12ab812628f6910160405180910390a15050565b60408051606081018252600c546001600160401b038082168084526001600160801b03600160401b8404166020850152600160c01b9092041692820192909252905f906127c29042614dc5565b9050805f036127cf575050565b6001600160401b0342168252604080518082019091526007546001600160801b038082168352600160801b90910416602082018190525f036128635750508051600c805460208401516040909401516001600160401b03908116600160c01b026001600160c01b036001600160801b03909616600160401b026001600160c01b031990931691909416171792909216179055565b5f6128b5670de0b6b3a76400006128a6856128a088604001516001600160401b0316875f01516001600160801b031661415c90919063ffffffff16565b9061415c565b6128b09190614dd8565b614167565b82519091506128cd906001600160801b031682614194565b6001600160801b03908116835260208501516128ea911682614194565b6001600160801b0390811660208681018290528451858201518416600160801b02908416176007558651600c80546040808b01516001600160401b03908116600160c01b026001600160c01b03600160401b9098026001600160c01b031990941691909516179190911794909416919091179055905191831682527fee527de5e142bcc7fe0eddc4b9a04816d73f6307dd74f9204585910d60a8c083910160405180910390a150505050565b5f61299f6107cc565b9150506129aa612775565b600254604051634ffe34db60e01b81526001600160a01b0391821660048201525f918291829182917f000000000000000000000000000000000000000000000000000000000000000090911690634ffe34db906024016040805180830381865afa158015612a1a573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612a3e9190614df7565b90505f5b8a51811015612cd1575f8b8281518110612a5e57612a5e614ac4565b60200260200101519050612a72818861347c565b612cc8576001600160a01b0381165f908152600960205260408120548c5181908e9086908110612aa457612aa4614ac4565b602002602001015111612ad0578c8481518110612ac357612ac3614ac4565b6020026020010151612ad2565b805b604080518082019091526007546001600160801b038082168352600160801b9091041660208201529092505f90612b0a908483613e71565b90505f612b50612b25670de0b6b3a7640000620186a0614e55565b612b3e8d6128a0600e548761415c90919063ffffffff16565b612b489190614dd8565b88905f613f0c565b9050612b5c838561419f565b6001600160a01b0386165f90815260096020908152604080832093909355600890522054612b8a908261419f565b6001600160a01b0386165f908152600860205260409020558d6001600160a01b0316856001600160a01b03167f8ad4d3ff00da092c7ad9a573ea4f5f6a3dffc6712dc06d3f78f49b862297c40283604051612be791815260200190565b60405180910390a360408051838152602081018690526001600160a01b0387169133917fc8e512d8f188ca059984b5853d2bf653da902696b8512785b182b2c813789a6e910160405180910390a38d6001600160a01b0316856001600160a01b0316336001600160a01b03167f66b108dc29b952efc76dccea9b82dce6b59fab4d9af73d8dcc9789afcad5daf6848689604051612c97939291909283526020830191909152604082015260600190565b60405180910390a4612ca98a82613fd4565b9950612cb58983613fd4565b9850612cc18885613fd4565b9750505050505b50600101612a42565b50825f03612d215760405162461bcd60e51b815260206004820152601960248201527f4361756c64726f6e3a20616c6c2061726520736f6c76656e74000000000000006044820152606401610980565b612d3f612d2d84614167565b6007546001600160801b0316906141aa565b600780546fffffffffffffffffffffffffffffffff19166001600160801b0392909216919091179055612d8d612d7483614167565b600754600160801b90046001600160801b0316906141aa565b600780546001600160801b03928316600160801b029216919091179055600654612db7908561419f565b6006819055505f6064612df2600a6128a087620186a0612de2600e548b61415c90919063ffffffff16565b612dec9190614dd8565b9061419f565b612dfc9190614dd8565b9050612e088482613fd4565b9350612e2f612e1682614167565b600c54600160401b90046001600160801b031690614194565b600c80546001600160801b0392909216600160401b02600160401b600160c01b031990921691909117905550604051636d289ce560e11b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015260248201859052600160448301525f917f00000000000000000000000000000000000000000000000000000000000000009091169063da5139ca90606401602060405180830381865afa158015612ef1573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612f159190614906565b600254604051633c6340f360e21b81526001600160a01b0391821660048201523060248201528b82166044820152606481018890529192507f0000000000000000000000000000000000000000000000000000000000000000169063f18d03cc906084015f604051808303815f87803b158015612f90575f80fd5b505af1158015612fa2573d5f803e3d5ffd5b505050506001600160a01b038816156130535760025460405163a5d4096b60e01b81526001600160a01b038a81169263a5d4096b9261301192909116907f000000000000000000000000000000000000000000000000000000000000000090339087908c908f90600401614e6c565b60408051808303815f875af115801561302c573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906130509190614d8f565b50505b604051636d289ce560e11b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015260248201869052600160448301527f0000000000000000000000000000000000000000000000000000000000000000169063da5139ca90606401602060405180830381865afa1580156130e5573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906131099190614906565b604051633c6340f360e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152336024830152306044830152606482018390529192507f00000000000000000000000000000000000000000000000000000000000000009091169063f18d03cc906084015f604051808303815f87803b1580156131a1575f80fd5b505af11580156131b3573d5f803e3d5ffd5b505050505050505050505050505050565b604080518082019091526007546001600160801b038082168352600160801b9091041660208201525f906131fa908360016141b5565b81516020928301516001600160801b03908116600160801b029116176007556001600160a01b0386165f908152600990925260409091205490915061323f908361419f565b6001600160a01b038581165f90815260096020526040808220939093559151636d289ce560e11b81527f00000000000000000000000000000000000000000000000000000000000000008216600482015260248101849052600160448201527f00000000000000000000000000000000000000000000000000000000000000009091169063da5139ca90606401602060405180830381865afa1580156132e7573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061330b9190614906565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f18d03cc7f000000000000000000000000000000000000000000000000000000000000000086613368573361338a565b7f00000000000000000000000000000000000000000000000000000000000000005b6040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152306044820152606481018490526084015f604051808303815f87803b1580156133dc575f80fd5b505af11580156133ee573d5f803e3d5ffd5b50505050846001600160a01b0316846134075733613429565b7f00000000000000000000000000000000000000000000000000000000000000005b6001600160a01b03167fc8e512d8f188ca059984b5853d2bf653da902696b8512785b182b2c813789a6e848660405161346c929190918252602082015260400190565b60405180910390a3509392505050565b6001600160a01b0382165f908152600960205260408120548082036134a5576001915050610b2f565b6001600160a01b0384165f90815260086020526040812054908190036134cf575f92505050610b2f565b604080518082019091526007546001600160801b03808216808452600160801b90920416602083018190529061350c9087906128a090879061415c565b6135169190614dd8565b600254600d546001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811692635662311892911690613574906128a061356d620186a0670de0b6b3a7640000614dd8565b899061415c565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201525f6044820152606401602060405180830381865afa1580156135c1573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906135e59190614906565b10159695505050505050565b5f805f620186a061360d600f548661415c90919063ffffffff16565b6136179190614dd8565b90506136566136268583613fd4565b604080518082019091526007546001600160801b038082168352600160801b909104166020820152906001614228565b81516020928301516001600160801b03908116600160801b90810292821683811760075560408051808201909152600554808516808352939004841696810196909652939750911690911711156136e65760405162461bcd60e51b8152602060048201526014602482015273109bdc9c9bddc8131a5b5a5d081c995858da195960621b6044820152606401610980565b600c5461370390600160401b90046001600160801b031683614194565b600c80546001600160801b0392909216600160401b02600160401b600160c01b0319909216919091179055335f908152600960205260408120546137479086613fd4565b905081602001516001600160801b031681111561379d5760405162461bcd60e51b8152602060048201526014602482015273109bdc9c9bddc8131a5b5a5d081c995858da195960621b6044820152606401610980565b335f9081526009602052604080822083905551636d289ce560e11b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526024820189905260448201929092527f00000000000000000000000000000000000000000000000000000000000000009091169063da5139ca90606401602060405180830381865afa158015613842573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906138669190614906565b604051633c6340f360e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301523060248301528981166044830152606482018390529195507f00000000000000000000000000000000000000000000000000000000000000009091169063f18d03cc906084015f604051808303815f87803b158015613900575f80fd5b505af1158015613912573d5f803e3d5ffd5b5050506001600160a01b0388169050337fb92cb6bca8e3270b9170930f03b17571e55791acdb1a0e9f339eec88bdb35e2461394d8987613fd4565b60408051918252602082018a90520160405180910390a35050509250929050565b5f8084121561398b575f19841461398557816108a2565b826108a2565b509192915050565b335f908152600860205260409020546139ac908261419f565b335f908152600860205260409020556006546139c8908261419f565b6006556040518181526001600160a01b0383169033907f8ad4d3ff00da092c7ad9a573ea4f5f6a3dffc6712dc06d3f78f49b862297c4029060200160405180910390a3600254604051633c6340f360e21b81526001600160a01b0391821660048201523060248201528382166044820152606481018390527f00000000000000000000000000000000000000000000000000000000000000009091169063f18d03cc906084015f604051808303815f87803b158015613a85575f80fd5b505af1158015613a97573d5f803e3d5ffd5b505050505050565b5f805f805f8089806020019051810190613ab99190614ec3565b9350935093509350613acc82898961396e565b9150613ad981898961396e565b60405162ae511b60e21b81526001600160a01b038681166004830152336024830152858116604483015260648201859052608482018390529192507f0000000000000000000000000000000000000000000000000000000000000000909116906302b9446c908b9060a401604080518083038185885af1158015613b5f573d5f803e3d5ffd5b50505050506040513d601f19601f82011682018060405250810190613b849190614d8f565b955095505050505094509492505050565b5f805f805f8088806020019051810190613baf9190614ec3565b93509350935093507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166397da6d30853386613bf4878e8e61396e565b613bff878f8f61396e565b6040516001600160e01b031960e088901b1681526001600160a01b03958616600482015293851660248501529390911660448301526064820152608481019190915260a40160408051808303815f875af1158015613c5f573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190613c839190614d8f565b9550955050505050935093915050565b60605f805f805f8089806020019051810190613caf9190614f13565b94509450945094509450828015613cc4575081155b15613cf2578389604051602001613cdc929190614fc9565b6040516020818303038152906040529350613d4b565b82158015613cfd5750815b15613d15578388604051602001613cdc929190614fc9565b828015613d1f5750815b15613d4b57838989604051602001613d3993929190614fea565b60405160208183030381529060405293505b6001600160a01b0385165f908152600a602052604090205460ff1615613db35760405162461bcd60e51b815260206004820152601460248201527f4361756c64726f6e3a2063616e27742063616c6c0000000000000000000000006044820152606401610980565b5f80866001600160a01b03168d87604051613dce9190615010565b5f6040518083038185875af1925050503d805f8114613e08576040519150601f19603f3d011682016040523d82523d5f602084013e613e0d565b606091505b509150915081613e5f5760405162461bcd60e51b815260206004820152601560248201527f4361756c64726f6e3a2063616c6c206661696c656400000000000000000000006044820152606401610980565b9c919b50909950505050505050505050565b5f83602001516001600160801b03165f03613e8d575081613f05565b602084015184516001600160801b0391821691613eab911685614e55565b613eb59190614dd8565b9050818015613ef2575082845f01516001600160801b031685602001516001600160801b031683613ee69190614e55565b613ef09190614dd8565b105b15613f055780613f018161502b565b9150505b9392505050565b82515f906001600160801b03168103613f26575081613f05565b835160208501516001600160801b0391821691613f44911685614e55565b613f4e9190614dd8565b9050818015613ef257508284602001516001600160801b0316855f01516001600160801b031683613ee69190614e55565b5f80808080613f9086880188614745565b94509450945094509450613fa78585858585612996565b50505050505050565b604080518082019091525f8082526020820181905260609196509650969350505050565b5f613f058284615043565b80156140cd57604051633de222bb60e21b81526001600160a01b0385811660048301523060248301526140799184917f0000000000000000000000000000000000000000000000000000000000000000169063f7888aec90604401602060405180830381865afa158015614055573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612dec9190614906565b8311156140c85760405162461bcd60e51b815260206004820152601760248201527f4361756c64726f6e3a20536b696d20746f6f206d7563680000000000000000006044820152606401610980565b6120d9565b604051633c6340f360e21b81526001600160a01b038581166004830152336024830152306044830152606482018590527f0000000000000000000000000000000000000000000000000000000000000000169063f18d03cc906084015f604051808303815f87803b158015614140575f80fd5b505af1158015614152573d5f803e3d5ffd5b5050505050505050565b5f613f058284614e55565b5f6001600160801b0382111561419057604051633b13fa2560e11b815260040160405180910390fd5b5090565b5f613f058284615056565b5f613f058284614dc5565b5f613f058284615075565b604080518082019091525f80825260208201525f6141d4858585613e71565b90506141df81614167565b855186906141ee908390615075565b6001600160801b031690525061420384614167565b856020018181516142149190615075565b6001600160801b0316905250939492505050565b604080518082019091525f80825260208201525f614247858585613f0c565b905061425284614167565b85518690614261908390615056565b6001600160801b031690525061427681614167565b856020018181516142149190615056565b6001600160a01b038116811461429b575f80fd5b50565b801515811461429b575f80fd5b5f805f606084860312156142bd575f80fd5b83356142c881614287565b925060208401356142d88161429e565b929592945050506040919091013590565b5f602082840312156142f9575f80fd5b8135613f0581614287565b80356001600160401b038116811461431a575f80fd5b919050565b5f6020828403121561432f575f80fd5b613f0582614304565b5f60208284031215614348575f80fd5b5035919050565b5f8060408385031215614360575f80fd5b823561436b81614287565b946020939093013593505050565b5f806020838503121561438a575f80fd5b82356001600160401b0381111561439f575f80fd5b8301601f810185136143af575f80fd5b80356001600160401b038111156143c4575f80fd5b8560208284010111156143d5575f80fd5b6020919091019590945092505050565b5f8083601f8401126143f5575f80fd5b5081356001600160401b0381111561440b575f80fd5b6020830191508360208260051b8501011115614425575f80fd5b9250929050565b5f805f805f8060608789031215614441575f80fd5b86356001600160401b03811115614456575f80fd5b61446289828a016143e5565b90975095505060208701356001600160401b03811115614480575f80fd5b61448c89828a016143e5565b90955093505060408701356001600160401b038111156144aa575f80fd5b6144b689828a016143e5565b979a9699509497509295939492505050565b5f5b838110156144e25781810151838201526020016144ca565b50505f910152565b5f81518084526145018160208601602086016144c8565b601f01601f19169290920160200192915050565b602081525f613f0560208301846144ea565b5f8060408385031215614538575f80fd5b823561454381614287565b915060208301356145538161429e565b809150509250929050565b6001600160801b038116811461429b575f80fd5b5f8060408385031215614583575f80fd5b823561458e8161455e565b915060208301356145538161455e565b634e487b7160e01b5f52604160045260245ffd5b604051601f8201601f191681016001600160401b03811182821017156145da576145da61459e565b604052919050565b5f6001600160401b038211156145fa576145fa61459e565b5060051b60200190565b5f82601f830112614613575f80fd5b8135614626614621826145e2565b6145b2565b8082825260208201915060208360051b860101925085831115614647575f80fd5b602085015b8381101561466d57803561465f81614287565b83526020928301920161464c565b5095945050505050565b5f82601f830112614686575f80fd5b8135614694614621826145e2565b8082825260208201915060208360051b8601019250858311156146b5575f80fd5b602085015b8381101561466d5780358352602092830192016146ba565b5f6001600160401b038211156146ea576146ea61459e565b50601f01601f191660200190565b5f82601f830112614707575f80fd5b8135614715614621826146d2565b818152846020838601011115614729575f80fd5b816020850160208301375f918101602001919091529392505050565b5f805f805f60a08688031215614759575f80fd5b85356001600160401b0381111561476e575f80fd5b61477a88828901614604565b95505060208601356001600160401b03811115614795575f80fd5b6147a188828901614677565b94505060408601356147b281614287565b925060608601356147c281614287565b915060808601356001600160401b038111156147dc575f80fd5b6147e8888289016146f8565b9150509295509295909350565b600181811c9082168061480957607f821691505b60208210810361482757634e487b7160e01b5f52602260045260245ffd5b50919050565b602081525f80835461483e816147f5565b806020860152600182165f811461485c5760018114614878576148a9565b60ff1983166040870152604082151560051b87010193506148a9565b865f5260205f205f5b838110156148a057815488820160400152600190910190602001614881565b87016040019450505b509195945050505050565b805161431a8161429e565b5f80604083850312156148d0575f80fd5b82516148db8161429e565b6020939093015192949293505050565b5f602082840312156148fb575f80fd5b8151613f0581614287565b5f60208284031215614916575f80fd5b5051919050565b5f805f805f805f60e0888a031215614933575f80fd5b873561493e81614287565b9650602088013561494e81614287565b955060408801356001600160401b03811115614968575f80fd5b6149748a828b016146f8565b95505061498360608901614304565b9699959850939660808101359560a0820135955060c0909101359350915050565b601f82111561222f57805f5260205f20601f840160051c810160208510156149c95750805b601f840160051c820191505b818110156149e8575f81556001016149d5565b5050505050565b81516001600160401b03811115614a0857614a0861459e565b614a1c81614a1684546147f5565b846149a4565b6020601f821160018114614a4e575f8315614a375750848201515b5f19600385901b1c1916600184901b1784556149e8565b5f84815260208120601f198516915b82811015614a7d5787850151825560209485019460019092019101614a5d565b5084821015614a9a57868401515f19600387901b60f8161c191681555b50505050600190811b01905550565b5f60208284031215614ab9575f80fd5b8151613f058161429e565b634e487b7160e01b5f52603260045260245ffd5b60ff8116811461429b575f80fd5b5f60208284031215614af6575f80fd5b8135613f0581614ad8565b5f808335601e19843603018112614b16575f80fd5b8301803591506001600160401b03821115614b2f575f80fd5b602001915036819003821315614425575f80fd5b5f805f60608486031215614b55575f80fd5b833592506020840135614b6781614287565b91506040840135614b778161429e565b809150509250925092565b5f8060408385031215614b93575f80fd5b82359150602083013561455381614287565b5f805f60608486031215614bb7575f80fd5b8335614bc28161429e565b95602085013595506040909401359392505050565b5f805f805f8060c08789031215614bec575f80fd5b8635614bf781614287565b95506020870135614c0781614287565b94506040870135614c178161429e565b93506060870135614c2781614ad8565b9598949750929560808101359460a0909101359350915050565b5f805f60608486031215614c53575f80fd5b8335614c5e81614287565b925060208401356142d881614287565b5f805f60608486031215614c80575f80fd5b8335614c8b81614287565b925060208401356001600160401b03811115614ca5575f80fd5b614cb186828701614604565b92505060408401356001600160401b03811115614ccc575f80fd5b614cd886828701614677565b9150509250925092565b5f608082016001600160a01b03871683526001600160a01b03861660208401526080604084015280855180835260a0850191506020870192505f5b81811015614d445783516001600160a01b0316835260209384019390920191600101614d1d565b50508381036060850152845180825260209182019250908501905f90815b81811015614d80578351855260209485019490930192600101614d62565b50929998505050505050505050565b5f8060408385031215614da0575f80fd5b505080516020909101519092909150565b634e487b7160e01b5f52601160045260245ffd5b81810381811115610b2f57610b2f614db1565b5f82614df257634e487b7160e01b5f52601260045260245ffd5b500490565b5f6040828403128015614e08575f80fd5b50604080519081016001600160401b0381118282101715614e2b57614e2b61459e565b6040528251614e398161455e565b81526020830151614e498161455e565b60208201529392505050565b8082028115828204841417610b2f57610b2f614db1565b6001600160a01b03871681526001600160a01b03861660208201526001600160a01b038516604082015283606082015282608082015260c060a08201525f614eb760c08301846144ea565b98975050505050505050565b5f805f8060808587031215614ed6575f80fd5b8451614ee181614287565b6020860151909450614ef281614287565b6040860151606090960151949790965092505050565b805161431a81614ad8565b5f805f805f60a08688031215614f27575f80fd5b8551614f3281614287565b60208701519095506001600160401b03811115614f4d575f80fd5b8601601f81018813614f5d575f80fd5b8051614f6b614621826146d2565b818152896020838501011115614f7f575f80fd5b614f908260208301602086016144c8565b9550614fa1915050604087016148b4565b9250614faf606087016148b4565b9150614fbd60808701614f08565b90509295509295909350565b5f8351614fda8184602088016144c8565b9190910191825250602001919050565b5f8451614ffb8184602089016144c8565b91909101928352506020820152604001919050565b5f82516150218184602087016144c8565b9190910192915050565b5f6001820161503c5761503c614db1565b5060010190565b80820180821115610b2f57610b2f614db1565b6001600160801b038181168382160190811115610b2f57610b2f614db1565b6001600160801b038281168282160390811115610b2f57610b2f614db156fea26469706673582212206c23de52a39276aac1579259cb94c6db43c5967106c5e81f6ca79f19c332593864736f6c634300081a0033",
  "args_data": "0x000000000000000000000000d96f48665a1410c0cd669a88898eca36b9fc2cce00000000000000000000000099d8a9c45b2eca8864373a26d1459e3dff1e17f3000000000000000000000000fb3485c2e209a5cfbdc1447674256578f1a80ee3",
  "tx_hash": "0x2e6e190425cdb8caa8009a806e8ed117f850cb1f7858a004076d22d52032ef83",
  "args": [
    "0x8f788F226d36298dEb09A320956E3E3318Cba812"
  ],
  "data": "0xf2fde38b0000000000000000000000008f788f226d36298deb09a320956e3e3318cba812",
  "artifact_path": "CauldronV4.sol",
  "artifact_full_path": "CauldronV4.sol:CauldronV4",
  "standardJsonInput": {
    "language": "Solidity",
    "sources": {
      "src/cauldrons/CauldronV4.sol": {
        "content": "// SPDX-License-Identifier: UNLICENSED\n\n// Cauldron\n\n//    (                (   (\n//    )\\      )    (   )\\  )\\ )  (\n//  (((_)  ( /(   ))\\ ((_)(()/(  )(    (    (\n//  )\\___  )(_)) /((_) _   ((_))(()\\   )\\   )\\ )\n// ((/ __|((_)_ (_))( | |  _| |  ((_) ((_) _(_/(\n//  | (__ / _` || || || |/ _` | | '_|/ _ \\| ' \\))\n//   \\___|\\__,_| \\_,_||_|\\__,_| |_|  \\___/|_||_|\n\npragma solidity >=0.8.0;\nimport {Owned} from \"@solmate/auth/Owned.sol\";\nimport {IERC20} from \"@BoringSolidity/interfaces/IERC20.sol\";\nimport {IMasterContract} from \"@BoringSolidity/interfaces/IMasterContract.sol\";\nimport {RebaseLibrary, Rebase} from \"@BoringSolidity/libraries/BoringRebase.sol\";\nimport {BoringMath, BoringMath128} from \"@BoringSolidity/libraries/BoringMath.sol\";\nimport {IOracle} from \"/interfaces/IOracle.sol\";\nimport {ISwapperV2} from \"/interfaces/ISwapperV2.sol\";\nimport {IBentoBoxV1} from \"/interfaces/IBentoBoxV1.sol\";\n\n// solhint-disable avoid-low-level-calls\n// solhint-disable no-inline-assembly\n\n/// @title Cauldron\n/// @dev This contract allows contract calls to any contract (except BentoBox)\n/// from arbitrary callers thus, don't trust calls from this contract in any circumstances.\ncontract CauldronV4 is Owned, IMasterContract {\n    using BoringMath for uint256;\n    using BoringMath128 for uint128;\n    using RebaseLibrary for Rebase;\n\n    event LogExchangeRate(uint256 rate);\n    event LogAccrue(uint128 accruedAmount);\n    event LogAddCollateral(address indexed from, address indexed to, uint256 share);\n    event LogRemoveCollateral(address indexed from, address indexed to, uint256 share);\n    event LogBorrow(address indexed from, address indexed to, uint256 amount, uint256 part);\n    event LogRepay(address indexed from, address indexed to, uint256 amount, uint256 part);\n    event LogFeeTo(address indexed newFeeTo);\n    event LogWithdrawFees(address indexed feeTo, uint256 feesEarnedFraction);\n    event LogInterestChange(uint64 oldInterestRate, uint64 newInterestRate);\n    event LogChangeBorrowLimit(uint128 newLimit, uint128 perAddressPart);\n    event LogChangeBlacklistedCallee(address indexed account, bool blacklisted);\n    event LogLiquidationMultiplierChanged(uint256 previous, uint256 current);\n    event LogBorrowOpeningFeeChanged(uint256 previous, uint256 current);\n    event LogCollateralizationRateChanged(uint256 previous, uint256 current);\n    \n    event LogLiquidation(\n        address indexed from,\n        address indexed user,\n        address indexed to,\n        uint256 collateralShare,\n        uint256 borrowAmount,\n        uint256 borrowPart\n    );\n\n    error ErrNotClone();\n\n    // Immutables (for MasterContract and all clones)\n    IBentoBoxV1 public immutable bentoBox;\n    CauldronV4 public immutable masterContract;\n    IERC20 public immutable magicInternetMoney;\n\n    // MasterContract variables\n    address public feeTo;\n\n    // Per clone variables\n    // Clone init settings\n    IERC20 public collateral;\n    IOracle public oracle;\n    bytes public oracleData;\n\n    struct BorrowCap {\n        uint128 total;\n        uint128 borrowPartPerAddress;\n    }\n\n    BorrowCap public borrowLimit;\n\n    // Total amounts\n    uint256 public totalCollateralShare; // Total collateral supplied\n    Rebase public totalBorrow; // elastic = Total token amount to be repayed by borrowers, base = Total parts of the debt held by borrowers\n\n    // User balances\n    mapping(address => uint256) public userCollateralShare;\n    mapping(address => uint256) public userBorrowPart;\n\n    // Callee restrictions\n    mapping(address => bool) public blacklistedCallees;\n\n    /// @notice Exchange and interest rate tracking.\n    /// This is 'cached' here because calls to Oracles can be very expensive.\n    uint256 public exchangeRate;\n\n    struct AccrueInfo {\n        uint64 lastAccrued;\n        uint128 feesEarned;\n        uint64 INTEREST_PER_SECOND;\n    }\n\n    AccrueInfo public accrueInfo;\n\n    uint64 internal constant ONE_PERCENT_RATE = 317097920;\n\n    // Settings\n    uint256 public COLLATERIZATION_RATE;\n    uint256 internal constant COLLATERIZATION_RATE_PRECISION = 1e5; // Must be less than EXCHANGE_RATE_PRECISION (due to optimization in math)\n\n    uint256 internal constant EXCHANGE_RATE_PRECISION = 1e18;\n\n    uint256 public LIQUIDATION_MULTIPLIER; \n    uint256 internal constant LIQUIDATION_MULTIPLIER_PRECISION = 1e5;\n\n    uint256 public BORROW_OPENING_FEE;\n    uint256 internal constant BORROW_OPENING_FEE_PRECISION = 1e5;\n\n    uint256 internal constant DISTRIBUTION_PART = 10;\n    uint256 internal constant DISTRIBUTION_PRECISION = 100;\n\n    modifier onlyMasterContractOwner() {\n        require(msg.sender == masterContract.owner(), \"Caller is not the owner\");\n        _;\n    }\n\n    modifier onlyClones() {\n        if (address(this) == address(masterContract)) {\n            revert ErrNotClone();\n        }\n        _;\n    }\n\n    /// @notice The constructor is only used for the initial master contract. Subsequent clones are initialised via `init`.\n    constructor(IBentoBoxV1 bentoBox_, IERC20 magicInternetMoney_, address owner_) Owned(owner_) {\n        bentoBox = bentoBox_;\n        magicInternetMoney = magicInternetMoney_;\n        masterContract = this;\n        \n        blacklistedCallees[address(bentoBox)] = true;\n        blacklistedCallees[address(this)] = true;\n        blacklistedCallees[Owned(address(bentoBox)).owner()] = true;\n    }\n\n    /// @notice Serves as the constructor for clones, as clones can't have a regular constructor\n    /// @dev `data` is abi encoded in the format: (IERC20 collateral, IERC20 asset, IOracle oracle, bytes oracleData)\n    function init(bytes calldata data) public virtual onlyClones payable override {\n        require(address(collateral) == address(0), \"Cauldron: already initialized\");\n        (collateral, oracle, oracleData, accrueInfo.INTEREST_PER_SECOND, LIQUIDATION_MULTIPLIER, COLLATERIZATION_RATE, BORROW_OPENING_FEE) = abi.decode(data, (IERC20, IOracle, bytes, uint64, uint256, uint256, uint256));\n        borrowLimit = BorrowCap(type(uint128).max, type(uint128).max);\n        require(address(collateral) != address(0), \"Cauldron: bad pair\");\n\n        magicInternetMoney.approve(address(bentoBox), type(uint256).max);\n\n        blacklistedCallees[address(bentoBox)] = true;\n        blacklistedCallees[address(this)] = true;\n        blacklistedCallees[Owned(address(bentoBox)).owner()] = true;\n\n        (, exchangeRate) = oracle.get(oracleData);\n\n        accrue();\n    }\n\n    /// @notice Accrues the interest on the borrowed tokens and handles the accumulation of fees.\n    function accrue() public {\n        AccrueInfo memory _accrueInfo = accrueInfo;\n        // Number of seconds since accrue was called\n        uint256 elapsedTime = block.timestamp - _accrueInfo.lastAccrued;\n        if (elapsedTime == 0) {\n            return;\n        }\n        _accrueInfo.lastAccrued = uint64(block.timestamp);\n\n        Rebase memory _totalBorrow = totalBorrow;\n        if (_totalBorrow.base == 0) {\n            accrueInfo = _accrueInfo;\n            return;\n        }\n\n        // Accrue interest\n        uint128 extraAmount = (uint256(_totalBorrow.elastic).mul(_accrueInfo.INTEREST_PER_SECOND).mul(elapsedTime) / 1e18).to128();\n        _totalBorrow.elastic = _totalBorrow.elastic.add(extraAmount);\n\n        _accrueInfo.feesEarned = _accrueInfo.feesEarned.add(extraAmount);\n        totalBorrow = _totalBorrow;\n        accrueInfo = _accrueInfo;\n\n        emit LogAccrue(extraAmount);\n    }\n\n    /// @notice Concrete implementation of `isSolvent`. Includes a third parameter to allow caching `exchangeRate`.\n    /// @param _exchangeRate The exchange rate. Used to cache the `exchangeRate` between calls.\n    function _isSolvent(address user, uint256 _exchangeRate) virtual internal view returns (bool) {\n        // accrue must have already been called!\n        uint256 borrowPart = userBorrowPart[user];\n        if (borrowPart == 0) return true;\n        uint256 collateralShare = userCollateralShare[user];\n        if (collateralShare == 0) return false;\n\n        Rebase memory _totalBorrow = totalBorrow;\n\n        return\n            bentoBox.toAmount(\n                collateral,\n                collateralShare.mul(EXCHANGE_RATE_PRECISION / COLLATERIZATION_RATE_PRECISION).mul(COLLATERIZATION_RATE),\n                false\n            ) >=\n            // Moved exchangeRate here instead of dividing the other side to preserve more precision\n            borrowPart.mul(_totalBorrow.elastic).mul(_exchangeRate) / _totalBorrow.base;\n    }\n\n    function isSolvent(address user) public view returns (bool) {\n        return _isSolvent(user, exchangeRate);\n    }\n    \n    /// @dev Checks if the user is solvent in the closed liquidation case at the end of the function body.\n    modifier solvent() {\n        _;\n        (, uint256 _exchangeRate) = updateExchangeRate();\n        require(_isSolvent(msg.sender, _exchangeRate), \"Cauldron: user insolvent\");\n    }\n\n    /// @notice Gets the exchange rate. I.e how much collateral to buy 1e18 asset.\n    /// This function is supposed to be invoked if needed because Oracle queries can be expensive.\n    /// @return updated True if `exchangeRate` was updated.\n    /// @return rate The new exchange rate.\n    function updateExchangeRate() public returns (bool updated, uint256 rate) {\n        (updated, rate) = oracle.get(oracleData);\n\n        if (updated) {\n            exchangeRate = rate;\n            emit LogExchangeRate(rate);\n        } else {\n            // Return the old rate if fetching wasn't successful\n            rate = exchangeRate;\n        }\n    }\n\n    /// @dev Helper function to move tokens.\n    /// @param token The ERC-20 token.\n    /// @param share The amount in shares to add.\n    /// @param total Grand total amount to deduct from this contract's balance. Only applicable if `skim` is True.\n    /// Only used for accounting checks.\n    /// @param skim If True, only does a balance check on this contract.\n    /// False if tokens from msg.sender in `bentoBox` should be transferred.\n    function _addTokens(\n        IERC20 token,\n        uint256 share,\n        uint256 total,\n        bool skim\n    ) internal {\n        if (skim) {\n            require(share <= bentoBox.balanceOf(token, address(this)).sub(total), \"Cauldron: Skim too much\");\n        } else {\n            bentoBox.transfer(token, msg.sender, address(this), share);\n        }\n    }\n\n    function _afterAddCollateral(address user, uint256 collateralShare) internal virtual {}\n\n    /// @notice Adds `collateral` from msg.sender to the account `to`.\n    /// @param to The receiver of the tokens.\n    /// @param skim True if the amount should be skimmed from the deposit balance of msg.sender.x\n    /// False if tokens from msg.sender in `bentoBox` should be transferred.\n    /// @param share The amount of shares to add for `to`.\n    function addCollateral(\n        address to,\n        bool skim,\n        uint256 share\n    ) public virtual {\n        userCollateralShare[to] = userCollateralShare[to].add(share);\n        uint256 oldTotalCollateralShare = totalCollateralShare;\n        totalCollateralShare = oldTotalCollateralShare.add(share);\n        _addTokens(collateral, share, oldTotalCollateralShare, skim);\n        _afterAddCollateral(to, share);\n        emit LogAddCollateral(skim ? address(bentoBox) : msg.sender, to, share);\n    }\n\n    function _afterRemoveCollateral(address from, address to, uint256 collateralShare) internal virtual {}\n\n    /// @dev Concrete implementation of `removeCollateral`.\n    function _removeCollateral(address to, uint256 share) internal virtual {\n        userCollateralShare[msg.sender] = userCollateralShare[msg.sender].sub(share);\n        totalCollateralShare = totalCollateralShare.sub(share);\n        _afterRemoveCollateral(msg.sender, to, share);\n        emit LogRemoveCollateral(msg.sender, to, share);\n        bentoBox.transfer(collateral, address(this), to, share);\n    }\n\n    /// @notice Removes `share` amount of collateral and transfers it to `to`.\n    /// @param to The receiver of the shares.\n    /// @param share Amount of shares to remove.\n    function removeCollateral(address to, uint256 share) public solvent {\n        // accrue must be called because we check solvency\n        accrue();\n        _removeCollateral(to, share);\n    }\n\n    function _preBorrowAction(address to, uint256 amount, uint256 newBorrowPart, uint256 part) internal virtual {\n\n    }\n\n    /// @dev Concrete implementation of `borrow`.\n    function _borrow(address to, uint256 amount) internal returns (uint256 part, uint256 share) {\n        uint256 feeAmount = amount.mul(BORROW_OPENING_FEE) / BORROW_OPENING_FEE_PRECISION; // A flat % fee is charged for any borrow\n        (totalBorrow, part) = totalBorrow.add(amount.add(feeAmount), true);\n\n        BorrowCap memory cap =  borrowLimit;\n\n        require(totalBorrow.elastic <= cap.total, \"Borrow Limit reached\");\n\n        accrueInfo.feesEarned = accrueInfo.feesEarned.add(uint128(feeAmount));\n        \n        uint256 newBorrowPart = userBorrowPart[msg.sender].add(part);\n        require(newBorrowPart <= cap.borrowPartPerAddress, \"Borrow Limit reached\");\n        _preBorrowAction(to, amount, newBorrowPart, part);\n\n        userBorrowPart[msg.sender] = newBorrowPart;\n\n        // As long as there are tokens on this contract you can 'mint'... this enables limiting borrows\n        share = bentoBox.toShare(magicInternetMoney, amount, false);\n        bentoBox.transfer(magicInternetMoney, address(this), to, share);\n\n        emit LogBorrow(msg.sender, to, amount.add(feeAmount), part);\n    }\n\n    /// @notice Sender borrows `amount` and transfers it to `to`.\n    /// @return part Total part of the debt held by borrowers.\n    /// @return share Total amount in shares borrowed.\n    function borrow(address to, uint256 amount) public solvent returns (uint256 part, uint256 share) {\n        accrue();\n        (part, share) = _borrow(to, amount);\n    }\n\n    /// @dev Concrete implementation of `repay`.\n    function _repay(\n        address to,\n        bool skim,\n        uint256 part\n    ) internal returns (uint256 amount) {\n        (totalBorrow, amount) = totalBorrow.sub(part, true);\n        userBorrowPart[to] = userBorrowPart[to].sub(part);\n\n        uint256 share = bentoBox.toShare(magicInternetMoney, amount, true);\n        bentoBox.transfer(magicInternetMoney, skim ? address(bentoBox) : msg.sender, address(this), share);\n        emit LogRepay(skim ? address(bentoBox) : msg.sender, to, amount, part);\n    }\n\n    /// @notice Repays a loan.\n    /// @param to Address of the user this payment should go.\n    /// @param skim True if the amount should be skimmed from the deposit balance of msg.sender.\n    /// False if tokens from msg.sender in `bentoBox` should be transferred.\n    /// @param part The amount to repay. See `userBorrowPart`.\n    /// @return amount The total amount repayed.\n    function repay(\n        address to,\n        bool skim,\n        uint256 part\n    ) public returns (uint256 amount) {\n        accrue();\n        amount = _repay(to, skim, part);\n    }\n\n    // Functions that need accrue to be called\n    uint8 internal constant ACTION_REPAY = 2;\n    uint8 internal constant ACTION_REMOVE_COLLATERAL = 4;\n    uint8 internal constant ACTION_BORROW = 5;\n    uint8 internal constant ACTION_GET_REPAY_SHARE = 6;\n    uint8 internal constant ACTION_GET_REPAY_PART = 7;\n    uint8 internal constant ACTION_ACCRUE = 8;\n\n    // Functions that don't need accrue to be called\n    uint8 internal constant ACTION_ADD_COLLATERAL = 10;\n    uint8 internal constant ACTION_UPDATE_EXCHANGE_RATE = 11;\n\n    // Function on BentoBox\n    uint8 internal constant ACTION_BENTO_DEPOSIT = 20;\n    uint8 internal constant ACTION_BENTO_WITHDRAW = 21;\n    uint8 internal constant ACTION_BENTO_TRANSFER = 22;\n    uint8 internal constant ACTION_BENTO_TRANSFER_MULTIPLE = 23;\n    uint8 internal constant ACTION_BENTO_SETAPPROVAL = 24;\n\n    // Any external call (except to BentoBox)\n    uint8 internal constant ACTION_CALL = 30;\n    uint8 internal constant ACTION_LIQUIDATE = 31;\n\n    // Custom cook actions\n    uint8 internal constant ACTION_CUSTOM_START_INDEX = 100;\n\n    int256 internal constant USE_VALUE1 = -1;\n    int256 internal constant USE_VALUE2 = -2;\n\n    /// @dev Helper function for choosing the correct value (`value1` or `value2`) depending on `inNum`.\n    function _num(\n        int256 inNum,\n        uint256 value1,\n        uint256 value2\n    ) internal pure returns (uint256 outNum) {\n        outNum = inNum >= 0 ? uint256(inNum) : (inNum == USE_VALUE1 ? value1 : value2);\n    }\n\n    /// @dev Helper function for depositing into `bentoBox`.\n    function _bentoDeposit(\n        bytes memory data,\n        uint256 value,\n        uint256 value1,\n        uint256 value2\n    ) internal returns (uint256, uint256) {\n        (IERC20 token, address to, int256 amount, int256 share) = abi.decode(data, (IERC20, address, int256, int256));\n        amount = int256(_num(amount, value1, value2)); // Done this way to avoid stack too deep errors\n        share = int256(_num(share, value1, value2));\n        return bentoBox.deposit{value: value}(token, msg.sender, to, uint256(amount), uint256(share));\n    }\n\n    /// @dev Helper function to withdraw from the `bentoBox`.\n    function _bentoWithdraw(\n        bytes memory data,\n        uint256 value1,\n        uint256 value2\n    ) internal returns (uint256, uint256) {\n        (IERC20 token, address to, int256 amount, int256 share) = abi.decode(data, (IERC20, address, int256, int256));\n        return bentoBox.withdraw(token, msg.sender, to, _num(amount, value1, value2), _num(share, value1, value2));\n    }\n\n    /// @dev Helper function to perform a contract call and eventually extracting revert messages on failure.\n    /// Calls to `bentoBox` are not allowed for obvious security reasons.\n    /// This also means that calls made from this contract shall *not* be trusted.\n    function _call(\n        uint256 value,\n        bytes memory data,\n        uint256 value1,\n        uint256 value2\n    ) internal returns (bytes memory, uint8) {\n        (address callee, bytes memory callData, bool useValue1, bool useValue2, uint8 returnValues) =\n            abi.decode(data, (address, bytes, bool, bool, uint8));\n\n        if (useValue1 && !useValue2) {\n            callData = abi.encodePacked(callData, value1);\n        } else if (!useValue1 && useValue2) {\n            callData = abi.encodePacked(callData, value2);\n        } else if (useValue1 && useValue2) {\n            callData = abi.encodePacked(callData, value1, value2);\n        }\n\n        require(!blacklistedCallees[callee], \"Cauldron: can't call\");\n\n        (bool success, bytes memory returnData) = callee.call{value: value}(callData);\n        require(success, \"Cauldron: call failed\");\n        return (returnData, returnValues);\n    }\n\n    struct CookStatus {\n        bool needsSolvencyCheck;\n        bool hasAccrued;\n    }\n\n    function _additionalCookAction(uint8 action, CookStatus memory, uint256 value, bytes memory data, uint256 value1, uint256 value2) internal virtual returns (bytes memory, uint8, CookStatus memory) {}\n\n    /// @notice Executes a set of actions and allows composability (contract calls) to other contracts.\n    /// @param actions An array with a sequence of actions to execute (see ACTION_ declarations).\n    /// @param values A one-to-one mapped array to `actions`. ETH amounts to send along with the actions.\n    /// Only applicable to `ACTION_CALL`, `ACTION_BENTO_DEPOSIT`.\n    /// @param datas A one-to-one mapped array to `actions`. Contains abi encoded data of function arguments.\n    /// @return value1 May contain the first positioned return value of the last executed action (if applicable).\n    /// @return value2 May contain the second positioned return value of the last executed action which returns 2 values (if applicable).\n    function cook(\n        uint8[] calldata actions,\n        uint256[] calldata values,\n        bytes[] calldata datas\n    ) external payable returns (uint256 value1, uint256 value2) {\n        CookStatus memory status;\n\n        for (uint256 i = 0; i < actions.length; i++) {\n            uint8 action = actions[i];\n            if (!status.hasAccrued && action < 10) {\n                accrue();\n                status.hasAccrued = true;\n            }\n            if (action == ACTION_ADD_COLLATERAL) {\n                (int256 share, address to, bool skim) = abi.decode(datas[i], (int256, address, bool));\n                addCollateral(to, skim, _num(share, value1, value2));\n            } else if (action == ACTION_REPAY) {\n                (int256 part, address to, bool skim) = abi.decode(datas[i], (int256, address, bool));\n                _repay(to, skim, _num(part, value1, value2));\n            } else if (action == ACTION_REMOVE_COLLATERAL) {\n                (int256 share, address to) = abi.decode(datas[i], (int256, address));\n                _removeCollateral(to, _num(share, value1, value2));\n                status.needsSolvencyCheck = true;\n            } else if (action == ACTION_BORROW) {\n                (int256 amount, address to) = abi.decode(datas[i], (int256, address));\n                (value1, value2) = _borrow(to, _num(amount, value1, value2));\n                status.needsSolvencyCheck = true;\n            } else if (action == ACTION_UPDATE_EXCHANGE_RATE) {\n                (bool must_update, uint256 minRate, uint256 maxRate) = abi.decode(datas[i], (bool, uint256, uint256));\n                (bool updated, uint256 rate) = updateExchangeRate();\n                require((!must_update || updated) && rate > minRate && (maxRate == 0 || rate < maxRate), \"Cauldron: rate not ok\");\n            } else if (action == ACTION_BENTO_SETAPPROVAL) {\n                (address user, address _masterContract, bool approved, uint8 v, bytes32 r, bytes32 s) =\n                    abi.decode(datas[i], (address, address, bool, uint8, bytes32, bytes32));\n                bentoBox.setMasterContractApproval(user, _masterContract, approved, v, r, s);\n            } else if (action == ACTION_BENTO_DEPOSIT) {\n                (value1, value2) = _bentoDeposit(datas[i], values[i], value1, value2);\n            } else if (action == ACTION_BENTO_WITHDRAW) {\n                (value1, value2) = _bentoWithdraw(datas[i], value1, value2);\n            } else if (action == ACTION_BENTO_TRANSFER) {\n                (IERC20 token, address to, int256 share) = abi.decode(datas[i], (IERC20, address, int256));\n                bentoBox.transfer(token, msg.sender, to, _num(share, value1, value2));\n            } else if (action == ACTION_BENTO_TRANSFER_MULTIPLE) {\n                (IERC20 token, address[] memory tos, uint256[] memory shares) = abi.decode(datas[i], (IERC20, address[], uint256[]));\n                bentoBox.transferMultiple(token, msg.sender, tos, shares);\n            } else if (action == ACTION_CALL) {\n                (bytes memory returnData, uint8 returnValues) = _call(values[i], datas[i], value1, value2);\n\n                if (returnValues == 1) {\n                    (value1) = abi.decode(returnData, (uint256));\n                } else if (returnValues == 2) {\n                    (value1, value2) = abi.decode(returnData, (uint256, uint256));\n                }\n            } else if (action == ACTION_GET_REPAY_SHARE) {\n                int256 part = abi.decode(datas[i], (int256));\n                value1 = bentoBox.toShare(magicInternetMoney, totalBorrow.toElastic(_num(part, value1, value2), true), true);\n            } else if (action == ACTION_GET_REPAY_PART) {\n                int256 amount = abi.decode(datas[i], (int256));\n                value1 = totalBorrow.toBase(_num(amount, value1, value2), false);\n            } else if (action == ACTION_LIQUIDATE) {\n                _cookActionLiquidate(datas[i]);\n            } else {\n                (bytes memory returnData, uint8 returnValues, CookStatus memory returnStatus) = _additionalCookAction(action, status, values[i], datas[i], value1, value2);\n                status = returnStatus;\n                \n                if (returnValues == 1) {\n                    (value1) = abi.decode(returnData, (uint256));\n                } else if (returnValues == 2) {\n                    (value1, value2) = abi.decode(returnData, (uint256, uint256));\n                }\n            }\n        }\n\n        if (status.needsSolvencyCheck) {\n            (, uint256 _exchangeRate) = updateExchangeRate();\n            require(_isSolvent(msg.sender, _exchangeRate), \"Cauldron: user insolvent\");\n        }\n    }\n\n    function _cookActionLiquidate(bytes calldata data) internal {\n         (address[] memory users, uint256[] memory maxBorrowParts, address to, ISwapperV2 swapper, bytes memory swapperData) = abi.decode(data, (address[], uint256[], address, ISwapperV2, bytes));\n        liquidate(users, maxBorrowParts, to, swapper, swapperData);\n    }\n\n    function _beforeUsersLiquidated(address[] memory users, uint256[] memory maxBorrowPart) internal virtual {}\n\n    function _beforeUserLiquidated(address user, uint256 borrowPart, uint256 borrowAmount, uint256 collateralShare) internal virtual {}\n\n    function _afterUserLiquidated(address user, uint256 collateralShare) internal virtual {}\n\n    /// @notice Handles the liquidation of users' balances, once the users' amount of collateral is too low.\n    /// @param users An array of user addresses.\n    /// @param maxBorrowParts A one-to-one mapping to `users`, contains maximum (partial) borrow amounts (to liquidate) of the respective user.\n    /// @param to Address of the receiver in open liquidations if `swapper` is zero.\n    function liquidate(\n        address[] memory users,\n        uint256[] memory maxBorrowParts,\n        address to,\n        ISwapperV2 swapper,\n        bytes memory swapperData\n    ) public virtual {\n        // Oracle can fail but we still need to allow liquidations\n        (, uint256 _exchangeRate) = updateExchangeRate();\n        accrue();\n\n        uint256 allCollateralShare;\n        uint256 allBorrowAmount;\n        uint256 allBorrowPart;\n        Rebase memory bentoBoxTotals = bentoBox.totals(collateral);\n        _beforeUsersLiquidated(users, maxBorrowParts);\n\n        for (uint256 i = 0; i < users.length; i++) {\n            address user = users[i];\n            if (!_isSolvent(user, _exchangeRate)) {\n                uint256 borrowPart;\n                uint256 availableBorrowPart = userBorrowPart[user];\n                borrowPart = maxBorrowParts[i] > availableBorrowPart ? availableBorrowPart : maxBorrowParts[i];\n\n                uint256 borrowAmount = totalBorrow.toElastic(borrowPart, false);\n                uint256 collateralShare =\n                    bentoBoxTotals.toBase(\n                        borrowAmount.mul(LIQUIDATION_MULTIPLIER).mul(_exchangeRate) /\n                            (LIQUIDATION_MULTIPLIER_PRECISION * EXCHANGE_RATE_PRECISION),\n                        false\n                    );\n\n                _beforeUserLiquidated(user, borrowPart, borrowAmount, collateralShare);\n                userBorrowPart[user] = availableBorrowPart.sub(borrowPart);\n                userCollateralShare[user] = userCollateralShare[user].sub(collateralShare);\n                _afterUserLiquidated(user, collateralShare);\n\n                emit LogRemoveCollateral(user, to, collateralShare);\n                emit LogRepay(msg.sender, user, borrowAmount, borrowPart);\n                emit LogLiquidation(msg.sender, user, to, collateralShare, borrowAmount, borrowPart);\n\n                // Keep totals\n                allCollateralShare = allCollateralShare.add(collateralShare);\n                allBorrowAmount = allBorrowAmount.add(borrowAmount);\n                allBorrowPart = allBorrowPart.add(borrowPart);\n            }\n        }\n        require(allBorrowAmount != 0, \"Cauldron: all are solvent\");\n        totalBorrow.elastic = totalBorrow.elastic.sub(allBorrowAmount.to128());\n        totalBorrow.base = totalBorrow.base.sub(allBorrowPart.to128());\n        totalCollateralShare = totalCollateralShare.sub(allCollateralShare);\n\n        // Apply a percentual fee share to sSpell holders\n        \n        {\n            uint256 distributionAmount = (allBorrowAmount.mul(LIQUIDATION_MULTIPLIER) / LIQUIDATION_MULTIPLIER_PRECISION).sub(allBorrowAmount).mul(DISTRIBUTION_PART) / DISTRIBUTION_PRECISION; // Distribution Amount\n            allBorrowAmount = allBorrowAmount.add(distributionAmount);\n            accrueInfo.feesEarned = accrueInfo.feesEarned.add(distributionAmount.to128());\n        }\n\n        uint256 allBorrowShare = bentoBox.toShare(magicInternetMoney, allBorrowAmount, true);\n\n        // Swap using a swapper freely chosen by the caller\n        // Open (flash) liquidation: get proceeds first and provide the borrow after\n        bentoBox.transfer(collateral, address(this), to, allCollateralShare);\n        if (swapper != ISwapperV2(address(0))) {\n            swapper.swap(address(collateral), address(magicInternetMoney), msg.sender, allBorrowShare, allCollateralShare, swapperData);\n        }\n\n        allBorrowShare = bentoBox.toShare(magicInternetMoney, allBorrowAmount, true);\n        bentoBox.transfer(magicInternetMoney, msg.sender, address(this), allBorrowShare);\n    }\n\n    /// @notice Withdraws the fees accumulated.\n    function withdrawFees() public {\n        accrue();\n        address _feeTo = masterContract.feeTo();\n        uint256 _feesEarned = accrueInfo.feesEarned;\n        uint256 share = bentoBox.toShare(magicInternetMoney, _feesEarned, false);\n        bentoBox.transfer(magicInternetMoney, address(this), _feeTo, share);\n        accrueInfo.feesEarned = 0;\n\n        emit LogWithdrawFees(_feeTo, _feesEarned);\n    }\n\n    /// @notice Sets the beneficiary of interest accrued.\n    /// MasterContract Only Admin function.\n    /// @param newFeeTo The address of the receiver.\n    function setFeeTo(address newFeeTo) public onlyOwner {\n        feeTo = newFeeTo;\n        emit LogFeeTo(newFeeTo);\n    }\n\n    /// @notice reduces the supply of MIM\n    /// @param amount amount to reduce supply by\n    function reduceSupply(uint256 amount) public onlyMasterContractOwner {\n        uint256 maxAmount = bentoBox.toAmount(magicInternetMoney, bentoBox.balanceOf(magicInternetMoney, address(this)), false);\n        amount = maxAmount > amount ? amount : maxAmount;\n        bentoBox.withdraw(magicInternetMoney, address(this), msg.sender, amount, 0);\n    }\n\n    /// @notice allows to change the interest rate\n    /// @param newInterestRate new interest rate\n    function changeInterestRate(uint64 newInterestRate) public onlyMasterContractOwner {\n        accrue();\n        emit LogInterestChange(accrueInfo.INTEREST_PER_SECOND, newInterestRate);\n        accrueInfo.INTEREST_PER_SECOND = newInterestRate;\n    }\n\n    /// @notice allows to change the borrow limit\n    /// @param newBorrowLimit new borrow limit\n    /// @param perAddressPart new borrow limit per address\n    function changeBorrowLimit(uint128 newBorrowLimit, uint128 perAddressPart) public onlyMasterContractOwner {\n        borrowLimit = BorrowCap(newBorrowLimit, perAddressPart);\n        emit LogChangeBorrowLimit(newBorrowLimit, perAddressPart);\n    }\n\n    /// @notice allows to change blacklisted callees\n    /// @param callee callee to blacklist or not\n    /// @param blacklisted true when the callee cannot be used in call cook action\n    function setBlacklistedCallee(address callee, bool blacklisted) public onlyMasterContractOwner {\n        require(callee != address(bentoBox) && callee != address(this), \"invalid callee\");\n\n        blacklistedCallees[callee] = blacklisted;\n        emit LogChangeBlacklistedCallee(callee, blacklisted);\n    }\n\n    /// Allows to change the liquidation multiplier\n    /// @param _liquidationMultiplier new liquidation multiplier.\n    /// To convert from bips: liquidationFeeBips * 1e1 + 1e5\n    function setLiquidationMultiplier(uint256 _liquidationMultiplier) public onlyMasterContractOwner {\n        emit LogLiquidationMultiplierChanged(LIQUIDATION_MULTIPLIER, _liquidationMultiplier);\n        LIQUIDATION_MULTIPLIER = _liquidationMultiplier;\n    }\n\n    /// Allows to change the borrow opening fee\n    /// @param _borrowOpeningFee new borrow opening fee.\n    /// To convert from bips: borrowOpeningFeeBips * 1e1\n    function setBorrowOpeningFee(uint256 _borrowOpeningFee) public onlyMasterContractOwner {\n        emit LogBorrowOpeningFeeChanged(BORROW_OPENING_FEE, _borrowOpeningFee);\n        BORROW_OPENING_FEE = _borrowOpeningFee;\n    }\n\n    /// Allows to change the collateralization rate\n    /// @param _collateralizationRate new collateralization rate.\n    /// To convert from bips: collateralizationRateBips * 1e1\n    function setCollateralizationRate(uint256 _collateralizationRate) public onlyMasterContractOwner {\n        emit LogCollateralizationRateChanged(COLLATERIZATION_RATE, _collateralizationRate);\n        COLLATERIZATION_RATE = _collateralizationRate;\n    }\n}\n"
      },
      "lib/solmate/src/auth/Owned.sol": {
        "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\n/// @notice Simple single owner authorization mixin.\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/auth/Owned.sol)\nabstract contract Owned {\n    /*//////////////////////////////////////////////////////////////\n                                 EVENTS\n    //////////////////////////////////////////////////////////////*/\n\n    event OwnershipTransferred(address indexed user, address indexed newOwner);\n\n    /*//////////////////////////////////////////////////////////////\n                            OWNERSHIP STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    address public owner;\n\n    modifier onlyOwner() virtual {\n        require(msg.sender == owner, \"UNAUTHORIZED\");\n\n        _;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                               CONSTRUCTOR\n    //////////////////////////////////////////////////////////////*/\n\n    constructor(address _owner) {\n        owner = _owner;\n\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                             OWNERSHIP LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        owner = newOwner;\n\n        emit OwnershipTransferred(msg.sender, newOwner);\n    }\n}\n"
      },
      "lib/BoringSolidity/contracts/interfaces/IERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IERC20 {\n    // transfer and tranferFrom have been removed, because they don't work on all tokens (some aren't ERC20 complaint).\n    // By removing them you can't accidentally use them.\n    // name, symbol and decimals have been removed, because they are optional and sometimes wrongly implemented (MKR).\n    // Use BoringERC20 with `using BoringERC20 for IERC20` and call `safeTransfer`, `safeTransferFrom`, etc instead.\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /// @notice EIP 2612\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n}\n\ninterface IStrictERC20 {\n    // This is the strict ERC20 interface. Don't use this, certainly not if you don't control the ERC20 token you're calling.\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address _owner) external view returns (uint256 balance);\n    function transfer(address _to, uint256 _value) external returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\n    function approve(address _spender, uint256 _value) external returns (bool success);\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /// @notice EIP 2612\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n}\n"
      },
      "lib/BoringSolidity/contracts/interfaces/IMasterContract.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IMasterContract {\n    /// @notice Init function that gets called from `BoringFactory.deploy`.\n    /// Also kown as the constructor for cloned contracts.\n    /// Any ETH send to `BoringFactory.deploy` ends up here.\n    /// @param data Can be abi encoded arguments or anything else.\n    function init(bytes calldata data) external payable;\n}\n"
      },
      "lib/BoringSolidity/contracts/libraries/BoringRebase.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport {BoringMath, BoringMath128} from \"./BoringMath.sol\";\n\nstruct Rebase {\n    uint128 elastic;\n    uint128 base;\n}\n\n/// @notice A rebasing library using overflow-/underflow-safe math.\nlibrary RebaseLibrary {\n    using BoringMath for uint256;\n    using BoringMath128 for uint128;\n\n    /// @notice Calculates the base value in relationship to `elastic` and `total`.\n    function toBase(\n        Rebase memory total,\n        uint256 elastic,\n        bool roundUp\n    ) internal pure returns (uint256 base) {\n        if (total.elastic == 0) {\n            base = elastic;\n        } else {\n            base = (elastic * total.base) / total.elastic;\n            if (roundUp && (base * total.elastic) / total.base < elastic) {\n                base++;\n            }\n        }\n    }\n\n    /// @notice Calculates the elastic value in relationship to `base` and `total`.\n    function toElastic(\n        Rebase memory total,\n        uint256 base,\n        bool roundUp\n    ) internal pure returns (uint256 elastic) {\n        if (total.base == 0) {\n            elastic = base;\n        } else {\n            elastic = (base * total.elastic) / total.base;\n            if (roundUp && (elastic * total.base) / total.elastic < base) {\n                elastic++;\n            }\n        }\n    }\n\n    /// @notice Add `elastic` to `total` and doubles `total.base`.\n    /// @return (Rebase) The new total.\n    /// @return base in relationship to `elastic`.\n    function add(\n        Rebase memory total,\n        uint256 elastic,\n        bool roundUp\n    ) internal pure returns (Rebase memory, uint256 base) {\n        base = toBase(total, elastic, roundUp);\n        total.elastic += elastic.to128();\n        total.base += base.to128();\n        return (total, base);\n    }\n\n    /// @notice Sub `base` from `total` and update `total.elastic`.\n    /// @return (Rebase) The new total.\n    /// @return elastic in relationship to `base`.\n    function sub(\n        Rebase memory total,\n        uint256 base,\n        bool roundUp\n    ) internal pure returns (Rebase memory, uint256 elastic) {\n        elastic = toElastic(total, base, roundUp);\n        total.elastic -= elastic.to128();\n        total.base -= base.to128();\n        return (total, elastic);\n    }\n\n    /// @notice Add `elastic` and `base` to `total`.\n    function add(\n        Rebase memory total,\n        uint256 elastic,\n        uint256 base\n    ) internal pure returns (Rebase memory) {\n        total.elastic += elastic.to128();\n        total.base += base.to128();\n        return total;\n    }\n\n    /// @notice Subtract `elastic` and `base` to `total`.\n    function sub(\n        Rebase memory total,\n        uint256 elastic,\n        uint256 base\n    ) internal pure returns (Rebase memory) {\n        total.elastic -= elastic.to128();\n        total.base -= base.to128();\n        return total;\n    }\n\n    /// @notice Add `elastic` to `total` and update storage.\n    /// @return newElastic Returns updated `elastic`.\n    function addElastic(Rebase storage total, uint256 elastic) internal returns (uint256 newElastic) {\n        newElastic = total.elastic += elastic.to128();\n    }\n\n    /// @notice Subtract `elastic` from `total` and update storage.\n    /// @return newElastic Returns updated `elastic`.\n    function subElastic(Rebase storage total, uint256 elastic) internal returns (uint256 newElastic) {\n        newElastic = total.elastic -= elastic.to128();\n    }\n}\n"
      },
      "lib/BoringSolidity/contracts/libraries/BoringMath.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\nlibrary BoringMath {\n    error ErrOverflow();\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    function to32(uint256 a) internal pure returns (uint32) {\n        if (a > type(uint32).max) {\n            revert ErrOverflow();\n        }\n        return uint32(a);\n    }\n\n    function to40(uint256 a) internal pure returns (uint40) {\n        if (a > type(uint40).max) {\n            revert ErrOverflow();\n        }\n        return uint40(a);\n    }\n\n    function to64(uint256 a) internal pure returns (uint64) {\n        if (a > type(uint64).max) {\n            revert ErrOverflow();\n        }\n        return uint64(a);\n    }\n\n    function to112(uint256 a) internal pure returns (uint112) {\n        if (a > type(uint112).max) {\n            revert ErrOverflow();\n        }\n        return uint112(a);\n    }\n\n    function to128(uint256 a) internal pure returns (uint128) {\n        if (a > type(uint128).max) {\n            revert ErrOverflow();\n        }\n        return uint128(a);\n    }\n\n    function to208(uint256 a) internal pure returns (uint208) {\n        if (a > type(uint208).max) {\n            revert ErrOverflow();\n        }\n        return uint208(a);\n    }\n\n    function to216(uint256 a) internal pure returns (uint216) {\n        if (a > type(uint216).max) {\n            revert ErrOverflow();\n        }\n        return uint216(a);\n    }\n\n    function to224(uint256 a) internal pure returns (uint224) {\n        if (a > type(uint224).max) {\n            revert ErrOverflow();\n        }\n        return uint224(a);\n    }\n}\n\nlibrary BoringMath32 {\n    function add(uint32 a, uint32 b) internal pure returns (uint32) {\n        return a + b;\n    }\n\n    function sub(uint32 a, uint32 b) internal pure returns (uint32) {\n        return a - b;\n    }\n\n    function mul(uint32 a, uint32 b) internal pure returns (uint32) {\n        return a * b;\n    }\n\n    function div(uint32 a, uint32 b) internal pure returns (uint32) {\n        return a / b;\n    }\n}\n\nlibrary BoringMath64 {\n    function add(uint64 a, uint64 b) internal pure returns (uint64) {\n        return a + b;\n    }\n\n    function sub(uint64 a, uint64 b) internal pure returns (uint64) {\n        return a - b;\n    }\n\n    function mul(uint64 a, uint64 b) internal pure returns (uint64) {\n        return a * b;\n    }\n\n    function div(uint64 a, uint64 b) internal pure returns (uint64) {\n        return a / b;\n    }\n}\n\nlibrary BoringMath112 {\n    function add(uint112 a, uint112 b) internal pure returns (uint112) {\n        return a + b;\n    }\n\n    function sub(uint112 a, uint112 b) internal pure returns (uint112) {\n        return a - b;\n    }\n\n    function mul(uint112 a, uint112 b) internal pure returns (uint112) {\n        return a * b;\n    }\n\n    function div(uint112 a, uint112 b) internal pure returns (uint112) {\n        return a / b;\n    }\n}\n\nlibrary BoringMath128 {\n    function add(uint128 a, uint128 b) internal pure returns (uint128) {\n        return a + b;\n    }\n\n    function sub(uint128 a, uint128 b) internal pure returns (uint128) {\n        return a - b;\n    }\n\n    function mul(uint128 a, uint128 b) internal pure returns (uint128) {\n        return a * b;\n    }\n\n    function div(uint128 a, uint128 b) internal pure returns (uint128) {\n        return a / b;\n    }\n}\n\nlibrary BoringMath224 {\n    function add(uint224 a, uint224 b) internal pure returns (uint224) {\n        return a + b;\n    }\n\n    function sub(uint224 a, uint224 b) internal pure returns (uint224) {\n        return a - b;\n    }\n\n    function mul(uint224 a, uint224 b) internal pure returns (uint224) {\n        return a * b;\n    }\n\n    function div(uint224 a, uint224 b) internal pure returns (uint224) {\n        return a / b;\n    }\n}\n"
      },
      "src/interfaces/IOracle.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\ninterface IOracle {\n    function decimals() external view returns (uint8);\n\n    function get(bytes calldata data) external returns (bool success, uint256 rate);\n\n    function peek(bytes calldata data) external view returns (bool success, uint256 rate);\n\n    function peekSpot(bytes calldata data) external view returns (uint256 rate);\n\n    function symbol(bytes calldata data) external view returns (string memory);\n\n    function name(bytes calldata data) external view returns (string memory);\n}\n"
      },
      "src/interfaces/ISwapperV2.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\ninterface ISwapperV2 {\n    function swap(\n        address fromToken,\n        address toToken,\n        address recipient,\n        uint256 shareToMin,\n        uint256 shareFrom,\n        bytes calldata data\n    ) external returns (uint256 extraShare, uint256 shareReturned);\n}\n"
      },
      "src/interfaces/IBentoBoxV1.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\nimport {IERC20} from \"@BoringSolidity/interfaces/IERC20.sol\";\nimport {Rebase} from \"@BoringSolidity/libraries/BoringRebase.sol\";\nimport {IStrategy} from \"/interfaces/IStrategy.sol\";\n\ninterface IFlashBorrower {\n    /// @notice The flashloan callback. `amount` + `fee` needs to repayed to msg.sender before this call returns.\n    /// @param sender The address of the invoker of this flashloan.\n    /// @param token The address of the token that is loaned.\n    /// @param amount of the `token` that is loaned.\n    /// @param fee The fee that needs to be paid on top for this loan. Needs to be the same as `token`.\n    /// @param data Additional data that was passed to the flashloan function.\n    function onFlashLoan(\n        address sender,\n        IERC20 token,\n        uint256 amount,\n        uint256 fee,\n        bytes calldata data\n    ) external;\n}\n\ninterface IBatchFlashBorrower {\n    /// @notice The callback for batched flashloans. Every amount + fee needs to repayed to msg.sender before this call returns.\n    /// @param sender The address of the invoker of this flashloan.\n    /// @param tokens Array of addresses for ERC-20 tokens that is loaned.\n    /// @param amounts A one-to-one map to `tokens` that is loaned.\n    /// @param fees A one-to-one map to `tokens` that needs to be paid on top for each loan. Needs to be the same token.\n    /// @param data Additional data that was passed to the flashloan function.\n    function onBatchFlashLoan(\n        address sender,\n        IERC20[] calldata tokens,\n        uint256[] calldata amounts,\n        uint256[] calldata fees,\n        bytes calldata data\n    ) external;\n}\n\ninterface IBentoBoxV1 {\n    function balanceOf(IERC20, address) external view returns (uint256);\n\n    function batch(bytes[] calldata calls, bool revertOnFail) external payable returns (bool[] memory successes, bytes[] memory results);\n\n    function batchFlashLoan(\n        IBatchFlashBorrower borrower,\n        address[] calldata receivers,\n        IERC20[] calldata tokens,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n\n    function claimOwnership() external;\n\n    function flashLoan(\n        IFlashBorrower borrower,\n        address receiver,\n        IERC20 token,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    function deploy(\n        address masterContract,\n        bytes calldata data,\n        bool useCreate2\n    ) external payable returns (address);\n\n    function deposit(\n        IERC20 token_,\n        address from,\n        address to,\n        uint256 amount,\n        uint256 share\n    ) external payable returns (uint256 amountOut, uint256 shareOut);\n\n    function harvest(\n        IERC20 token,\n        bool balance,\n        uint256 maxChangeAmount\n    ) external;\n\n    function masterContractApproved(address, address) external view returns (bool);\n\n    function masterContractOf(address) external view returns (address);\n\n    function nonces(address) external view returns (uint256);\n\n    function owner() external view returns (address);\n\n    function pendingOwner() external view returns (address);\n\n    function pendingStrategy(IERC20) external view returns (IStrategy);\n\n    function permitToken(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 amount,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    function registerProtocol() external;\n\n    function setMasterContractApproval(\n        address user,\n        address masterContract,\n        bool approved,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    function setStrategy(IERC20 token, IStrategy newStrategy) external;\n\n    function setStrategyTargetPercentage(IERC20 token, uint64 targetPercentage_) external;\n\n    function strategy(IERC20) external view returns (IStrategy);\n\n    function strategyData(IERC20)\n        external\n        view\n        returns (\n            uint64 strategyStartDate,\n            uint64 targetPercentage,\n            uint128 balance\n        );\n\n    function toAmount(\n        IERC20 token,\n        uint256 share,\n        bool roundUp\n    ) external view returns (uint256 amount);\n\n    function toShare(\n        IERC20 token,\n        uint256 amount,\n        bool roundUp\n    ) external view returns (uint256 share);\n\n    function totals(IERC20) external view returns (Rebase memory totals_);\n\n    function transfer(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 share\n    ) external;\n\n    function transferMultiple(\n        IERC20 token,\n        address from,\n        address[] calldata tos,\n        uint256[] calldata shares\n    ) external;\n\n    function transferOwnership(\n        address newOwner,\n        bool direct,\n        bool renounce\n    ) external;\n\n    function whitelistMasterContract(address masterContract, bool approved) external;\n\n    function whitelistedMasterContracts(address) external view returns (bool);\n\n    function withdraw(\n        IERC20 token_,\n        address from,\n        address to,\n        uint256 amount,\n        uint256 share\n    ) external returns (uint256 amountOut, uint256 shareOut);\n}\n"
      },
      "src/interfaces/IStrategy.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\ninterface IStrategy {\n    function skim(uint256 amount) external;\n\n    function harvest(uint256 balance, address sender) external returns (int256 amountAdded);\n\n    function withdraw(uint256 amount) external returns (uint256 actualAmount);\n\n    function exit(uint256 balance) external returns (int256 amountAdded);\n}\n"
      }
    },
    "settings": {
      "remappings": [
        "/=src/",
        "forge-std/=lib/forge-std/src/",
        "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
        "@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
        "@BoringSolidity/=lib/BoringSolidity/contracts/",
        "@solady/=lib/solady/src/",
        "@solmate/=lib/solmate/src/",
        "@excessivelySafeCall/=lib/ExcessivelySafeCall/src/",
        "@safe-contracts/=lib/safe-contracts/contracts/",
        "@fuzzlib/=lib/fuzzlib/src/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 400
      },
      "metadata": {
        "useLiteralContent": false,
        "bytecodeHash": "ipfs",
        "appendCBOR": true
      },
      "outputSelection": {
        "*": {
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "evmVersion": "shanghai",
      "viaIR": false,
      "libraries": {}
    }
  },
  "compiler": "0.8.26+commit.8a97fa7a"
}