{
  "address": "0x4d526F103307b548227f502655f7B80796B64F52",
  "abi": [
    {
      "type": "function",
      "name": "availableSkim",
      "inputs": [
        {
          "name": "cauldron",
          "type": "address",
          "internalType": "contract ICauldronV2"
        }
      ],
      "outputs": [
        {
          "name": "share",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "availableSkim",
      "inputs": [],
      "outputs": [
        {
          "name": "share",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getBorrowFee",
      "inputs": [
        {
          "name": "cauldron",
          "type": "address",
          "internalType": "contract ICauldronV2"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getCollateralPrice",
      "inputs": [
        {
          "name": "cauldron",
          "type": "address",
          "internalType": "contract ICauldronV2"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getHealthFactor",
      "inputs": [
        {
          "name": "cauldron",
          "type": "address",
          "internalType": "contract ICauldronV2"
        },
        {
          "name": "account",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "isStable",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getInterestPerYear",
      "inputs": [
        {
          "name": "cauldron",
          "type": "address",
          "internalType": "contract ICauldronV2"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "uint64",
          "internalType": "uint64"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getLiquidationFee",
      "inputs": [
        {
          "name": "cauldron",
          "type": "address",
          "internalType": "contract ICauldronV2"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getMarketInfoCauldronV2",
      "inputs": [
        {
          "name": "cauldron",
          "type": "address",
          "internalType": "contract ICauldronV2"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "tuple",
          "internalType": "struct MarketLens.MarketInfo",
          "components": [
            {
              "name": "cauldron",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "borrowFee",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "maximumCollateralRatio",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "liquidationFee",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "interestPerYear",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "marketMaxBorrow",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "userMaxBorrow",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "totalBorrowed",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "oracleExchangeRate",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "collateralPrice",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "totalCollateral",
              "type": "tuple",
              "internalType": "struct MarketLens.AmountValue",
              "components": [
                {
                  "name": "amount",
                  "type": "uint256",
                  "internalType": "uint256"
                },
                {
                  "name": "value",
                  "type": "uint256",
                  "internalType": "uint256"
                }
              ]
            }
          ]
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getMarketInfoCauldronV2Pyth",
      "inputs": [
        {
          "name": "cauldron",
          "type": "address",
          "internalType": "contract ICauldronV2"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "tuple",
          "internalType": "struct MarketLens.MarketInfoPyth",
          "components": [
            {
              "name": "cauldron",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "borrowFee",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "maximumCollateralRatio",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "liquidationFee",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "interestPerYear",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "marketMaxBorrow",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "userMaxBorrow",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "totalBorrowed",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "totalCollateral",
              "type": "tuple",
              "internalType": "struct MarketLens.Amount",
              "components": [
                {
                  "name": "amount",
                  "type": "uint256",
                  "internalType": "uint256"
                }
              ]
            }
          ]
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getMarketInfoCauldronV3",
      "inputs": [
        {
          "name": "cauldron",
          "type": "address",
          "internalType": "contract ICauldronV3"
        }
      ],
      "outputs": [
        {
          "name": "marketInfo",
          "type": "tuple",
          "internalType": "struct MarketLens.MarketInfo",
          "components": [
            {
              "name": "cauldron",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "borrowFee",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "maximumCollateralRatio",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "liquidationFee",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "interestPerYear",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "marketMaxBorrow",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "userMaxBorrow",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "totalBorrowed",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "oracleExchangeRate",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "collateralPrice",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "totalCollateral",
              "type": "tuple",
              "internalType": "struct MarketLens.AmountValue",
              "components": [
                {
                  "name": "amount",
                  "type": "uint256",
                  "internalType": "uint256"
                },
                {
                  "name": "value",
                  "type": "uint256",
                  "internalType": "uint256"
                }
              ]
            }
          ]
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getMarketInfoCauldronV3Pyth",
      "inputs": [
        {
          "name": "cauldron",
          "type": "address",
          "internalType": "contract ICauldronV3"
        }
      ],
      "outputs": [
        {
          "name": "marketInfo",
          "type": "tuple",
          "internalType": "struct MarketLens.MarketInfoPyth",
          "components": [
            {
              "name": "cauldron",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "borrowFee",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "maximumCollateralRatio",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "liquidationFee",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "interestPerYear",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "marketMaxBorrow",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "userMaxBorrow",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "totalBorrowed",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "totalCollateral",
              "type": "tuple",
              "internalType": "struct MarketLens.Amount",
              "components": [
                {
                  "name": "amount",
                  "type": "uint256",
                  "internalType": "uint256"
                }
              ]
            }
          ]
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getMaxMarketBorrowForCauldronV2",
      "inputs": [
        {
          "name": "cauldron",
          "type": "address",
          "internalType": "contract ICauldronV2"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getMaxMarketBorrowForCauldronV3",
      "inputs": [
        {
          "name": "cauldron",
          "type": "address",
          "internalType": "contract ICauldronV3"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getMaxUserBorrowForCauldronV2",
      "inputs": [
        {
          "name": "cauldron",
          "type": "address",
          "internalType": "contract ICauldronV2"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getMaxUserBorrowForCauldronV3",
      "inputs": [
        {
          "name": "cauldron",
          "type": "address",
          "internalType": "contract ICauldronV3"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getMaximumCollateralRatio",
      "inputs": [
        {
          "name": "cauldron",
          "type": "address",
          "internalType": "contract ICauldronV2"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getOracleExchangeRate",
      "inputs": [
        {
          "name": "cauldron",
          "type": "address",
          "internalType": "contract ICauldronV2"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getTokenInBentoBox",
      "inputs": [
        {
          "name": "bentoBox",
          "type": "address",
          "internalType": "contract IBentoBoxV1"
        },
        {
          "name": "token",
          "type": "address",
          "internalType": "contract IERC20"
        },
        {
          "name": "account",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "share",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "amount",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getTotalBorrowed",
      "inputs": [
        {
          "name": "cauldron",
          "type": "address",
          "internalType": "contract ICauldronV2"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getTotalCollateral",
      "inputs": [
        {
          "name": "cauldron",
          "type": "address",
          "internalType": "contract ICauldronV2"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "tuple",
          "internalType": "struct MarketLens.AmountValue",
          "components": [
            {
              "name": "amount",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "value",
              "type": "uint256",
              "internalType": "uint256"
            }
          ]
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getTotalCollateralAmount",
      "inputs": [
        {
          "name": "cauldron",
          "type": "address",
          "internalType": "contract ICauldronV2"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "tuple",
          "internalType": "struct MarketLens.Amount",
          "components": [
            {
              "name": "amount",
              "type": "uint256",
              "internalType": "uint256"
            }
          ]
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getUserBorrow",
      "inputs": [
        {
          "name": "cauldron",
          "type": "address",
          "internalType": "contract ICauldronV2"
        },
        {
          "name": "account",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getUserCollateral",
      "inputs": [
        {
          "name": "cauldron",
          "type": "address",
          "internalType": "contract ICauldronV2"
        },
        {
          "name": "account",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "tuple",
          "internalType": "struct MarketLens.AmountValue",
          "components": [
            {
              "name": "amount",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "value",
              "type": "uint256",
              "internalType": "uint256"
            }
          ]
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getUserLiquidationPrice",
      "inputs": [
        {
          "name": "cauldron",
          "type": "address",
          "internalType": "contract ICauldronV2"
        },
        {
          "name": "account",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "liquidationPrice",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getUserLtv",
      "inputs": [
        {
          "name": "cauldron",
          "type": "address",
          "internalType": "contract ICauldronV2"
        },
        {
          "name": "account",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "ltvBps",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getUserMaxBorrow",
      "inputs": [
        {
          "name": "cauldron",
          "type": "address",
          "internalType": "contract ICauldronV2"
        },
        {
          "name": "account",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getUserPosition",
      "inputs": [
        {
          "name": "cauldron",
          "type": "address",
          "internalType": "contract ICauldronV2"
        },
        {
          "name": "account",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "tuple",
          "internalType": "struct MarketLens.UserPosition",
          "components": [
            {
              "name": "cauldron",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "account",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "ltvBps",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "healthFactor",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "borrowValue",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "collateral",
              "type": "tuple",
              "internalType": "struct MarketLens.AmountValue",
              "components": [
                {
                  "name": "amount",
                  "type": "uint256",
                  "internalType": "uint256"
                },
                {
                  "name": "value",
                  "type": "uint256",
                  "internalType": "uint256"
                }
              ]
            },
            {
              "name": "liquidationPrice",
              "type": "uint256",
              "internalType": "uint256"
            }
          ]
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getUserPositions",
      "inputs": [
        {
          "name": "cauldron",
          "type": "address",
          "internalType": "contract ICauldronV2"
        },
        {
          "name": "accounts",
          "type": "address[]",
          "internalType": "address[]"
        }
      ],
      "outputs": [
        {
          "name": "positions",
          "type": "tuple[]",
          "internalType": "struct MarketLens.UserPosition[]",
          "components": [
            {
              "name": "cauldron",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "account",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "ltvBps",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "healthFactor",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "borrowValue",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "collateral",
              "type": "tuple",
              "internalType": "struct MarketLens.AmountValue",
              "components": [
                {
                  "name": "amount",
                  "type": "uint256",
                  "internalType": "uint256"
                },
                {
                  "name": "value",
                  "type": "uint256",
                  "internalType": "uint256"
                }
              ]
            },
            {
              "name": "liquidationPrice",
              "type": "uint256",
              "internalType": "uint256"
            }
          ]
        }
      ],
      "stateMutability": "view"
    }
  ],
  "bytecode": "0x6080604052348015600e575f5ffd5b506125e08061001c5f395ff3fe608060405234801561000f575f5ffd5b50600436106101bb575f3560e01c806392a576e6116100f3578063cdb5964411610093578063d96309931161006e578063d963099314610441578063dc6f1caa14610454578063ee3b1eb91461047c578063f79a987a1461049c575f5ffd5b8063cdb5964414610413578063d1a840df14610426578063d33a24911461042e575f5ffd5b8063a55e8668116100ce578063a55e8668146103cd578063bbd1b0281461033b578063c1cd378f146103e0578063cbf97e3814610400575f5ffd5b806392a576e6146103875780639406aea1146103a7578063945ebb91146103ba575f5ffd5b806360a98b801161015e57806366e3a4541161013957806366e3a4541461033b57806373d045601461034e578063842126351461036157806387426a8414610374575f5ffd5b806360a98b80146102f557806361acf8d51461031557806364f6ea9114610328575f5ffd5b806341ae8f831161019957806341ae8f831461022457806342d3fd08146102ad57806351a40994146102c057806354821c21146102d3575f5ffd5b80631e713a37146101bf5780633548ada0146101e5578063397938dd14610211575b5f5ffd5b6101d26101cd366004611e9b565b6104af565b6040519081526020015b60405180910390f35b6101f86101f3366004611ed2565b6104c7565b60405167ffffffffffffffff90911681526020016101dc565b6101d261021f366004611eed565b61053d565b610237610232366004611ed2565b61056f565b6040516101dc91905f610120820190506001600160a01b0383511682526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e08301526101008301515161010083015292915050565b6101d26102bb366004611e9b565b61060f565b6101d26102ce366004611ed2565b610626565b6102e66102e1366004611ed2565b610636565b604051905181526020016101dc565b610308610303366004611ed2565b6107fe565b6040516101dc9190611f39565b6101d2610323366004611ed2565b6109f7565b6101d2610336366004611ed2565b610a83565b6101d2610349366004611ed2565b610a96565b6101d261035c366004611ed2565b610aa0565b6101d261036f366004611ed2565b610b38565b6101d2610382366004611ed2565b610b52565b61039a610395366004611e9b565b610bce565b6040516101dc9190611fb8565b6101d26103b5366004611ed2565b610c59565b6101d26103c8366004611ed2565b610c63565b6103086103db366004611e9b565b610d76565b6103f36103ee366004611ed2565b610db0565b6040516101dc9190611fc7565b61023761040e366004611ed2565b610e64565b6101d2610421366004611e9b565b610e98565b6101d2610ea3565b6101d261043c366004611e9b565b610eb2565b6103f361044f366004611ed2565b610eea565b610467610462366004612055565b610efb565b604080519283526020830191909152016101dc565b61048f61048a366004612092565b610ff1565b6040516101dc9190612115565b6101d26104aa366004611ed2565b6110aa565b5f6104ba83836110ee565b5093979650505050505050565b5f5f826001600160a01b031663b27c0e746040518163ffffffff1660e01b8152600401606060405180830381865afa158015610505573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105299190612195565b92505050610536816112b6565b9392505050565b5f5f61054985856110ee565b505050509150508261055b5780610566565b61056681600a6121e9565b95945050505050565b610577611d57565b604051806101200160405280836001600160a01b0316815260200161059b84610b52565b81526020016105a9846110aa565b81526020016105b7846109f7565b81526020016105c5846104c7565b67ffffffffffffffff1681526020016105dd84610a96565b81526020016105eb84610a96565b81526020016105f984610b38565b815260200161060784610636565b905292915050565b5f61061a83836110ee565b50979650505050505050565b5f610630826112d1565b92915050565b60408051602081019091525f81525f826001600160a01b0316636b2ace876040518163ffffffff1660e01b8152600401602060405180830381865afa158015610681573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906106a59190612200565b90505f816001600160a01b03166356623118856001600160a01b031663d8dfeb456040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106f3573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107179190612200565b866001600160a01b031663473e3ce76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610753573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610777919061221b565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201525f6044820152606401602060405180830381865afa1580156107c4573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107e8919061221b565b6040805160208101909152908152949350505050565b604080518082019091525f80825260208201525f826001600160a01b0316636b2ace876040518163ffffffff1660e01b8152600401602060405180830381865afa15801561084e573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108729190612200565b90505f816001600160a01b03166356623118856001600160a01b031663d8dfeb456040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108c0573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108e49190612200565b866001600160a01b031663473e3ce76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610920573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610944919061221b565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201525f6044820152606401602060405180830381865afa158015610991573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109b5919061221b565b90505f6109c185610c59565b6109d3670de0b6b3a7640000846121e9565b6109dd9190612246565b604080518082019091529283526020830152509392505050565b5f5f620186a0836001600160a01b0316636ec097fb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a39573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610a5d919061221b565b610a679190612259565b9050620186a0610a79612710836121e9565b6105369190612246565b5f610630826001600160a01b0316611368565b5f6106308261150d565b5f5f826001600160a01b031663e551d11d6040518163ffffffff1660e01b81526004016040805180830381865afa158015610add573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610b01919061226c565b506001600160801b031690505f610b178461150d565b90505f610b2c83610b2787610b38565b6116c0565b905061056682826116d8565b5f610b42826116ed565b516001600160801b031692915050565b5f620186a0612710836001600160a01b031663aba024f46040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b96573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610bba919061221b565b610bc491906121e9565b6106309190612246565b610bd6611db6565b5f5f5f5f5f5f610be689896110ee565b9550955095509550955095506040518060e001604052808a6001600160a01b03168152602001896001600160a01b03168152602001878152602001868152602001858152602001604051806040016040528084815260200186815250815260200183815250965050505050505092915050565b5f61063082611861565b5f5f5f836001600160a01b031663e551d11d6040518163ffffffff1660e01b81526004016040805180830381865afa158015610ca1573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610cc5919061226c565b604080516003808252608082019092526001600160801b0393841695509190921692505f9160208201606080368337019050509050610d038561150d565b815f81518110610d1557610d156122b1565b602002602001018181525050610d2e83610b2787610b38565b81600181518110610d4157610d416122b1565b6020026020010181815250508181600281518110610d6157610d616122b1565b60200260200101818152505061056681611996565b604080518082019091525f80825260208201525f5f610d958585611a10565b60408051808201909152918252602082015295945050505050565b610db8611e18565b604051806101600160405280836001600160a01b03168152602001610ddc84610b52565b8152602001610dea846110aa565b8152602001610df8846109f7565b8152602001610e06846104c7565b67ffffffffffffffff168152602001610e1e84610a96565b8152602001610e2c84610a96565b8152602001610e3a84610b38565b8152602001610e4884610c59565b8152602001610e5684610626565b8152602001610607846107fe565b610e6c611d57565b610e758261056f565b9050610e8082610aa0565b60a0820152610e8e82610c63565b60c0820152919050565b5f6105368383611bf6565b5f610ead33611368565b905090565b5f5f610ebe8484611a10565b915050620186a0610ece856110aa565b610ed890836121e9565b610ee29190612246565b949350505050565b610ef2611e18565b610e7582610db0565b604051633de222bb60e21b81526001600160a01b03838116600483015282811660248301525f91829186169063f7888aec90604401602060405180830381865afa158015610f4b573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610f6f919061221b565b604051630acc462360e31b81526001600160a01b038681166004830152602482018590525f6044830152871690635662311890606401602060405180830381865afa158015610fc0573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610fe4919061221b565b915091505b935093915050565b60608167ffffffffffffffff81111561100c5761100c61229d565b60405190808252806020026020018201604052801561104557816020015b611032611db6565b81526020019060019003908161102a5790505b5090505f5b828110156110a25761107d85858584818110611068576110686122b1565b90506020020160208101906103959190611ed2565b82828151811061108f5761108f6122b1565b602090810291909101015260010161104a565b509392505050565b5f620186a0612710836001600160a01b031663c7ee2a7b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b96573d5f5f3e3d5ffd5b5f5f5f5f5f5f6110fe8888611a10565b9350905061110c8888611bf6565b935082156112ac5782611121612710866121e9565b61112b9190612246565b95505f886001600160a01b031663c7ee2a7b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561116a573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061118e919061221b565b90505f896001600160a01b031663d8dfeb456040518163ffffffff1660e01b8152600401602060405180830381865afa1580156111cd573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906111f19190612200565b90505f611206826001600160a01b0316611c8e565b61121190600a6123a0565b9050670de0b6b3a764000084846112296002856123a0565b611233908b6121e9565b61124090620186a06121e9565b61124a9190612246565b6112549190612246565b61125e9190612246565b94506112a6670de0b6b3a76400006112776002846123a0565b6112808e611861565b61129289670de0b6b3a76400006121e9565b61129c91906121e9565b610b279190612246565b97505050505b9295509295509295565b5f6312e337ee6112c78360646123ae565b61063091906123d1565b5f5f826001600160a01b031663d8dfeb456040518163ffffffff1660e01b8152600401602060405180830381865afa15801561130f573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906113339190612200565b90505f611348826001600160a01b0316611c8e565b61135390600a6123a0565b905061135e84611861565b610ed882806121e9565b5f816001600160a01b031663473e3ce76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113a5573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906113c9919061221b565b826001600160a01b0316636b2ace876040518163ffffffff1660e01b8152600401602060405180830381865afa158015611405573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906114299190612200565b6001600160a01b031663f7888aec846001600160a01b031663d8dfeb456040518163ffffffff1660e01b8152600401602060405180830381865afa158015611473573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906114979190612200565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152336024820152604401602060405180830381865afa1580156114df573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611503919061221b565b6106309190612259565b5f5f826001600160a01b0316636b2ace876040518163ffffffff1660e01b8152600401602060405180830381865afa15801561154b573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061156f9190612200565b90505f836001600160a01b0316639b352ae16040518163ffffffff1660e01b8152600401602060405180830381865afa1580156115ae573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906115d29190612200565b604051633de222bb60e21b81526001600160a01b03808316600483015286811660248301529192505f9184169063f7888aec90604401602060405180830381865afa158015611623573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611647919061221b565b604051630acc462360e31b81526001600160a01b038481166004830152602482018390525f604483015291925090841690635662311890606401602060405180830381865afa15801561169c573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610566919061221b565b5f8183116116ce575f610536565b6105368284612259565b5f8183106116e65781610536565b5090919050565b604080518082019091525f8082526020820152816001600160a01b0316638285ef406040518163ffffffff1660e01b81526004016040805180830381865afa15801561173b573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061175f9190612431565b90505f5f836001600160a01b031663b27c0e746040518163ffffffff1660e01b8152600401606060405180830381865afa15801561179f573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906117c39190612195565b92505091505f8267ffffffffffffffff16426117df9190612259565b905080158015906117fc575060208401516001600160801b031615155b1561185957670de0b6b3a7640000818367ffffffffffffffff16865f01516001600160801b031661182d91906121e9565b61183791906121e9565b6118419190612246565b845161184d919061248c565b6001600160801b031684525b505050919050565b5f5f826001600160a01b0316637dc0d1d06040518163ffffffff1660e01b8152600401602060405180830381865afa15801561189f573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906118c39190612200565b90505f836001600160a01b03166374645ff36040518163ffffffff1660e01b81526004015f60405180830381865afa158015611901573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f1916820160405261192891908101906124ab565b604051630d39bbef60e41b81529091506001600160a01b0383169063d39bbef09061195790849060040161253f565b602060405180830381865afa158015611972573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610ee2919061221b565b5f5f825f815181106119aa576119aa6122b1565b602002602001015190505f600190505b8351811015611a0957818482815181106119d6576119d66122b1565b60200260200101511015611a01578381815181106119f6576119f66122b1565b602002602001015191505b6001016119ba565b5092915050565b5f5f5f846001600160a01b0316636b2ace876040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a4f573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611a739190612200565b604051631c9e379b60e01b81526001600160a01b0386811660048301529192505f91871690631c9e379b90602401602060405180830381865afa158015611abc573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611ae0919061221b565b9050816001600160a01b03166356623118876001600160a01b031663d8dfeb456040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b2d573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611b519190612200565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018490525f6044820152606401602060405180830381865afa158015611ba0573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611bc4919061221b565b9350611bcf86611861565b611be1670de0b6b3a7640000866121e9565b611beb9190612246565b925050509250929050565b5f5f611c01846116ed565b602081015181516040516324720b1f60e11b81526001600160a01b0387811660048301529394506001600160801b039283169392909116918716906348e4163e90602401602060405180830381865afa158015611c60573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611c84919061221b565b610ed891906121e9565b60408051600481526024810182526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663313ce56760e01b17905290515f91829182916001600160a01b03861691611ce89190612574565b5f60405180830381855afa9150503d805f8114611d20576040519150601f19603f3d011682016040523d82523d5f602084013e611d25565b606091505b5091509150818015611d38575080516020145b611d43576012610ee2565b80806020019051810190610ee2919061258a565b6040518061012001604052805f6001600160a01b031681526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f8152602001611db160405180602001604052805f81525090565b905290565b6040518060e001604052805f6001600160a01b031681526020015f6001600160a01b031681526020015f81526020015f81526020015f8152602001611e0c60405180604001604052805f81526020015f81525090565b81526020015f81525090565b6040518061016001604052805f6001600160a01b031681526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f8152602001611db160405180604001604052805f81526020015f81525090565b6001600160a01b0381168114611e98575f5ffd5b50565b5f5f60408385031215611eac575f5ffd5b8235611eb781611e84565b91506020830135611ec781611e84565b809150509250929050565b5f60208284031215611ee2575f5ffd5b813561053681611e84565b5f5f5f60608486031215611eff575f5ffd5b8335611f0a81611e84565b92506020840135611f1a81611e84565b915060408401358015158114611f2e575f5ffd5b809150509250925092565b815181526020808301519082015260408101610630565b6001600160a01b0381511682526001600160a01b03602082015116602083015260408101516040830152606081015160608301526080810151608083015260a0810151611faa60a084018280518252602090810151910152565b5060c0015160e09190910152565b61010081016106308284611f50565b81516001600160a01b0316815261018081016020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e0830152610100830151610100830152610120830151610120830152610140830151611a0961014084018280518252602090810151910152565b5f5f5f60608486031215612067575f5ffd5b833561207281611e84565b9250602084013561208281611e84565b91506040840135611f2e81611e84565b5f5f5f604084860312156120a4575f5ffd5b83356120af81611e84565b9250602084013567ffffffffffffffff8111156120ca575f5ffd5b8401601f810186136120da575f5ffd5b803567ffffffffffffffff8111156120f0575f5ffd5b8660208260051b8401011115612104575f5ffd5b939660209190910195509293505050565b602080825282518282018190525f918401906040840190835b8181101561215857612141838551611f50565b60209390930192610100929092019160010161212e565b509095945050505050565b805167ffffffffffffffff8116811461217a575f5ffd5b919050565b80516001600160801b038116811461217a575f5ffd5b5f5f5f606084860312156121a7575f5ffd5b6121b084612163565b92506121be6020850161217f565b91506121cc60408501612163565b90509250925092565b634e487b7160e01b5f52601160045260245ffd5b8082028115828204841417610630576106306121d5565b5f60208284031215612210575f5ffd5b815161053681611e84565b5f6020828403121561222b575f5ffd5b5051919050565b634e487b7160e01b5f52601260045260245ffd5b5f8261225457612254612232565b500490565b81810381811115610630576106306121d5565b5f5f6040838503121561227d575f5ffd5b6122868361217f565b91506122946020840161217f565b90509250929050565b634e487b7160e01b5f52604160045260245ffd5b634e487b7160e01b5f52603260045260245ffd5b6001815b6001841115610fe9578085048111156122e4576122e46121d5565b60018416156122f257908102905b60019390931c9280026122c9565b5f8261230e57506001610630565b8161231a57505f610630565b8160018114612330576002811461233a57612356565b6001915050610630565b60ff84111561234b5761234b6121d5565b50506001821b610630565b5060208310610133831016604e8410600b8410161715612379575081810a610630565b6123855f1984846122c5565b805f1904821115612398576123986121d5565b029392505050565b5f61053660ff841683612300565b67ffffffffffffffff8181168382160290811690818114611a0957611a096121d5565b5f67ffffffffffffffff8316806123ea576123ea612232565b8067ffffffffffffffff84160491505092915050565b604051601f8201601f1916810167ffffffffffffffff811182821017156124295761242961229d565b604052919050565b5f6040828403128015612442575f5ffd5b506040805190810167ffffffffffffffff811182821017156124665761246661229d565b6040526124728361217f565b81526124806020840161217f565b60208201529392505050565b6001600160801b038181168382160190811115610630576106306121d5565b5f602082840312156124bb575f5ffd5b815167ffffffffffffffff8111156124d1575f5ffd5b8201601f810184136124e1575f5ffd5b805167ffffffffffffffff8111156124fb576124fb61229d565b61250e601f8201601f1916602001612400565b818152856020838501011115612522575f5ffd5b8160208401602083015e5f91810160200191909152949350505050565b602081525f82518060208401528060208501604085015e5f604082850101526040601f19601f83011684010191505092915050565b5f82518060208501845e5f920191825250919050565b5f6020828403121561259a575f5ffd5b815160ff81168114610536575f5ffdfea2646970667358221220e4cc8c21df9d17e69a102df329480b5a89aaa2f213ef24d001d0b49686af44fd64736f6c634300081c0033",
  "args_data": "0x000000000000000000000000fb3485c2e209a5cfbdc1447674256578f1a80ee3",
  "tx_hash": "0x12c0a69a5c21560b34da571ea03f7f9b0f98c04ce1ff4386e1629f13cfd57301",
  "args": null,
  "data": "0x6080604052348015600e575f5ffd5b506125e08061001c5f395ff3fe608060405234801561000f575f5ffd5b50600436106101bb575f3560e01c806392a576e6116100f3578063cdb5964411610093578063d96309931161006e578063d963099314610441578063dc6f1caa14610454578063ee3b1eb91461047c578063f79a987a1461049c575f5ffd5b8063cdb5964414610413578063d1a840df14610426578063d33a24911461042e575f5ffd5b8063a55e8668116100ce578063a55e8668146103cd578063bbd1b0281461033b578063c1cd378f146103e0578063cbf97e3814610400575f5ffd5b806392a576e6146103875780639406aea1146103a7578063945ebb91146103ba575f5ffd5b806360a98b801161015e57806366e3a4541161013957806366e3a4541461033b57806373d045601461034e578063842126351461036157806387426a8414610374575f5ffd5b806360a98b80146102f557806361acf8d51461031557806364f6ea9114610328575f5ffd5b806341ae8f831161019957806341ae8f831461022457806342d3fd08146102ad57806351a40994146102c057806354821c21146102d3575f5ffd5b80631e713a37146101bf5780633548ada0146101e5578063397938dd14610211575b5f5ffd5b6101d26101cd366004611e9b565b6104af565b6040519081526020015b60405180910390f35b6101f86101f3366004611ed2565b6104c7565b60405167ffffffffffffffff90911681526020016101dc565b6101d261021f366004611eed565b61053d565b610237610232366004611ed2565b61056f565b6040516101dc91905f610120820190506001600160a01b0383511682526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e08301526101008301515161010083015292915050565b6101d26102bb366004611e9b565b61060f565b6101d26102ce366004611ed2565b610626565b6102e66102e1366004611ed2565b610636565b604051905181526020016101dc565b610308610303366004611ed2565b6107fe565b6040516101dc9190611f39565b6101d2610323366004611ed2565b6109f7565b6101d2610336366004611ed2565b610a83565b6101d2610349366004611ed2565b610a96565b6101d261035c366004611ed2565b610aa0565b6101d261036f366004611ed2565b610b38565b6101d2610382366004611ed2565b610b52565b61039a610395366004611e9b565b610bce565b6040516101dc9190611fb8565b6101d26103b5366004611ed2565b610c59565b6101d26103c8366004611ed2565b610c63565b6103086103db366004611e9b565b610d76565b6103f36103ee366004611ed2565b610db0565b6040516101dc9190611fc7565b61023761040e366004611ed2565b610e64565b6101d2610421366004611e9b565b610e98565b6101d2610ea3565b6101d261043c366004611e9b565b610eb2565b6103f361044f366004611ed2565b610eea565b610467610462366004612055565b610efb565b604080519283526020830191909152016101dc565b61048f61048a366004612092565b610ff1565b6040516101dc9190612115565b6101d26104aa366004611ed2565b6110aa565b5f6104ba83836110ee565b5093979650505050505050565b5f5f826001600160a01b031663b27c0e746040518163ffffffff1660e01b8152600401606060405180830381865afa158015610505573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105299190612195565b92505050610536816112b6565b9392505050565b5f5f61054985856110ee565b505050509150508261055b5780610566565b61056681600a6121e9565b95945050505050565b610577611d57565b604051806101200160405280836001600160a01b0316815260200161059b84610b52565b81526020016105a9846110aa565b81526020016105b7846109f7565b81526020016105c5846104c7565b67ffffffffffffffff1681526020016105dd84610a96565b81526020016105eb84610a96565b81526020016105f984610b38565b815260200161060784610636565b905292915050565b5f61061a83836110ee565b50979650505050505050565b5f610630826112d1565b92915050565b60408051602081019091525f81525f826001600160a01b0316636b2ace876040518163ffffffff1660e01b8152600401602060405180830381865afa158015610681573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906106a59190612200565b90505f816001600160a01b03166356623118856001600160a01b031663d8dfeb456040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106f3573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107179190612200565b866001600160a01b031663473e3ce76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610753573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610777919061221b565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201525f6044820152606401602060405180830381865afa1580156107c4573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107e8919061221b565b6040805160208101909152908152949350505050565b604080518082019091525f80825260208201525f826001600160a01b0316636b2ace876040518163ffffffff1660e01b8152600401602060405180830381865afa15801561084e573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108729190612200565b90505f816001600160a01b03166356623118856001600160a01b031663d8dfeb456040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108c0573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108e49190612200565b866001600160a01b031663473e3ce76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610920573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610944919061221b565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201525f6044820152606401602060405180830381865afa158015610991573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109b5919061221b565b90505f6109c185610c59565b6109d3670de0b6b3a7640000846121e9565b6109dd9190612246565b604080518082019091529283526020830152509392505050565b5f5f620186a0836001600160a01b0316636ec097fb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a39573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610a5d919061221b565b610a679190612259565b9050620186a0610a79612710836121e9565b6105369190612246565b5f610630826001600160a01b0316611368565b5f6106308261150d565b5f5f826001600160a01b031663e551d11d6040518163ffffffff1660e01b81526004016040805180830381865afa158015610add573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610b01919061226c565b506001600160801b031690505f610b178461150d565b90505f610b2c83610b2787610b38565b6116c0565b905061056682826116d8565b5f610b42826116ed565b516001600160801b031692915050565b5f620186a0612710836001600160a01b031663aba024f46040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b96573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610bba919061221b565b610bc491906121e9565b6106309190612246565b610bd6611db6565b5f5f5f5f5f5f610be689896110ee565b9550955095509550955095506040518060e001604052808a6001600160a01b03168152602001896001600160a01b03168152602001878152602001868152602001858152602001604051806040016040528084815260200186815250815260200183815250965050505050505092915050565b5f61063082611861565b5f5f5f836001600160a01b031663e551d11d6040518163ffffffff1660e01b81526004016040805180830381865afa158015610ca1573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610cc5919061226c565b604080516003808252608082019092526001600160801b0393841695509190921692505f9160208201606080368337019050509050610d038561150d565b815f81518110610d1557610d156122b1565b602002602001018181525050610d2e83610b2787610b38565b81600181518110610d4157610d416122b1565b6020026020010181815250508181600281518110610d6157610d616122b1565b60200260200101818152505061056681611996565b604080518082019091525f80825260208201525f5f610d958585611a10565b60408051808201909152918252602082015295945050505050565b610db8611e18565b604051806101600160405280836001600160a01b03168152602001610ddc84610b52565b8152602001610dea846110aa565b8152602001610df8846109f7565b8152602001610e06846104c7565b67ffffffffffffffff168152602001610e1e84610a96565b8152602001610e2c84610a96565b8152602001610e3a84610b38565b8152602001610e4884610c59565b8152602001610e5684610626565b8152602001610607846107fe565b610e6c611d57565b610e758261056f565b9050610e8082610aa0565b60a0820152610e8e82610c63565b60c0820152919050565b5f6105368383611bf6565b5f610ead33611368565b905090565b5f5f610ebe8484611a10565b915050620186a0610ece856110aa565b610ed890836121e9565b610ee29190612246565b949350505050565b610ef2611e18565b610e7582610db0565b604051633de222bb60e21b81526001600160a01b03838116600483015282811660248301525f91829186169063f7888aec90604401602060405180830381865afa158015610f4b573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610f6f919061221b565b604051630acc462360e31b81526001600160a01b038681166004830152602482018590525f6044830152871690635662311890606401602060405180830381865afa158015610fc0573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610fe4919061221b565b915091505b935093915050565b60608167ffffffffffffffff81111561100c5761100c61229d565b60405190808252806020026020018201604052801561104557816020015b611032611db6565b81526020019060019003908161102a5790505b5090505f5b828110156110a25761107d85858584818110611068576110686122b1565b90506020020160208101906103959190611ed2565b82828151811061108f5761108f6122b1565b602090810291909101015260010161104a565b509392505050565b5f620186a0612710836001600160a01b031663c7ee2a7b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b96573d5f5f3e3d5ffd5b5f5f5f5f5f5f6110fe8888611a10565b9350905061110c8888611bf6565b935082156112ac5782611121612710866121e9565b61112b9190612246565b95505f886001600160a01b031663c7ee2a7b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561116a573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061118e919061221b565b90505f896001600160a01b031663d8dfeb456040518163ffffffff1660e01b8152600401602060405180830381865afa1580156111cd573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906111f19190612200565b90505f611206826001600160a01b0316611c8e565b61121190600a6123a0565b9050670de0b6b3a764000084846112296002856123a0565b611233908b6121e9565b61124090620186a06121e9565b61124a9190612246565b6112549190612246565b61125e9190612246565b94506112a6670de0b6b3a76400006112776002846123a0565b6112808e611861565b61129289670de0b6b3a76400006121e9565b61129c91906121e9565b610b279190612246565b97505050505b9295509295509295565b5f6312e337ee6112c78360646123ae565b61063091906123d1565b5f5f826001600160a01b031663d8dfeb456040518163ffffffff1660e01b8152600401602060405180830381865afa15801561130f573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906113339190612200565b90505f611348826001600160a01b0316611c8e565b61135390600a6123a0565b905061135e84611861565b610ed882806121e9565b5f816001600160a01b031663473e3ce76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113a5573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906113c9919061221b565b826001600160a01b0316636b2ace876040518163ffffffff1660e01b8152600401602060405180830381865afa158015611405573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906114299190612200565b6001600160a01b031663f7888aec846001600160a01b031663d8dfeb456040518163ffffffff1660e01b8152600401602060405180830381865afa158015611473573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906114979190612200565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152336024820152604401602060405180830381865afa1580156114df573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611503919061221b565b6106309190612259565b5f5f826001600160a01b0316636b2ace876040518163ffffffff1660e01b8152600401602060405180830381865afa15801561154b573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061156f9190612200565b90505f836001600160a01b0316639b352ae16040518163ffffffff1660e01b8152600401602060405180830381865afa1580156115ae573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906115d29190612200565b604051633de222bb60e21b81526001600160a01b03808316600483015286811660248301529192505f9184169063f7888aec90604401602060405180830381865afa158015611623573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611647919061221b565b604051630acc462360e31b81526001600160a01b038481166004830152602482018390525f604483015291925090841690635662311890606401602060405180830381865afa15801561169c573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610566919061221b565b5f8183116116ce575f610536565b6105368284612259565b5f8183106116e65781610536565b5090919050565b604080518082019091525f8082526020820152816001600160a01b0316638285ef406040518163ffffffff1660e01b81526004016040805180830381865afa15801561173b573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061175f9190612431565b90505f5f836001600160a01b031663b27c0e746040518163ffffffff1660e01b8152600401606060405180830381865afa15801561179f573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906117c39190612195565b92505091505f8267ffffffffffffffff16426117df9190612259565b905080158015906117fc575060208401516001600160801b031615155b1561185957670de0b6b3a7640000818367ffffffffffffffff16865f01516001600160801b031661182d91906121e9565b61183791906121e9565b6118419190612246565b845161184d919061248c565b6001600160801b031684525b505050919050565b5f5f826001600160a01b0316637dc0d1d06040518163ffffffff1660e01b8152600401602060405180830381865afa15801561189f573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906118c39190612200565b90505f836001600160a01b03166374645ff36040518163ffffffff1660e01b81526004015f60405180830381865afa158015611901573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f1916820160405261192891908101906124ab565b604051630d39bbef60e41b81529091506001600160a01b0383169063d39bbef09061195790849060040161253f565b602060405180830381865afa158015611972573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610ee2919061221b565b5f5f825f815181106119aa576119aa6122b1565b602002602001015190505f600190505b8351811015611a0957818482815181106119d6576119d66122b1565b60200260200101511015611a01578381815181106119f6576119f66122b1565b602002602001015191505b6001016119ba565b5092915050565b5f5f5f846001600160a01b0316636b2ace876040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a4f573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611a739190612200565b604051631c9e379b60e01b81526001600160a01b0386811660048301529192505f91871690631c9e379b90602401602060405180830381865afa158015611abc573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611ae0919061221b565b9050816001600160a01b03166356623118876001600160a01b031663d8dfeb456040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b2d573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611b519190612200565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018490525f6044820152606401602060405180830381865afa158015611ba0573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611bc4919061221b565b9350611bcf86611861565b611be1670de0b6b3a7640000866121e9565b611beb9190612246565b925050509250929050565b5f5f611c01846116ed565b602081015181516040516324720b1f60e11b81526001600160a01b0387811660048301529394506001600160801b039283169392909116918716906348e4163e90602401602060405180830381865afa158015611c60573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611c84919061221b565b610ed891906121e9565b60408051600481526024810182526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663313ce56760e01b17905290515f91829182916001600160a01b03861691611ce89190612574565b5f60405180830381855afa9150503d805f8114611d20576040519150601f19603f3d011682016040523d82523d5f602084013e611d25565b606091505b5091509150818015611d38575080516020145b611d43576012610ee2565b80806020019051810190610ee2919061258a565b6040518061012001604052805f6001600160a01b031681526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f8152602001611db160405180602001604052805f81525090565b905290565b6040518060e001604052805f6001600160a01b031681526020015f6001600160a01b031681526020015f81526020015f81526020015f8152602001611e0c60405180604001604052805f81526020015f81525090565b81526020015f81525090565b6040518061016001604052805f6001600160a01b031681526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f8152602001611db160405180604001604052805f81526020015f81525090565b6001600160a01b0381168114611e98575f5ffd5b50565b5f5f60408385031215611eac575f5ffd5b8235611eb781611e84565b91506020830135611ec781611e84565b809150509250929050565b5f60208284031215611ee2575f5ffd5b813561053681611e84565b5f5f5f60608486031215611eff575f5ffd5b8335611f0a81611e84565b92506020840135611f1a81611e84565b915060408401358015158114611f2e575f5ffd5b809150509250925092565b815181526020808301519082015260408101610630565b6001600160a01b0381511682526001600160a01b03602082015116602083015260408101516040830152606081015160608301526080810151608083015260a0810151611faa60a084018280518252602090810151910152565b5060c0015160e09190910152565b61010081016106308284611f50565b81516001600160a01b0316815261018081016020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e0830152610100830151610100830152610120830151610120830152610140830151611a0961014084018280518252602090810151910152565b5f5f5f60608486031215612067575f5ffd5b833561207281611e84565b9250602084013561208281611e84565b91506040840135611f2e81611e84565b5f5f5f604084860312156120a4575f5ffd5b83356120af81611e84565b9250602084013567ffffffffffffffff8111156120ca575f5ffd5b8401601f810186136120da575f5ffd5b803567ffffffffffffffff8111156120f0575f5ffd5b8660208260051b8401011115612104575f5ffd5b939660209190910195509293505050565b602080825282518282018190525f918401906040840190835b8181101561215857612141838551611f50565b60209390930192610100929092019160010161212e565b509095945050505050565b805167ffffffffffffffff8116811461217a575f5ffd5b919050565b80516001600160801b038116811461217a575f5ffd5b5f5f5f606084860312156121a7575f5ffd5b6121b084612163565b92506121be6020850161217f565b91506121cc60408501612163565b90509250925092565b634e487b7160e01b5f52601160045260245ffd5b8082028115828204841417610630576106306121d5565b5f60208284031215612210575f5ffd5b815161053681611e84565b5f6020828403121561222b575f5ffd5b5051919050565b634e487b7160e01b5f52601260045260245ffd5b5f8261225457612254612232565b500490565b81810381811115610630576106306121d5565b5f5f6040838503121561227d575f5ffd5b6122868361217f565b91506122946020840161217f565b90509250929050565b634e487b7160e01b5f52604160045260245ffd5b634e487b7160e01b5f52603260045260245ffd5b6001815b6001841115610fe9578085048111156122e4576122e46121d5565b60018416156122f257908102905b60019390931c9280026122c9565b5f8261230e57506001610630565b8161231a57505f610630565b8160018114612330576002811461233a57612356565b6001915050610630565b60ff84111561234b5761234b6121d5565b50506001821b610630565b5060208310610133831016604e8410600b8410161715612379575081810a610630565b6123855f1984846122c5565b805f1904821115612398576123986121d5565b029392505050565b5f61053660ff841683612300565b67ffffffffffffffff8181168382160290811690818114611a0957611a096121d5565b5f67ffffffffffffffff8316806123ea576123ea612232565b8067ffffffffffffffff84160491505092915050565b604051601f8201601f1916810167ffffffffffffffff811182821017156124295761242961229d565b604052919050565b5f6040828403128015612442575f5ffd5b506040805190810167ffffffffffffffff811182821017156124665761246661229d565b6040526124728361217f565b81526124806020840161217f565b60208201529392505050565b6001600160801b038181168382160190811115610630576106306121d5565b5f602082840312156124bb575f5ffd5b815167ffffffffffffffff8111156124d1575f5ffd5b8201601f810184136124e1575f5ffd5b805167ffffffffffffffff8111156124fb576124fb61229d565b61250e601f8201601f1916602001612400565b818152856020838501011115612522575f5ffd5b8160208401602083015e5f91810160200191909152949350505050565b602081525f82518060208401528060208501604085015e5f604082850101526040601f19601f83011684010191505092915050565b5f82518060208501845e5f920191825250919050565b5f6020828403121561259a575f5ffd5b815160ff81168114610536575f5ffdfea2646970667358221220e4cc8c21df9d17e69a102df329480b5a89aaa2f213ef24d001d0b49686af44fd64736f6c634300081c0033000000000000000000000000fb3485c2e209a5cfbdc1447674256578f1a80ee3",
  "artifact_path": "MarketLens.sol",
  "artifact_full_path": "MarketLens.sol:MarketLens",
  "standardJsonInput": {
    "language": "Solidity",
    "sources": {
      "src/lenses/MarketLens.sol": {
        "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.9;\n\nimport {IERC20} from \"@BoringSolidity/interfaces/IERC20.sol\";\nimport {IBentoBoxV1} from \"/interfaces/IBentoBoxV1.sol\";\nimport {ICauldronV2} from \"/interfaces/ICauldronV2.sol\";\nimport {ICauldronV3} from \"/interfaces/ICauldronV3.sol\";\nimport {MathLib} from \"/libraries/MathLib.sol\";\nimport {CauldronLib} from \"/libraries/CauldronLib.sol\";\n\ncontract MarketLens {\n    using CauldronLib for ICauldronV2;\n\n    struct UserPosition {\n        address cauldron;\n        address account;\n        uint256 ltvBps;\n        uint256 healthFactor;\n        uint256 borrowValue;\n        AmountValue collateral;\n        uint256 liquidationPrice;\n    }\n\n    struct MarketInfo {\n        address cauldron;\n        uint256 borrowFee;\n        uint256 maximumCollateralRatio;\n        uint256 liquidationFee;\n        uint256 interestPerYear;\n        uint256 marketMaxBorrow;\n        uint256 userMaxBorrow;\n        uint256 totalBorrowed;\n        uint256 oracleExchangeRate;\n        uint256 collateralPrice;\n        AmountValue totalCollateral;\n    }\n\n    struct MarketInfoPyth {\n        address cauldron;\n        uint256 borrowFee;\n        uint256 maximumCollateralRatio;\n        uint256 liquidationFee;\n        uint256 interestPerYear;\n        uint256 marketMaxBorrow;\n        uint256 userMaxBorrow;\n        uint256 totalBorrowed;\n        Amount totalCollateral;\n    }\n\n    struct AmountValue {\n        uint256 amount;\n        uint256 value;\n    }\n\n    struct Amount {\n        uint256 amount;\n    }\n\n    uint256 constant PRECISION = 1e18;\n    uint256 constant TENK_PRECISION = 1e5;\n    uint256 constant BPS_PRECISION = 1e4;\n\n    function getBorrowFee(ICauldronV2 cauldron) public view returns (uint256) {\n        return (cauldron.BORROW_OPENING_FEE() * BPS_PRECISION) / TENK_PRECISION;\n    }\n\n    function getMaximumCollateralRatio(ICauldronV2 cauldron) public view returns (uint256) {\n        return (cauldron.COLLATERIZATION_RATE() * BPS_PRECISION) / TENK_PRECISION;\n    }\n\n    function getLiquidationFee(ICauldronV2 cauldron) public view returns (uint256) {\n        uint256 liquidationFee = cauldron.LIQUIDATION_MULTIPLIER() - 100_000;\n        return (liquidationFee * BPS_PRECISION) / TENK_PRECISION;\n    }\n\n    function getInterestPerYear(ICauldronV2 cauldron) public view returns (uint64) {\n        (, , uint64 interestPerSecond) = cauldron.accrueInfo();\n        return CauldronLib.getInterestPerYearFromInterestPerSecond(interestPerSecond);\n    }\n\n    function getMimInBentoBox(ICauldronV2 cauldron) private view returns (uint256 mimInBentoBox) {\n        IBentoBoxV1 bentoBox = IBentoBoxV1(cauldron.bentoBox());\n        IERC20 mim = IERC20(cauldron.magicInternetMoney());\n        uint256 poolBalance = bentoBox.balanceOf(mim, address(cauldron));\n        mimInBentoBox = bentoBox.toAmount(mim, poolBalance, false);\n    }\n\n    function getTokenInBentoBox(IBentoBoxV1 bentoBox, IERC20 token, address account) public view returns (uint256 share, uint256 amount) {\n        return (bentoBox.balanceOf(token, account), bentoBox.toAmount(token, share, false));\n    }\n\n    function getMaxMarketBorrowForCauldronV2(ICauldronV2 cauldron) public view returns (uint256) {\n        return getMimInBentoBox(cauldron);\n    }\n\n    function getMaxUserBorrowForCauldronV2(ICauldronV2 cauldron) public view returns (uint256) {\n        return getMimInBentoBox(cauldron);\n    }\n\n    // Returns the maximum amount that can be borrowed across all users\n    function getMaxMarketBorrowForCauldronV3(ICauldronV3 cauldron) public view returns (uint256) {\n        (uint256 totalBorrowLimit, ) = cauldron.borrowLimit();\n\n        uint256 mimInBentoBox = getMimInBentoBox(cauldron);\n        uint256 remainingBorrowLimit = MathLib.subWithZeroFloor(totalBorrowLimit, getTotalBorrowed(cauldron));\n\n        return MathLib.min(mimInBentoBox, remainingBorrowLimit);\n    }\n\n    // Returns the maximum amount that a single user can borrow\n    function getMaxUserBorrowForCauldronV3(ICauldronV3 cauldron) public view returns (uint256) {\n        (uint256 totalBorrowLimit, uint256 userBorrowLimit) = cauldron.borrowLimit();\n\n        uint256[] memory values = new uint256[](3);\n        values[0] = getMimInBentoBox(cauldron);\n        values[1] = MathLib.subWithZeroFloor(totalBorrowLimit, getTotalBorrowed(cauldron));\n        values[2] = userBorrowLimit;\n\n        return MathLib.min(values);\n    }\n\n    function getTotalBorrowed(ICauldronV2 cauldron) public view returns (uint256) {\n        return CauldronLib.getTotalBorrowWithAccruedInterests(cauldron).elastic;\n    }\n\n    function getOracleExchangeRate(ICauldronV2 cauldron) public view returns (uint256) {\n        return CauldronLib.getOracleExchangeRate(cauldron);\n    }\n\n    function getCollateralPrice(ICauldronV2 cauldron) public view returns (uint256) {\n        return CauldronLib.getCollateralPrice(cauldron);\n    }\n\n    function getTotalCollateral(ICauldronV2 cauldron) public view returns (AmountValue memory) {\n        IBentoBoxV1 bentoBox = IBentoBoxV1(cauldron.bentoBox());\n        uint256 amount = bentoBox.toAmount(cauldron.collateral(), cauldron.totalCollateralShare(), false);\n        uint256 value = (amount * PRECISION) / getOracleExchangeRate(cauldron);\n        return AmountValue(amount, value);\n    }\n\n    function getTotalCollateralAmount(ICauldronV2 cauldron) public view returns (Amount memory) {\n        IBentoBoxV1 bentoBox = IBentoBoxV1(cauldron.bentoBox());\n        uint256 amount = bentoBox.toAmount(cauldron.collateral(), cauldron.totalCollateralShare(), false);\n        return Amount({amount: amount});\n    }\n\n    function getUserBorrow(ICauldronV2 cauldron, address account) public view returns (uint256) {\n        return CauldronLib.getUserBorrowAmount(cauldron, account);\n    }\n\n    function getUserMaxBorrow(ICauldronV2 cauldron, address account) public view returns (uint256) {\n        (, uint256 value) = CauldronLib.getUserCollateral(cauldron, account);\n        return (value * getMaximumCollateralRatio(cauldron)) / TENK_PRECISION;\n    }\n\n    function getUserCollateral(ICauldronV2 cauldron, address account) public view returns (AmountValue memory) {\n        (uint256 amount, uint256 value) = CauldronLib.getUserCollateral(cauldron, account);\n        return AmountValue(amount, value);\n    }\n\n    function getUserLtv(ICauldronV2 cauldron, address account) public view returns (uint256 ltvBps) {\n        (ltvBps, , , , , ) = CauldronLib.getUserPositionInfo(cauldron, account);\n    }\n\n    function getHealthFactor(ICauldronV2 cauldron, address account, bool isStable) public view returns (uint256) {\n        (, uint256 healthFactor, , , , ) = CauldronLib.getUserPositionInfo(cauldron, account);\n        return isStable ? healthFactor * 10 : healthFactor;\n    }\n\n    function getUserLiquidationPrice(ICauldronV2 cauldron, address account) public view returns (uint256 liquidationPrice) {\n        (, , , , liquidationPrice, ) = CauldronLib.getUserPositionInfo(cauldron, account);\n    }\n\n    function getUserPosition(ICauldronV2 cauldron, address account) public view returns (UserPosition memory) {\n        (\n            uint256 ltvBps,\n            uint256 healthFactor,\n            uint256 borrowValue,\n            uint256 collateralValue,\n            uint256 liquidationPrice,\n            uint256 collateralAmount\n        ) = CauldronLib.getUserPositionInfo(cauldron, account);\n\n        return\n            UserPosition(\n                address(cauldron),\n                address(account),\n                ltvBps,\n                healthFactor,\n                borrowValue,\n                AmountValue({amount: collateralAmount, value: collateralValue}),\n                liquidationPrice\n            );\n    }\n\n    // Get many user position information at once.\n    // Beware of hitting RPC `eth_call` gas limit\n    function getUserPositions(ICauldronV2 cauldron, address[] calldata accounts) public view returns (UserPosition[] memory positions) {\n        positions = new UserPosition[](accounts.length);\n        for (uint256 i = 0; i < accounts.length; i++) {\n            positions[i] = getUserPosition(cauldron, accounts[i]);\n        }\n    }\n\n    function getMarketInfoCauldronV2(ICauldronV2 cauldron) public view returns (MarketInfo memory) {\n        return\n            MarketInfo({\n                cauldron: address(cauldron),\n                borrowFee: getBorrowFee(cauldron),\n                maximumCollateralRatio: getMaximumCollateralRatio(cauldron),\n                liquidationFee: getLiquidationFee(cauldron),\n                interestPerYear: getInterestPerYear(cauldron),\n                marketMaxBorrow: getMaxMarketBorrowForCauldronV2(cauldron),\n                userMaxBorrow: getMaxUserBorrowForCauldronV2(cauldron),\n                totalBorrowed: getTotalBorrowed(cauldron),\n                oracleExchangeRate: getOracleExchangeRate(cauldron),\n                collateralPrice: getCollateralPrice(cauldron),\n                totalCollateral: getTotalCollateral(cauldron)\n            });\n    }\n\n    function getMarketInfoCauldronV3(ICauldronV3 cauldron) public view returns (MarketInfo memory marketInfo) {\n        marketInfo = getMarketInfoCauldronV2(cauldron);\n        marketInfo.marketMaxBorrow = getMaxMarketBorrowForCauldronV3(cauldron);\n        marketInfo.userMaxBorrow = getMaxUserBorrowForCauldronV3(cauldron);\n    }\n\n    function getMarketInfoCauldronV2Pyth(ICauldronV2 cauldron) public view returns (MarketInfoPyth memory) {\n        return\n            MarketInfoPyth({\n                cauldron: address(cauldron),\n                borrowFee: getBorrowFee(cauldron),\n                maximumCollateralRatio: getMaximumCollateralRatio(cauldron),\n                liquidationFee: getLiquidationFee(cauldron),\n                interestPerYear: getInterestPerYear(cauldron),\n                marketMaxBorrow: getMaxMarketBorrowForCauldronV2(cauldron),\n                userMaxBorrow: getMaxUserBorrowForCauldronV2(cauldron),\n                totalBorrowed: getTotalBorrowed(cauldron),\n                totalCollateral: getTotalCollateralAmount(cauldron)\n            });\n    }\n\n    function getMarketInfoCauldronV3Pyth(ICauldronV3 cauldron) public view returns (MarketInfoPyth memory marketInfo) {\n        marketInfo = getMarketInfoCauldronV2Pyth(cauldron);\n        marketInfo.marketMaxBorrow = getMaxMarketBorrowForCauldronV3(cauldron);\n        marketInfo.userMaxBorrow = getMaxUserBorrowForCauldronV3(cauldron);\n    }\n\n    /// @notice Get the available skim amount for the caller cauldron.\n    /// Designed for use as a call action in `cook`. Typically followed\n    /// by an add collateral action that skims available amount of shares.\n    function availableSkim() public view returns (uint256 share) {\n        // Assume caller is a cauldron\n        return ICauldronV2(msg.sender).getAvailableSkim();\n    }\n\n    /// @notice Get the available skim amount for the cauldron.\n    function availableSkim(ICauldronV2 cauldron) public view returns (uint256 share) {\n        return cauldron.getAvailableSkim();\n    }\n}\n"
      },
      "dependencies/BoringSolidity-1.0.0/contracts/interfaces/IERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IERC20 {\n    // transfer and tranferFrom have been removed, because they don't work on all tokens (some aren't ERC20 complaint).\n    // By removing them you can't accidentally use them.\n    // name, symbol and decimals have been removed, because they are optional and sometimes wrongly implemented (MKR).\n    // Use BoringERC20 with `using BoringERC20 for IERC20` and call `safeTransfer`, `safeTransferFrom`, etc instead.\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /// @notice EIP 2612\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n}\n\ninterface IStrictERC20 {\n    // This is the strict ERC20 interface. Don't use this, certainly not if you don't control the ERC20 token you're calling.\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address _owner) external view returns (uint256 balance);\n    function transfer(address _to, uint256 _value) external returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\n    function approve(address _spender, uint256 _value) external returns (bool success);\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /// @notice EIP 2612\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n}\n"
      },
      "src/interfaces/IBentoBoxV1.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\nimport {IERC20} from \"@BoringSolidity/interfaces/IERC20.sol\";\nimport {Rebase} from \"@BoringSolidity/libraries/BoringRebase.sol\";\nimport {IStrategy} from \"/interfaces/IStrategy.sol\";\n\ninterface IFlashBorrower {\n    /// @notice The flashloan callback. `amount` + `fee` needs to repayed to msg.sender before this call returns.\n    /// @param sender The address of the invoker of this flashloan.\n    /// @param token The address of the token that is loaned.\n    /// @param amount of the `token` that is loaned.\n    /// @param fee The fee that needs to be paid on top for this loan. Needs to be the same as `token`.\n    /// @param data Additional data that was passed to the flashloan function.\n    function onFlashLoan(address sender, IERC20 token, uint256 amount, uint256 fee, bytes calldata data) external;\n}\n\ninterface IBatchFlashBorrower {\n    /// @notice The callback for batched flashloans. Every amount + fee needs to repayed to msg.sender before this call returns.\n    /// @param sender The address of the invoker of this flashloan.\n    /// @param tokens Array of addresses for ERC-20 tokens that is loaned.\n    /// @param amounts A one-to-one map to `tokens` that is loaned.\n    /// @param fees A one-to-one map to `tokens` that needs to be paid on top for each loan. Needs to be the same token.\n    /// @param data Additional data that was passed to the flashloan function.\n    function onBatchFlashLoan(\n        address sender,\n        IERC20[] calldata tokens,\n        uint256[] calldata amounts,\n        uint256[] calldata fees,\n        bytes calldata data\n    ) external;\n}\n\ninterface IBentoBoxV1 {\n    function balanceOf(IERC20, address) external view returns (uint256);\n\n    function batch(bytes[] calldata calls, bool revertOnFail) external payable returns (bool[] memory successes, bytes[] memory results);\n\n    function batchFlashLoan(\n        IBatchFlashBorrower borrower,\n        address[] calldata receivers,\n        IERC20[] calldata tokens,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n\n    function claimOwnership() external;\n\n    function flashLoan(IFlashBorrower borrower, address receiver, IERC20 token, uint256 amount, bytes calldata data) external;\n\n    function deploy(address masterContract, bytes calldata data, bool useCreate2) external payable returns (address);\n\n    function deposit(\n        IERC20 token_,\n        address from,\n        address to,\n        uint256 amount,\n        uint256 share\n    ) external payable returns (uint256 amountOut, uint256 shareOut);\n\n    function harvest(IERC20 token, bool balance, uint256 maxChangeAmount) external;\n\n    function masterContractApproved(address, address) external view returns (bool);\n\n    function masterContractOf(address) external view returns (address);\n\n    function nonces(address) external view returns (uint256);\n\n    function owner() external view returns (address);\n\n    function pendingOwner() external view returns (address);\n\n    function pendingStrategy(IERC20) external view returns (IStrategy);\n\n    function permitToken(IERC20 token, address from, address to, uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    function registerProtocol() external;\n\n    function setMasterContractApproval(address user, address masterContract, bool approved, uint8 v, bytes32 r, bytes32 s) external;\n\n    function setStrategy(IERC20 token, IStrategy newStrategy) external;\n\n    function setStrategyTargetPercentage(IERC20 token, uint64 targetPercentage_) external;\n\n    function strategy(IERC20) external view returns (IStrategy);\n\n    function strategyData(IERC20) external view returns (uint64 strategyStartDate, uint64 targetPercentage, uint128 balance);\n\n    function toAmount(IERC20 token, uint256 share, bool roundUp) external view returns (uint256 amount);\n\n    function toShare(IERC20 token, uint256 amount, bool roundUp) external view returns (uint256 share);\n\n    function totals(IERC20) external view returns (Rebase memory totals_);\n\n    function transfer(IERC20 token, address from, address to, uint256 share) external;\n\n    function transferMultiple(IERC20 token, address from, address[] calldata tos, uint256[] calldata shares) external;\n\n    function transferOwnership(address newOwner, bool direct, bool renounce) external;\n\n    function whitelistMasterContract(address masterContract, bool approved) external;\n\n    function whitelistedMasterContracts(address) external view returns (bool);\n\n    function withdraw(\n        IERC20 token_,\n        address from,\n        address to,\n        uint256 amount,\n        uint256 share\n    ) external returns (uint256 amountOut, uint256 shareOut);\n}\n\ninterface IBentoBoxLite {\n    function deposit(\n        address token_,\n        address from,\n        address to,\n        uint256 amount,\n        uint256 share\n    ) external payable returns (uint256 amountOut, uint256 shareOut);\n\n    function withdraw(\n        address token_,\n        address from,\n        address to,\n        uint256 amount,\n        uint256 share\n    ) external returns (uint256 amountOut, uint256 shareOut);\n\n    function balanceOf(address, address) external view returns (uint256);\n\n    function toAmount(address token, uint256 share, bool roundUp) external view returns (uint256 amount);\n\n    function toShare(address token, uint256 amount, bool roundUp) external view returns (uint256 share);\n\n    function transfer(address token, address from, address to, uint256 share) external;\n}\n"
      },
      "src/interfaces/ICauldronV2.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\nimport {IERC20} from \"@BoringSolidity/interfaces/IERC20.sol\";\nimport {Rebase} from \"@BoringSolidity/libraries/BoringRebase.sol\";\nimport {IOracle} from \"/interfaces/IOracle.sol\";\n\ninterface ICauldronV2 {\n    function oracle() external view returns (IOracle);\n\n    function oracleData() external view returns (bytes memory);\n\n    function accrueInfo() external view returns (uint64, uint128, uint64);\n\n    function BORROW_OPENING_FEE() external view returns (uint256);\n\n    function COLLATERIZATION_RATE() external view returns (uint256);\n\n    function LIQUIDATION_MULTIPLIER() external view returns (uint256);\n\n    function totalCollateralShare() external view returns (uint256);\n\n    function bentoBox() external view returns (address);\n\n    function feeTo() external view returns (address);\n\n    function masterContract() external view returns (ICauldronV2);\n\n    function collateral() external view returns (IERC20);\n\n    function setFeeTo(address newFeeTo) external;\n\n    function accrue() external;\n\n    function totalBorrow() external view returns (Rebase memory);\n\n    function userBorrowPart(address account) external view returns (uint256);\n\n    function userCollateralShare(address account) external view returns (uint256);\n\n    function withdrawFees() external;\n\n    function cook(\n        uint8[] calldata actions,\n        uint256[] calldata values,\n        bytes[] calldata datas\n    ) external payable returns (uint256 value1, uint256 value2);\n\n    function addCollateral(address to, bool skim, uint256 share) external;\n\n    function removeCollateral(address to, uint256 share) external;\n\n    function borrow(address to, uint256 amount) external returns (uint256 part, uint256 share);\n\n    function repay(address to, bool skim, uint256 part) external returns (uint256 amount);\n\n    function reduceSupply(uint256 amount) external;\n\n    function magicInternetMoney() external view returns (IERC20);\n\n    function liquidate(address[] calldata users, uint256[] calldata maxBorrowParts, address to, address swapper) external;\n\n    function updateExchangeRate() external returns (bool updated, uint256 rate);\n\n    function exchangeRate() external view returns (uint256 rate);\n\n    function init(bytes calldata data) external payable;\n}\n"
      },
      "src/interfaces/ICauldronV3.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\nimport {ICauldronV2} from \"/interfaces/ICauldronV2.sol\";\n\ninterface ICauldronV3 is ICauldronV2 {\n    function borrowLimit() external view returns (uint128 total, uint128 borrowPartPerAddres);\n\n    function changeInterestRate(uint64 newInterestRate) external;\n\n    function changeBorrowLimit(uint128 newBorrowLimit, uint128 perAddressPart) external;\n\n    function liquidate(\n        address[] calldata users,\n        uint256[] calldata maxBorrowParts,\n        address to,\n        address swapper,\n        bytes calldata swapperData\n    ) external;\n}\n"
      },
      "src/libraries/MathLib.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\nlibrary MathLib {\n    function max(uint256[] memory values) internal pure returns (uint256) {\n        uint256 maxValue = values[0];\n        for (uint256 i = 1; i < values.length; i++) {\n            if (values[i] > maxValue) {\n                maxValue = values[i];\n            }\n        }\n        return maxValue;\n    }\n\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    function min(uint256[] memory values) internal pure returns (uint256) {\n        uint256 minValue = values[0];\n        for (uint256 i = 1; i < values.length; i++) {\n            if (values[i] < minValue) {\n                minValue = values[i];\n            }\n        }\n        return minValue;\n    }\n\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    function subWithZeroFloor(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a - b : 0;\n    }\n}\n"
      },
      "src/libraries/CauldronLib.sol": {
        "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\nimport {IERC20} from \"@BoringSolidity/interfaces/IERC20.sol\";\nimport {RebaseLibrary, Rebase} from \"@BoringSolidity/libraries/BoringRebase.sol\";\nimport {BoringERC20} from \"@BoringSolidity/libraries/BoringERC20.sol\";\nimport {IBentoBoxV1} from \"/interfaces/IBentoBoxV1.sol\";\nimport {ICauldronV2} from \"/interfaces/ICauldronV2.sol\";\nimport {ICauldronV3} from \"/interfaces/ICauldronV3.sol\";\nimport {ICauldronV4} from \"/interfaces/ICauldronV4.sol\";\nimport {IOracle} from \"/interfaces/IOracle.sol\";\nimport {MathLib} from \"/libraries/MathLib.sol\";\n\nlibrary CauldronLib {\n    using BoringERC20 for IERC20;\n    using RebaseLibrary for Rebase;\n\n    uint256 internal constant EXCHANGE_RATE_PRECISION = 1e18;\n    uint256 internal constant BPS_PRECISION = 1e4;\n    uint256 internal constant COLLATERIZATION_RATE_PRECISION = 1e5;\n    uint256 internal constant LIQUIDATION_MULTIPLIER_PRECISION = 1e5;\n    uint256 internal constant DISTRIBUTION_PART = 10;\n    uint256 internal constant DISTRIBUTION_PRECISION = 100;\n\n    /// @dev example: 200 is 2% interests\n    function getInterestPerSecond(uint256 interestBips) internal pure returns (uint64 interestsPerSecond) {\n        return uint64((interestBips * 316880878) / 100); // 316880878 is the precomputed integral part of 1e18 / (36525 * 3600 * 24)\n    }\n\n    function getInterestPerYearFromInterestPerSecond(uint64 interestPerSecond) internal pure returns (uint64 interestPerYearBips) {\n        return (interestPerSecond * 100) / 316880878;\n    }\n\n    function getUserBorrowAmount(ICauldronV2 cauldron, address user) internal view returns (uint256 borrowAmount) {\n        Rebase memory totalBorrow = getTotalBorrowWithAccruedInterests(cauldron);\n        return (cauldron.userBorrowPart(user) * totalBorrow.elastic) / totalBorrow.base;\n    }\n\n    // total borrow with on-fly accrued interests\n    function getTotalBorrowWithAccruedInterests(ICauldronV2 cauldron) internal view returns (Rebase memory totalBorrow) {\n        totalBorrow = cauldron.totalBorrow();\n        (uint64 lastAccrued, , uint64 INTEREST_PER_SECOND) = cauldron.accrueInfo();\n        uint256 elapsedTime = block.timestamp - lastAccrued;\n\n        if (elapsedTime != 0 && totalBorrow.base != 0) {\n            totalBorrow.elastic = totalBorrow.elastic + uint128((uint256(totalBorrow.elastic) * INTEREST_PER_SECOND * elapsedTime) / 1e18);\n        }\n    }\n\n    function getOracleExchangeRate(ICauldronV2 cauldron) internal view returns (uint256) {\n        IOracle oracle = IOracle(cauldron.oracle());\n        bytes memory oracleData = cauldron.oracleData();\n        return oracle.peekSpot(oracleData);\n    }\n\n    function getUserCollateral(ICauldronV2 cauldron, address account) internal view returns (uint256 amount, uint256 value) {\n        IBentoBoxV1 bentoBox = IBentoBoxV1(cauldron.bentoBox());\n        uint256 share = cauldron.userCollateralShare(account);\n\n        amount = bentoBox.toAmount(cauldron.collateral(), share, false);\n        value = (amount * EXCHANGE_RATE_PRECISION) / getOracleExchangeRate(cauldron);\n    }\n\n    function getUserPositionInfo(\n        ICauldronV2 cauldron,\n        address account\n    )\n        internal\n        view\n        returns (\n            uint256 ltvBps,\n            uint256 healthFactor,\n            uint256 borrowValue,\n            uint256 collateralValue,\n            uint256 liquidationPrice,\n            uint256 collateralAmount\n        )\n    {\n        (collateralAmount, collateralValue) = getUserCollateral(cauldron, account);\n\n        borrowValue = getUserBorrowAmount(cauldron, account);\n\n        if (collateralValue > 0) {\n            ltvBps = (borrowValue * BPS_PRECISION) / collateralValue;\n            uint256 COLLATERALIZATION_RATE = cauldron.COLLATERIZATION_RATE(); // 1e5 precision\n\n            // example with WBTC (8 decimals)\n            // 18 + 8 + 5 - 5 - 8 - 10 = 8 decimals\n            IERC20 collateral = cauldron.collateral();\n            uint256 collateralPrecision = 10 ** collateral.safeDecimals();\n\n            liquidationPrice =\n                (borrowValue * collateralPrecision ** 2 * 1e5) /\n                COLLATERALIZATION_RATE /\n                collateralAmount /\n                EXCHANGE_RATE_PRECISION;\n\n            healthFactor = MathLib.subWithZeroFloor(\n                EXCHANGE_RATE_PRECISION,\n                (EXCHANGE_RATE_PRECISION * liquidationPrice * getOracleExchangeRate(cauldron)) / collateralPrecision ** 2\n            );\n        }\n    }\n\n    /// @notice the liquidator will get \"MIM borrowPart\" worth of collateral + liquidation fee incentive but borrowPart needs to be adjusted to take in account\n    /// the sSpell distribution taken off the liquidation fee. This function takes in account the bad debt repayment in case\n    /// the borrowPart give less collateral than it should.\n    /// @param cauldron Cauldron contract\n    /// @param account Account to liquidate\n    /// @param borrowPart Amount of MIM debt to liquidate\n    /// @return collateralAmount Amount of collateral that the liquidator will receive\n    /// @return adjustedBorrowPart Adjusted borrowPart to take in account position with bad debt where the\n    ///                            borrowPart give out more collateral than what the user has.\n    /// @return requiredMim MIM amount that the liquidator will need to pay back to get the collateralShare\n    function getLiquidationCollateralAndBorrowAmount(\n        ICauldronV2 cauldron,\n        address account,\n        uint256 borrowPart\n    ) internal view returns (uint256 collateralAmount, uint256 adjustedBorrowPart, uint256 requiredMim) {\n        uint256 exchangeRate = getOracleExchangeRate(cauldron);\n        Rebase memory totalBorrow = getTotalBorrowWithAccruedInterests(cauldron);\n        IBentoBoxV1 box = IBentoBoxV1(cauldron.bentoBox());\n        uint256 collateralShare = cauldron.userCollateralShare(account);\n        IERC20 collateral = cauldron.collateral();\n\n        // cap to the maximum amount of debt that can be liquidated in case the cauldron has bad debt\n        {\n            Rebase memory bentoBoxTotals = box.totals(collateral);\n\n            // how much debt can be liquidated\n            uint256 maxBorrowPart = (bentoBoxTotals.toElastic(collateralShare, false) * 1e23) /\n                (cauldron.LIQUIDATION_MULTIPLIER() * exchangeRate);\n            maxBorrowPart = totalBorrow.toBase(maxBorrowPart, false);\n\n            if (borrowPart > maxBorrowPart) {\n                borrowPart = maxBorrowPart;\n            }\n        }\n\n        // convert borrowPart to debt\n        requiredMim = totalBorrow.toElastic(borrowPart, false);\n\n        // convert borrowPart to collateralShare\n        {\n            Rebase memory bentoBoxTotals = box.totals(collateral);\n\n            // how much collateral share the liquidator will get from the given borrow amount\n            collateralShare = bentoBoxTotals.toBase(\n                (requiredMim * cauldron.LIQUIDATION_MULTIPLIER() * exchangeRate) /\n                    (LIQUIDATION_MULTIPLIER_PRECISION * EXCHANGE_RATE_PRECISION),\n                false\n            );\n            collateralAmount = box.toAmount(collateral, collateralShare, false);\n        }\n\n        // add the sSpell distribution part\n        {\n            requiredMim +=\n                ((((requiredMim * cauldron.LIQUIDATION_MULTIPLIER()) / LIQUIDATION_MULTIPLIER_PRECISION) - requiredMim) *\n                    DISTRIBUTION_PART) /\n                DISTRIBUTION_PRECISION;\n\n            IERC20 mim = cauldron.magicInternetMoney();\n\n            // convert back and forth to amount to compensate for rounded up toShare conversion inside `liquidate`\n            requiredMim = box.toAmount(mim, box.toShare(mim, requiredMim, true), true);\n        }\n\n        adjustedBorrowPart = borrowPart;\n    }\n\n    function isSolvent(ICauldronV2 cauldron, address account) internal view returns (bool) {\n        IBentoBoxV1 bentoBox = IBentoBoxV1(cauldron.bentoBox());\n        Rebase memory totalBorrow = getTotalBorrowWithAccruedInterests(cauldron);\n        uint256 exchangeRate = getOracleExchangeRate(cauldron);\n        IERC20 collateral = cauldron.collateral();\n        uint256 COLLATERIZATION_RATE = cauldron.COLLATERIZATION_RATE();\n        uint256 collateralShare = cauldron.userCollateralShare(account);\n        uint256 borrowPart = cauldron.userBorrowPart(account);\n\n        if (borrowPart == 0) {\n            return true;\n        } else if (collateralShare == 0) {\n            return false;\n        } else {\n            return\n                bentoBox.toAmount(\n                    collateral,\n                    (collateralShare * (EXCHANGE_RATE_PRECISION / COLLATERIZATION_RATE_PRECISION)) * COLLATERIZATION_RATE,\n                    false\n                ) >= (borrowPart * totalBorrow.elastic * exchangeRate) / totalBorrow.base;\n        }\n    }\n\n    function getCollateralPrice(ICauldronV2 cauldron) internal view returns (uint256) {\n        IERC20 collateral = cauldron.collateral();\n        uint256 collateralPrecision = 10 ** collateral.safeDecimals();\n        return (collateralPrecision * collateralPrecision) / getOracleExchangeRate(cauldron);\n    }\n\n    function getAvailableSkim(ICauldronV2 cauldron) internal view returns (uint256) {\n        return IBentoBoxV1(cauldron.bentoBox()).balanceOf(IERC20(cauldron.collateral()), msg.sender) - cauldron.totalCollateralShare();\n    }\n\n    function decodeInitData(\n        bytes calldata data\n    )\n        internal\n        pure\n        returns (\n            address collateral,\n            address oracle,\n            bytes memory oracleData,\n            uint64 INTEREST_PER_SECOND,\n            uint256 LIQUIDATION_MULTIPLIER,\n            uint256 COLLATERIZATION_RATE,\n            uint256 BORROW_OPENING_FEE\n        )\n    {\n        (collateral, oracle, oracleData, INTEREST_PER_SECOND, LIQUIDATION_MULTIPLIER, COLLATERIZATION_RATE, BORROW_OPENING_FEE) = abi\n            .decode(data, (address, address, bytes, uint64, uint256, uint256, uint256));\n    }\n}\n"
      },
      "dependencies/BoringSolidity-1.0.0/contracts/libraries/BoringRebase.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport {BoringMath, BoringMath128} from \"./BoringMath.sol\";\n\nstruct Rebase {\n    uint128 elastic;\n    uint128 base;\n}\n\n/// @notice A rebasing library using overflow-/underflow-safe math.\nlibrary RebaseLibrary {\n    using BoringMath for uint256;\n    using BoringMath128 for uint128;\n\n    /// @notice Calculates the base value in relationship to `elastic` and `total`.\n    function toBase(\n        Rebase memory total,\n        uint256 elastic,\n        bool roundUp\n    ) internal pure returns (uint256 base) {\n        if (total.elastic == 0) {\n            base = elastic;\n        } else {\n            base = (elastic * total.base) / total.elastic;\n            if (roundUp && (base * total.elastic) / total.base < elastic) {\n                base++;\n            }\n        }\n    }\n\n    /// @notice Calculates the elastic value in relationship to `base` and `total`.\n    function toElastic(\n        Rebase memory total,\n        uint256 base,\n        bool roundUp\n    ) internal pure returns (uint256 elastic) {\n        if (total.base == 0) {\n            elastic = base;\n        } else {\n            elastic = (base * total.elastic) / total.base;\n            if (roundUp && (elastic * total.base) / total.elastic < base) {\n                elastic++;\n            }\n        }\n    }\n\n    /// @notice Add `elastic` to `total` and doubles `total.base`.\n    /// @return (Rebase) The new total.\n    /// @return base in relationship to `elastic`.\n    function add(\n        Rebase memory total,\n        uint256 elastic,\n        bool roundUp\n    ) internal pure returns (Rebase memory, uint256 base) {\n        base = toBase(total, elastic, roundUp);\n        total.elastic += elastic.to128();\n        total.base += base.to128();\n        return (total, base);\n    }\n\n    /// @notice Sub `base` from `total` and update `total.elastic`.\n    /// @return (Rebase) The new total.\n    /// @return elastic in relationship to `base`.\n    function sub(\n        Rebase memory total,\n        uint256 base,\n        bool roundUp\n    ) internal pure returns (Rebase memory, uint256 elastic) {\n        elastic = toElastic(total, base, roundUp);\n        total.elastic -= elastic.to128();\n        total.base -= base.to128();\n        return (total, elastic);\n    }\n\n    /// @notice Add `elastic` and `base` to `total`.\n    function add(\n        Rebase memory total,\n        uint256 elastic,\n        uint256 base\n    ) internal pure returns (Rebase memory) {\n        total.elastic += elastic.to128();\n        total.base += base.to128();\n        return total;\n    }\n\n    /// @notice Subtract `elastic` and `base` to `total`.\n    function sub(\n        Rebase memory total,\n        uint256 elastic,\n        uint256 base\n    ) internal pure returns (Rebase memory) {\n        total.elastic -= elastic.to128();\n        total.base -= base.to128();\n        return total;\n    }\n\n    /// @notice Add `elastic` to `total` and update storage.\n    /// @return newElastic Returns updated `elastic`.\n    function addElastic(Rebase storage total, uint256 elastic) internal returns (uint256 newElastic) {\n        newElastic = total.elastic += elastic.to128();\n    }\n\n    /// @notice Subtract `elastic` from `total` and update storage.\n    /// @return newElastic Returns updated `elastic`.\n    function subElastic(Rebase storage total, uint256 elastic) internal returns (uint256 newElastic) {\n        newElastic = total.elastic -= elastic.to128();\n    }\n}\n"
      },
      "src/interfaces/IStrategy.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\ninterface IStrategy {\n    function skim(uint256 amount) external;\n\n    function harvest(uint256 balance, address sender) external returns (int256 amountAdded);\n\n    function withdraw(uint256 amount) external returns (uint256 actualAmount);\n\n    function exit(uint256 balance) external returns (int256 amountAdded);\n}\n"
      },
      "src/interfaces/IOracle.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\ninterface IOracle {\n    function decimals() external view returns (uint8);\n\n    function get(bytes calldata data) external returns (bool success, uint256 rate);\n\n    function peek(bytes calldata data) external view returns (bool success, uint256 rate);\n\n    function peekSpot(bytes calldata data) external view returns (uint256 rate);\n\n    function symbol(bytes calldata data) external view returns (string memory);\n\n    function name(bytes calldata data) external view returns (string memory);\n}\n"
      },
      "dependencies/BoringSolidity-1.0.0/contracts/libraries/BoringERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport {IERC20} from \"../interfaces/IERC20.sol\";\n\n// solhint-disable avoid-low-level-calls\n\nlibrary BoringERC20 {\n    bytes4 private constant SIG_SYMBOL = 0x95d89b41; // symbol()\n    bytes4 private constant SIG_NAME = 0x06fdde03; // name()\n    bytes4 private constant SIG_DECIMALS = 0x313ce567; // decimals()\n    bytes4 private constant SIG_BALANCE_OF = 0x70a08231; // balanceOf(address)\n    bytes4 private constant SIG_TOTALSUPPLY = 0x18160ddd; // balanceOf(address)\n    bytes4 private constant SIG_TRANSFER = 0xa9059cbb; // transfer(address,uint256)\n    bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd; // transferFrom(address,address,uint256)\n\n    function returnDataToString(bytes memory data) internal pure returns (string memory) {\n        if (data.length >= 64) {\n            return abi.decode(data, (string));\n        } else if (data.length == 32) {\n            uint8 i = 0;\n            while (i < 32 && data[i] != 0) {\n                i++;\n            }\n            bytes memory bytesArray = new bytes(i);\n            for (i = 0; i < 32 && data[i] != 0; i++) {\n                bytesArray[i] = data[i];\n            }\n            return string(bytesArray);\n        } else {\n            return \"???\";\n        }\n    }\n\n    /// @notice Provides a safe ERC20.symbol version which returns '???' as fallback string.\n    /// @param token The address of the ERC-20 token contract.\n    /// @return (string) Token symbol.\n    function safeSymbol(IERC20 token) internal view returns (string memory) {\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_SYMBOL));\n        return success ? returnDataToString(data) : \"???\";\n    }\n\n    /// @notice Provides a safe ERC20.name version which returns '???' as fallback string.\n    /// @param token The address of the ERC-20 token contract.\n    /// @return (string) Token name.\n    function safeName(IERC20 token) internal view returns (string memory) {\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_NAME));\n        return success ? returnDataToString(data) : \"???\";\n    }\n\n    /// @notice Provides a safe ERC20.decimals version which returns '18' as fallback value.\n    /// @param token The address of the ERC-20 token contract.\n    /// @return (uint8) Token decimals.\n    function safeDecimals(IERC20 token) internal view returns (uint8) {\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_DECIMALS));\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\n    }\n\n    /// @notice Provides a gas-optimized balance check to avoid a redundant extcodesize check in addition to the returndatasize check.\n    /// @param token The address of the ERC-20 token.\n    /// @param to The address of the user to check.\n    /// @return amount The token amount.\n    function safeBalanceOf(IERC20 token, address to) internal view returns (uint256 amount) {\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_BALANCE_OF, to));\n        require(success && data.length >= 32, \"BoringERC20: BalanceOf failed\");\n        amount = abi.decode(data, (uint256));\n    }\n\n    /// @notice Provides a gas-optimized totalSupply to avoid a redundant extcodesize check in addition to the returndatasize check.\n    /// @param token The address of the ERC-20 token.\n    /// @return totalSupply The token totalSupply.\n    function safeTotalSupply(IERC20 token) internal view returns (uint256 totalSupply) {\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_TOTALSUPPLY));\n        require(success && data.length >= 32, \"BoringERC20: totalSupply failed\");\n        totalSupply = abi.decode(data, (uint256));\n    }\n\n    /// @notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\n    /// Reverts on a failed transfer.\n    /// @param token The address of the ERC-20 token.\n    /// @param to Transfer tokens to.\n    /// @param amount The token amount.\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 amount\n    ) internal {\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER, to, amount));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"BoringERC20: Transfer failed\");\n    }\n\n    /// @notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\n    /// Reverts on a failed transfer.\n    /// @param token The address of the ERC-20 token.\n    /// @param from Transfer tokens from.\n    /// @param to Transfer tokens to.\n    /// @param amount The token amount.\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 amount\n    ) internal {\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"BoringERC20: TransferFrom failed\");\n    }\n}\n"
      },
      "src/interfaces/ICauldronV4.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\nimport {ICauldronV3} from \"/interfaces/ICauldronV3.sol\";\n\ninterface ICauldronV4 is ICauldronV3 {\n    function setBlacklistedCallee(address callee, bool blacklisted) external;\n\n    function blacklistedCallees(address callee) external view returns (bool);\n\n    function isSolvent(address user) external view returns (bool);\n}\n"
      },
      "dependencies/BoringSolidity-1.0.0/contracts/libraries/BoringMath.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\nlibrary BoringMath {\n    error ErrOverflow();\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    function to32(uint256 a) internal pure returns (uint32) {\n        if (a > type(uint32).max) {\n            revert ErrOverflow();\n        }\n        return uint32(a);\n    }\n\n    function to40(uint256 a) internal pure returns (uint40) {\n        if (a > type(uint40).max) {\n            revert ErrOverflow();\n        }\n        return uint40(a);\n    }\n\n    function to64(uint256 a) internal pure returns (uint64) {\n        if (a > type(uint64).max) {\n            revert ErrOverflow();\n        }\n        return uint64(a);\n    }\n\n    function to112(uint256 a) internal pure returns (uint112) {\n        if (a > type(uint112).max) {\n            revert ErrOverflow();\n        }\n        return uint112(a);\n    }\n\n    function to128(uint256 a) internal pure returns (uint128) {\n        if (a > type(uint128).max) {\n            revert ErrOverflow();\n        }\n        return uint128(a);\n    }\n\n    function to208(uint256 a) internal pure returns (uint208) {\n        if (a > type(uint208).max) {\n            revert ErrOverflow();\n        }\n        return uint208(a);\n    }\n\n    function to216(uint256 a) internal pure returns (uint216) {\n        if (a > type(uint216).max) {\n            revert ErrOverflow();\n        }\n        return uint216(a);\n    }\n\n    function to224(uint256 a) internal pure returns (uint224) {\n        if (a > type(uint224).max) {\n            revert ErrOverflow();\n        }\n        return uint224(a);\n    }\n}\n\nlibrary BoringMath32 {\n    function add(uint32 a, uint32 b) internal pure returns (uint32) {\n        return a + b;\n    }\n\n    function sub(uint32 a, uint32 b) internal pure returns (uint32) {\n        return a - b;\n    }\n\n    function mul(uint32 a, uint32 b) internal pure returns (uint32) {\n        return a * b;\n    }\n\n    function div(uint32 a, uint32 b) internal pure returns (uint32) {\n        return a / b;\n    }\n}\n\nlibrary BoringMath64 {\n    function add(uint64 a, uint64 b) internal pure returns (uint64) {\n        return a + b;\n    }\n\n    function sub(uint64 a, uint64 b) internal pure returns (uint64) {\n        return a - b;\n    }\n\n    function mul(uint64 a, uint64 b) internal pure returns (uint64) {\n        return a * b;\n    }\n\n    function div(uint64 a, uint64 b) internal pure returns (uint64) {\n        return a / b;\n    }\n}\n\nlibrary BoringMath112 {\n    function add(uint112 a, uint112 b) internal pure returns (uint112) {\n        return a + b;\n    }\n\n    function sub(uint112 a, uint112 b) internal pure returns (uint112) {\n        return a - b;\n    }\n\n    function mul(uint112 a, uint112 b) internal pure returns (uint112) {\n        return a * b;\n    }\n\n    function div(uint112 a, uint112 b) internal pure returns (uint112) {\n        return a / b;\n    }\n}\n\nlibrary BoringMath128 {\n    function add(uint128 a, uint128 b) internal pure returns (uint128) {\n        return a + b;\n    }\n\n    function sub(uint128 a, uint128 b) internal pure returns (uint128) {\n        return a - b;\n    }\n\n    function mul(uint128 a, uint128 b) internal pure returns (uint128) {\n        return a * b;\n    }\n\n    function div(uint128 a, uint128 b) internal pure returns (uint128) {\n        return a / b;\n    }\n}\n\nlibrary BoringMath224 {\n    function add(uint224 a, uint224 b) internal pure returns (uint224) {\n        return a + b;\n    }\n\n    function sub(uint224 a, uint224 b) internal pure returns (uint224) {\n        return a - b;\n    }\n\n    function mul(uint224 a, uint224 b) internal pure returns (uint224) {\n        return a * b;\n    }\n\n    function div(uint224 a, uint224 b) internal pure returns (uint224) {\n        return a / b;\n    }\n}\n"
      }
    },
    "settings": {
      "remappings": [
        "/=src/",
        "forge-std/=dependencies/forge-std-1.9.5/src/",
        "halmos-cheatcodes/=dependencies/halmos-cheatcodes-3ca0e11/src/",
        "@openzeppelin/contracts/=dependencies/openzeppelin-contracts-5.0.2/contracts/",
        "@openzeppelin/contracts-upgradeable/=dependencies/openzeppelin-contracts-upgradeable-5.0.2/contracts/",
        "@BoringSolidity/=dependencies/BoringSolidity-1.0.0/contracts/",
        "@solady/=dependencies/solady-0.0.281/src/",
        "@solmate/=dependencies/solmate-6.2.0/src/",
        "@excessivelySafeCall/=dependencies/ExcessivelySafeCall-0.0.1/src/",
        "@safe-contracts/=dependencies/safe-contracts-1.3.0/contracts/",
        "@fuzzlib/=dependencies/fuzzlib-0.0.1/src/",
        "@abracadabra-oft-v1/=dependencies/abracadabra-oft-v1-0.0.1/src/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 400
      },
      "metadata": {
        "useLiteralContent": false,
        "bytecodeHash": "ipfs",
        "appendCBOR": true
      },
      "outputSelection": {
        "*": {
          "*": [
            "abi",
            "evm.bytecode.object",
            "evm.bytecode.sourceMap",
            "evm.bytecode.linkReferences",
            "evm.deployedBytecode.object",
            "evm.deployedBytecode.sourceMap",
            "evm.deployedBytecode.linkReferences",
            "evm.deployedBytecode.immutableReferences",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "evmVersion": "cancun",
      "viaIR": false,
      "libraries": {}
    }
  },
  "compiler": "0.8.28+commit.7893614a"
}