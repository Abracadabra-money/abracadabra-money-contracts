{
  "address": "0xabbD4a2b18aec5349E959c43102378C24aAb4Cfc",
  "abi": [
    {
      "type": "constructor",
      "inputs": [
        {
          "name": "_oft",
          "type": "address",
          "internalType": "contract ILzOFTV2"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "receive",
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "HUB_CHAINID",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "LZ_HUB_CHAINID",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint16",
          "internalType": "uint16"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "bridge",
      "inputs": [
        {
          "name": "amount",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "fee",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "gas",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "cauldronInfo",
      "inputs": [
        {
          "name": "cauldron",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "tuple",
          "internalType": "struct CauldronInfo",
          "components": [
            {
              "name": "cauldron",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "version",
              "type": "uint8",
              "internalType": "uint8"
            },
            {
              "name": "deprecated",
              "type": "bool",
              "internalType": "bool"
            }
          ]
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "cauldronInfosCount",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "distribute",
      "inputs": [
        {
          "name": "amount",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "estimateBridgingFee",
      "inputs": [
        {
          "name": "amount",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "fee",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "gas",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "execute",
      "inputs": [
        {
          "name": "to",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "value",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "data",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "outputs": [
        {
          "name": "result",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "feeBips",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint16",
          "internalType": "uint16"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "feeCollector",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "feeToOverrides",
      "inputs": [
        {
          "name": "cauldron",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "feeTo",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "initialize",
      "inputs": [
        {
          "name": "_owner",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "mim",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "mimProvider",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "oft",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "contract ILzOFTV2"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "operators",
      "inputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "owner",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "proxiableUUID",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "registry",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "contract CauldronRegistry"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "setFeeParameters",
      "inputs": [
        {
          "name": "_feeCollector",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "_feeBips",
          "type": "uint16",
          "internalType": "uint16"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "setFeeToOverride",
      "inputs": [
        {
          "name": "cauldron",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "feeTo",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "setMimProvider",
      "inputs": [
        {
          "name": "_mimProvider",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "setOperator",
      "inputs": [
        {
          "name": "operator",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "enable",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "setRegistry",
      "inputs": [
        {
          "name": "_registry",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "setStaking",
      "inputs": [
        {
          "name": "_staking",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "staking",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "contract IMultiRewardsStaking"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "transferOwnership",
      "inputs": [
        {
          "name": "newOwner",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "upgradeToAndCall",
      "inputs": [
        {
          "name": "newImplementation",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "data",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "outputs": [],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "withdraw",
      "inputs": [
        {
          "name": "cauldronsIndices",
          "type": "uint256[]",
          "internalType": "uint256[]"
        }
      ],
      "outputs": [
        {
          "name": "totalAmount",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "event",
      "name": "Initialized",
      "inputs": [
        {
          "name": "version",
          "type": "uint64",
          "indexed": false,
          "internalType": "uint64"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "LogFeeDistributed",
      "inputs": [
        {
          "name": "amount",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        },
        {
          "name": "userAmount",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        },
        {
          "name": "feeAmount",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "LogFeeParametersChanged",
      "inputs": [
        {
          "name": "previousFeeCollector",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "previousFeeAmount",
          "type": "uint16",
          "indexed": false,
          "internalType": "uint16"
        },
        {
          "name": "feeCollector",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "feeAmount",
          "type": "uint16",
          "indexed": false,
          "internalType": "uint16"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "LogFeeToOverrideChanged",
      "inputs": [
        {
          "name": "cauldron",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "previous",
          "type": "address",
          "indexed": false,
          "internalType": "address"
        },
        {
          "name": "current",
          "type": "address",
          "indexed": false,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "LogMimProviderChanged",
      "inputs": [
        {
          "name": "previous",
          "type": "address",
          "indexed": false,
          "internalType": "address"
        },
        {
          "name": "current",
          "type": "address",
          "indexed": false,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "LogMimTotalWithdrawn",
      "inputs": [
        {
          "name": "amount",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "LogMimWithdrawn",
      "inputs": [
        {
          "name": "box",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "amount",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "LogRegistryChanged",
      "inputs": [
        {
          "name": "previous",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "current",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "LogStakingChanged",
      "inputs": [
        {
          "name": "previous",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "current",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "OperatorChanged",
      "inputs": [
        {
          "name": "",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "",
          "type": "bool",
          "indexed": false,
          "internalType": "bool"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "OwnershipTransferred",
      "inputs": [
        {
          "name": "user",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "newOwner",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "Upgraded",
      "inputs": [
        {
          "name": "implementation",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "error",
      "name": "AddressEmptyCode",
      "inputs": [
        {
          "name": "target",
          "type": "address",
          "internalType": "address"
        }
      ]
    },
    {
      "type": "error",
      "name": "AddressInsufficientBalance",
      "inputs": [
        {
          "name": "account",
          "type": "address",
          "internalType": "address"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrInvalidChainId",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrInvalidFeeBips",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrInvalidFeeOperator",
      "inputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrInvalidFeeTo",
      "inputs": [
        {
          "name": "masterContract",
          "type": "address",
          "internalType": "address"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrNotEnoughNativeTokenToCoverFee",
      "inputs": []
    },
    {
      "type": "error",
      "name": "FailedInnerCall",
      "inputs": []
    },
    {
      "type": "error",
      "name": "InvalidInitialization",
      "inputs": []
    },
    {
      "type": "error",
      "name": "NotInitializing",
      "inputs": []
    },
    {
      "type": "error",
      "name": "Unauthorized",
      "inputs": []
    },
    {
      "type": "error",
      "name": "UnauthorizedCallContext",
      "inputs": []
    },
    {
      "type": "error",
      "name": "UpgradeFailed",
      "inputs": []
    }
  ],
  "bytecode": "0x60e060405230608052348015610013575f5ffd5b506040516127b43803806127b483398101604081905261003291610179565b806001600160a01b031663fad045766040518163ffffffff1660e01b8152600401602060405180830381865afa15801561006e573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906100929190610179565b6001600160a01b0390811660a052811660c0526100ad6100b3565b5061019b565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000900460ff16156101035760405163f92ee8a960e01b815260040160405180910390fd5b80546001600160401b03908116146101625780546001600160401b0319166001600160401b0390811782556040519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50565b6001600160a01b0381168114610162575f5ffd5b5f60208284031215610189575f5ffd5b815161019481610165565b9392505050565b60805160a05160c05161257f6102355f395f81816103b60152818161062a015281816106cb0152818161083c015261087801525f81816103e90152818161081a01528181610bc901528181610bff01528181610cd801528181610d27015281816111ca015281816112f10152818161133301528181611446015281816115c4015261167901525f81816109810152610a62015261257f5ff3fe6080604052600436106101bd575f3560e01c80639f67679e116100f2578063d016bb0b11610092578063f2fde38b11610062578063f2fde38b14610560578063f3523b341461057f578063f9307b891461059e578063fbf5930e146105b2575f5ffd5b8063d016bb0b146104f4578063d22290a414610509578063dc47816514610522578063eacbb63f14610541575f5ffd5b8063b497efdf116100cd578063b497efdf1461045e578063b61d27f614610485578063c415b95c146104b1578063c4d66de8146104d5575f5ffd5b80639f67679e146103d8578063a91ee0dc1461040b578063b39a04061461042a575f5ffd5b8063558a72971161015d5780638ff39099116101385780638ff390991461034857806391c05b0b14610367578063983d95ce146103865780639b5215f6146103a5575f5ffd5b8063558a7297146102eb5780637b1039991461030a5780638da5cb5b14610329575f5ffd5b806339f9b3391161019857806339f9b339146102605780634cf088d91461027f5780634f1ef286146102b657806352d1902d146102c9575f5ffd5b806313e7c9d8146101c85780632ad39bf31461020b57806332a215881461023f575f5ffd5b366101c457005b5f5ffd5b3480156101d3575f5ffd5b506101f66101e2366004611fce565b60026020525f908152604090205460ff1681565b60405190151581526020015b60405180910390f35b348015610216575f5ffd5b5061022a610225366004611fe9565b610601565b60408051928352602083019190915201610202565b34801561024a575f5ffd5b5061025e610259366004612000565b610756565b005b34801561026b575f5ffd5b5061025e61027a366004611fce565b6108ec565b34801561028a575f5ffd5b5060065461029e906001600160a01b031681565b6040516001600160a01b039091168152602001610202565b61025e6102c436600461206e565b61097f565b3480156102d4575f5ffd5b506102dd610a5f565b604051908152602001610202565b3480156102f6575f5ffd5b5061025e6103053660046120cc565b610abc565b348015610315575f5ffd5b5060055461029e906001600160a01b031681565b348015610334575f5ffd5b5060015461029e906001600160a01b031681565b348015610353575f5ffd5b5061025e610362366004611fce565b610b44565b348015610372575f5ffd5b5061025e610381366004611fe9565b610c49565b348015610391575f5ffd5b506102dd6103a0366004612103565b610dd5565b3480156103b0575f5ffd5b5061029e7f000000000000000000000000000000000000000000000000000000000000000081565b3480156103e3575f5ffd5b5061029e7f000000000000000000000000000000000000000000000000000000000000000081565b348015610416575f5ffd5b5061025e610425366004611fce565b6117b6565b348015610435575f5ffd5b5061029e610444366004611fce565b60036020525f90815260409020546001600160a01b031681565b348015610469575f5ffd5b50610472606e81565b60405161ffff9091168152602001610202565b348015610490575f5ffd5b506104a461049f366004612174565b61183b565b60405161020291906121fa565b3480156104bc575f5ffd5b505f5461029e906201000090046001600160a01b031681565b3480156104e0575f5ffd5b5061025e6104ef366004611fce565b6118b2565b3480156104ff575f5ffd5b506102dd61a4b181565b348015610514575f5ffd5b505f546104729061ffff1681565b34801561052d575f5ffd5b5061025e61053c36600461220c565b6119d4565b34801561054c575f5ffd5b5061025e61055b366004612238565b611a83565b34801561056b575f5ffd5b5061025e61057a366004611fce565b611b73565b34801561058a575f5ffd5b5060045461029e906001600160a01b031681565b3480156105a9575f5ffd5b506102dd611be8565b3480156105bd575f5ffd5b506105d16105cc366004611fce565b611c58565b6040805182516001600160a01b0316815260208084015160ff169082015291810151151590820152606001610202565b60405163233f63d760e21b8152606e60048201525f602482018190529081906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690638cfd8f5c90604401602060405180830381865afa15801561066f573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610693919061226a565b60408051600160f01b60208201526022808201849052825180830390910181526042820192839052630d94982d60e21b9092529192507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169163365260b49161070f91606e91309189915f91604601612281565b6040805180830381865afa158015610729573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061074d91906122bc565b50939092509050565b335f9081526002602052604090205460ff1615801561078057506001546001600160a01b03163314155b1561079d576040516282b42960e81b815260040160405180910390fd5b478211156107be57604051630271b2c160e31b815260040160405180910390fd5b604080516060810182523081525f60208083018290528351600160f01b91810191909152602281018590529092820190604201604051602081830303815290604052815250905046600103610861576108616001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000086611ce6565b60405163695ef6bf60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063695ef6bf9085906108b8903090606e9082908b9089906004016122de565b5f604051808303818588803b1580156108cf575f5ffd5b505af11580156108e1573d5f5f3e3d5ffd5b505050505050505050565b6001546001600160a01b03163314610916576040516282b42960e81b815260040160405180910390fd5b600454604080516001600160a01b03928316815291831660208301527fd45d1b0ce63eac73f4ef003d3867028416758e4e7d8159348074394138fc5f7c910160405180910390a1600480546001600160a01b0319166001600160a01b0392909216919091179055565b7f00000000000000000000000000000000000000000000000000000000000000003081036109b457639f03a0265f526004601cfd5b6109bd84611d39565b8360601b60601c93506352d1902d6001527f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80602060016004601d895afa5114610a0f576355299b496001526004601dfd5b847fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b5f38a28490558115610a5957604051828482375f388483885af4610a57573d5f823e3d81fd5b505b50505050565b5f7f0000000000000000000000000000000000000000000000000000000000000000308114610a9557639f03a0265f526004601cfd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc91505090565b6001546001600160a01b03163314610ae6576040516282b42960e81b815260040160405180910390fd5b6001600160a01b0382165f81815260026020908152604091829020805460ff191685151590811790915591519182527f193de8d500b5cb7b720089b258a39e9c1d0b840019a73ae7c51c3f9101732b02910160405180910390a25050565b6001546001600160a01b03163314610b6e576040516282b42960e81b815260040160405180910390fd5b6006546040516001600160a01b038084169216907fb52469c877d844aee7879726017328e719dd3ce8e14024a2b972ed75658d60ce905f90a36006546001600160a01b031615610bf257600654610bf2906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811691165f611ce6565b610c276001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016825f19611ce6565b600680546001600160a01b0319166001600160a01b0392909216919091179055565b335f9081526002602052604090205460ff16158015610c7357506001546001600160a01b03163314155b15610c90576040516282b42960e81b815260040160405180910390fd5b61a4b14614610cb257604051632204e15160e01b815260040160405180910390fd5b5f5f610cbd83611d44565b90925090508015610d07575f54610d07906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116916201000090041683611d78565b8115610d8f5760065460405163b66503cf60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018590529091169063b66503cf906044015f604051808303815f87803b158015610d78575f5ffd5b505af1158015610d8a573d5f5f3e3d5ffd5b505050505b60408051848152602081018490529081018290527fdd9968841efafb8408f1d3ddf902ab92180d70018c4d0a5f376dbcdd3310da109060600160405180910390a1505050565b335f9081526002602052604081205460ff16158015610dff57506001546001600160a01b03163314155b15610e1c576040516282b42960e81b815260040160405180910390fd5b5f8267ffffffffffffffff811115610e3657610e36612351565b604051908082528060200260200182016040528015610e5f578160200160208202803683370190505b5090505f5b83811015611583576005545f906001600160a01b0316639507d39a878785818110610e9157610e91612365565b905060200201356040518263ffffffff1660e01b8152600401610eb691815260200190565b606060405180830381865afa158015610ed1573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610ef59190612389565b90505f815f01516001600160a01b031663cd446e226040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f37573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610f5b919061240a565b9050306001600160a01b0316816001600160a01b031663017e7e586040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fa3573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610fc7919061240a565b6001600160a01b031614610ffe57604051639b21b9f160e01b81526001600160a01b03821660048201526024015b60405180910390fd5b5f825f01516001600160a01b0316636b2ace876040518163ffffffff1660e01b8152600401602060405180830381865afa15801561103e573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611062919061240a565b9050825f01516001600160a01b031663f8ba4cff6040518163ffffffff1660e01b81526004015f604051808303815f87803b15801561109f575f5ffd5b505af11580156110b1573d5f5f3e3d5ffd5b505050505f836020015160ff1660010361113957835f01516001600160a01b031663b27c0e746040518163ffffffff1660e01b81526004016040805180830381865afa158015611103573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906111279190612452565b6001600160801b031691506111b99050565b6002846020015160ff16106111b957835f01516001600160a01b031663b27c0e746040518163ffffffff1660e01b8152600401606060405180830381865afa158015611187573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906111ab9190612483565b506001600160801b03169150505b8351604051633de222bb60e21b81527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03818116600484015292831660248301525f9285169163566231189190839063f7888aec90604401602060405180830381865afa158015611233573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611257919061226a565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201525f6044820152606401602060405180830381865afa1580156112a4573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906112c8919061226a565b9050808211156113c3575f6112dd82846124d7565b60045490915061131b906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811691168684611dc1565b855160405162ae511b60e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301528681166024830181905292166044820152606481018390525f60848201526302b9446c9060a40160408051808303815f875af115801561139b573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906113bf91906122bc565b5050505b845f01516001600160a01b031663476343ee6040518163ffffffff1660e01b81526004015f604051808303815f87803b1580156113fe575f5ffd5b505af1158015611410573d5f5f3e3d5ffd5b505086516001600160a01b039081165f9081526003602052604090205416915050801561154657604051636d289ce560e11b81527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b038181166004840152602483018690525f604484015286169163f18d03cc919030908590859063da5139ca90606401602060405180830381865afa1580156114b6573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906114da919061226a565b6040516001600160e01b031960e087901b1681526001600160a01b03948516600482015292841660248401529216604482015260648101919091526084015f604051808303815f87803b15801561152f575f5ffd5b505af1158015611541573d5f5f3e3d5ffd5b505050505b8388888151811061155957611559612365565b6001600160a01b0390921660209283029190910190910152505060019094019350610e6492505050565b505f5b815181101561177b575f8282815181106115a2576115a2612365565b6020908102919091010151604051633de222bb60e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301523060248301529091169063f7888aec90604401602060405180830381865afa158015611618573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061163c919061226a565b90508015611772575f83838151811061165757611657612365565b602090810291909101015160405163097da6d360e41b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152306024830181905260448301525f606483015260848201859052909116906397da6d309060a40160408051808303815f875af11580156116e1573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061170591906122bc565b50905061171281866124ea565b945083838151811061172657611726612365565b60200260200101516001600160a01b03167f41d6edb123172e606b3a3ed2a197ed259f8e5c2fdab57ff5ae3b6f89c387ff828260405161176891815260200190565b60405180910390a2505b50600101611586565b506040518281527fe36285dbbf07eb283608a6bbeed71201eafbeb7e384df268276cca93cbd9aafe9060200160405180910390a15092915050565b6001546001600160a01b031633146117e0576040516282b42960e81b815260040160405180910390fd5b6005546040516001600160a01b038084169216907fec10a16af385903532506d1567380fd8d93d880e8ed4bcacc42b0848e781406a905f90a3600580546001600160a01b0319166001600160a01b0392909216919091179055565b6001546060906001600160a01b03163314611868576040516282b42960e81b815260040160405180910390fd5b6118a98584848080601f0160208091040260200160405190810160405280939291908181526020018383808284375f92019190915250899250611e23915050565b95945050505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000810460ff16159067ffffffffffffffff165f811580156118fc5750825b90505f8267ffffffffffffffff1660011480156119185750303b155b905081158015611926575080155b156119445760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff19166001178555831561197857845468ff00000000000000001916680100000000000000001785555b61198186611ebe565b83156119cc57845468ff000000000000000019168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b505050505050565b6001546001600160a01b031633146119fe576040516282b42960e81b815260040160405180910390fd5b6001600160a01b038281165f8181526003602090815260409182902054825190851681529385169084015290917f647b220698f70cae125b2b8121de86df712a49573b43531708e706db3a138219910160405180910390a26001600160a01b039182165f90815260036020526040902080546001600160a01b03191691909216179055565b6001546001600160a01b03163314611ab057604051631120ac6d60e31b8152336004820152602401610ff5565b5f5461271061ffff9091161115611ada57604051637d941fcf60e11b815260040160405180910390fd5b5f546040805161ffff8084168252841660208201526001600160a01b038581169362010000900416917f3211c83a09d01653307dce8be31e51c79240be602c393a64e512de455a4dd423910160405180910390a35f805475ffffffffffffffffffffffffffffffffffffffffffff1916620100006001600160a01b03949094169390930261ffff19169290921761ffff91909116179055565b6001546001600160a01b03163314611b9d576040516282b42960e81b815260040160405180910390fd5b600180546001600160a01b0319166001600160a01b03831690811790915560405133907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a350565b60055460408051630fbdb69960e11b815290515f926001600160a01b031691631f7b6d329160048083019260209291908290030181865afa158015611c2f573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611c53919061226a565b905090565b604080516060810182525f80825260208201819052918101919091526005546040516330af0bbf60e21b81526001600160a01b0384811660048301529091169063c2bc2efc90602401606060405180830381865afa158015611cbc573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611ce09190612389565b92915050565b81601452806034526f095ea7b30000000000000000000000005f5260205f604460105f875af18060015f511416611d2f57803d853b151710611d2f57633e3f8f735f526004601cfd5b505f603452505050565b611d41611f09565b50565b5f8054819061271090611d5b9061ffff16856124fd565b611d659190612514565b9050611d7181846124d7565b9150915091565b81601452806034526fa9059cbb0000000000000000000000005f5260205f604460105f875af18060015f511416611d2f57803d853b151710611d2f576390b8ec185f526004601cfd5b60405181606052826040528360601b602c526f23b872dd000000000000000000000000600c5260205f6064601c5f895af18060015f511416611e1557803d873b151710611e1557637939f4245f526004601cfd5b505f60605260405250505050565b606081471015611e485760405163cd78605960e01b8152306004820152602401610ff5565b5f5f856001600160a01b03168486604051611e639190612533565b5f6040518083038185875af1925050503d805f8114611e9d576040519150601f19603f3d011682016040523d82523d5f602084013e611ea2565b606091505b5091509150611eb2868383611f35565b925050505b9392505050565b600180546001600160a01b0319166001600160a01b0383169081179091556040515f907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350565b6001546001600160a01b03163314611f33576040516282b42960e81b815260040160405180910390fd5b565b606082611f4a57611f4582611f91565b611eb7565b8151158015611f6157506001600160a01b0384163b155b15611f8a57604051639996b31560e01b81526001600160a01b0385166004820152602401610ff5565b5080611eb7565b805115611fa15780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b6001600160a01b0381168114611d41575f5ffd5b5f60208284031215611fde575f5ffd5b8135611eb781611fba565b5f60208284031215611ff9575f5ffd5b5035919050565b5f5f5f60608486031215612012575f5ffd5b505081359360208301359350604090920135919050565b5f5f83601f840112612039575f5ffd5b50813567ffffffffffffffff811115612050575f5ffd5b602083019150836020828501011115612067575f5ffd5b9250929050565b5f5f5f60408486031215612080575f5ffd5b833561208b81611fba565b9250602084013567ffffffffffffffff8111156120a6575f5ffd5b6120b286828701612029565b9497909650939450505050565b8015158114611d41575f5ffd5b5f5f604083850312156120dd575f5ffd5b82356120e881611fba565b915060208301356120f8816120bf565b809150509250929050565b5f5f60208385031215612114575f5ffd5b823567ffffffffffffffff81111561212a575f5ffd5b8301601f8101851361213a575f5ffd5b803567ffffffffffffffff811115612150575f5ffd5b8560208260051b8401011115612164575f5ffd5b6020919091019590945092505050565b5f5f5f5f60608587031215612187575f5ffd5b843561219281611fba565b935060208501359250604085013567ffffffffffffffff8111156121b4575f5ffd5b6121c087828801612029565b95989497509550505050565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b602081525f611eb760208301846121cc565b5f5f6040838503121561221d575f5ffd5b823561222881611fba565b915060208301356120f881611fba565b5f5f60408385031215612249575f5ffd5b823561225481611fba565b9150602083013561ffff811681146120f8575f5ffd5b5f6020828403121561227a575f5ffd5b5051919050565b61ffff86168152846020820152836040820152821515606082015260a060808201525f6122b160a08301846121cc565b979650505050505050565b5f5f604083850312156122cd575f5ffd5b505080516020909101519092909150565b6001600160a01b038616815261ffff8516602082015283604082015282606082015260a060808201526001600160a01b0382511660a08201526001600160a01b0360208301511660c08201525f6040830151606060e08401526123456101008401826121cc565b98975050505050505050565b634e487b7160e01b5f52604160045260245ffd5b634e487b7160e01b5f52603260045260245ffd5b8051612384816120bf565b919050565b5f606082840312801561239a575f5ffd5b506040516060810167ffffffffffffffff811182821017156123ca57634e487b7160e01b5f52604160045260245ffd5b60405282516123d881611fba565b8152602083015160ff811681146123ed575f5ffd5b60208201526123fe60408401612379565b60408201529392505050565b5f6020828403121561241a575f5ffd5b8151611eb781611fba565b805167ffffffffffffffff81168114612384575f5ffd5b80516001600160801b0381168114612384575f5ffd5b5f5f60408385031215612463575f5ffd5b61246c83612425565b915061247a6020840161243c565b90509250929050565b5f5f5f60608486031215612495575f5ffd5b61249e84612425565b92506124ac6020850161243c565b91506124ba60408501612425565b90509250925092565b634e487b7160e01b5f52601160045260245ffd5b81810381811115611ce057611ce06124c3565b80820180821115611ce057611ce06124c3565b8082028115828204841417611ce057611ce06124c3565b5f8261252e57634e487b7160e01b5f52601260045260245ffd5b500490565b5f82518060208501845e5f92019182525091905056fea26469706673582212206d5140f1bf7a994b7bd340daddc4a840a75e5b5dcec4ff9dd71e3e9ca4ae2db864736f6c634300081c0033",
  "args_data": "0x00000000000000000000000041d5a04b4e03dc27dc1f5c5a576ad2187bc601af",
  "tx_hash": "0xb44fc6a5b8dfc2c95f26aed192f4f819293be2c0ca263d96b10f11bf2fcd8780",
  "args": [
    "0x41D5A04B4e03dC27dC1f5C5A576Ad2187bc601Af"
  ],
  "data": "0x60e060405230608052348015610013575f5ffd5b506040516127b43803806127b483398101604081905261003291610179565b806001600160a01b031663fad045766040518163ffffffff1660e01b8152600401602060405180830381865afa15801561006e573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906100929190610179565b6001600160a01b0390811660a052811660c0526100ad6100b3565b5061019b565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000900460ff16156101035760405163f92ee8a960e01b815260040160405180910390fd5b80546001600160401b03908116146101625780546001600160401b0319166001600160401b0390811782556040519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50565b6001600160a01b0381168114610162575f5ffd5b5f60208284031215610189575f5ffd5b815161019481610165565b9392505050565b60805160a05160c05161257f6102355f395f81816103b60152818161062a015281816106cb0152818161083c015261087801525f81816103e90152818161081a01528181610bc901528181610bff01528181610cd801528181610d27015281816111ca015281816112f10152818161133301528181611446015281816115c4015261167901525f81816109810152610a62015261257f5ff3fe6080604052600436106101bd575f3560e01c80639f67679e116100f2578063d016bb0b11610092578063f2fde38b11610062578063f2fde38b14610560578063f3523b341461057f578063f9307b891461059e578063fbf5930e146105b2575f5ffd5b8063d016bb0b146104f4578063d22290a414610509578063dc47816514610522578063eacbb63f14610541575f5ffd5b8063b497efdf116100cd578063b497efdf1461045e578063b61d27f614610485578063c415b95c146104b1578063c4d66de8146104d5575f5ffd5b80639f67679e146103d8578063a91ee0dc1461040b578063b39a04061461042a575f5ffd5b8063558a72971161015d5780638ff39099116101385780638ff390991461034857806391c05b0b14610367578063983d95ce146103865780639b5215f6146103a5575f5ffd5b8063558a7297146102eb5780637b1039991461030a5780638da5cb5b14610329575f5ffd5b806339f9b3391161019857806339f9b339146102605780634cf088d91461027f5780634f1ef286146102b657806352d1902d146102c9575f5ffd5b806313e7c9d8146101c85780632ad39bf31461020b57806332a215881461023f575f5ffd5b366101c457005b5f5ffd5b3480156101d3575f5ffd5b506101f66101e2366004611fce565b60026020525f908152604090205460ff1681565b60405190151581526020015b60405180910390f35b348015610216575f5ffd5b5061022a610225366004611fe9565b610601565b60408051928352602083019190915201610202565b34801561024a575f5ffd5b5061025e610259366004612000565b610756565b005b34801561026b575f5ffd5b5061025e61027a366004611fce565b6108ec565b34801561028a575f5ffd5b5060065461029e906001600160a01b031681565b6040516001600160a01b039091168152602001610202565b61025e6102c436600461206e565b61097f565b3480156102d4575f5ffd5b506102dd610a5f565b604051908152602001610202565b3480156102f6575f5ffd5b5061025e6103053660046120cc565b610abc565b348015610315575f5ffd5b5060055461029e906001600160a01b031681565b348015610334575f5ffd5b5060015461029e906001600160a01b031681565b348015610353575f5ffd5b5061025e610362366004611fce565b610b44565b348015610372575f5ffd5b5061025e610381366004611fe9565b610c49565b348015610391575f5ffd5b506102dd6103a0366004612103565b610dd5565b3480156103b0575f5ffd5b5061029e7f000000000000000000000000000000000000000000000000000000000000000081565b3480156103e3575f5ffd5b5061029e7f000000000000000000000000000000000000000000000000000000000000000081565b348015610416575f5ffd5b5061025e610425366004611fce565b6117b6565b348015610435575f5ffd5b5061029e610444366004611fce565b60036020525f90815260409020546001600160a01b031681565b348015610469575f5ffd5b50610472606e81565b60405161ffff9091168152602001610202565b348015610490575f5ffd5b506104a461049f366004612174565b61183b565b60405161020291906121fa565b3480156104bc575f5ffd5b505f5461029e906201000090046001600160a01b031681565b3480156104e0575f5ffd5b5061025e6104ef366004611fce565b6118b2565b3480156104ff575f5ffd5b506102dd61a4b181565b348015610514575f5ffd5b505f546104729061ffff1681565b34801561052d575f5ffd5b5061025e61053c36600461220c565b6119d4565b34801561054c575f5ffd5b5061025e61055b366004612238565b611a83565b34801561056b575f5ffd5b5061025e61057a366004611fce565b611b73565b34801561058a575f5ffd5b5060045461029e906001600160a01b031681565b3480156105a9575f5ffd5b506102dd611be8565b3480156105bd575f5ffd5b506105d16105cc366004611fce565b611c58565b6040805182516001600160a01b0316815260208084015160ff169082015291810151151590820152606001610202565b60405163233f63d760e21b8152606e60048201525f602482018190529081906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690638cfd8f5c90604401602060405180830381865afa15801561066f573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610693919061226a565b60408051600160f01b60208201526022808201849052825180830390910181526042820192839052630d94982d60e21b9092529192507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169163365260b49161070f91606e91309189915f91604601612281565b6040805180830381865afa158015610729573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061074d91906122bc565b50939092509050565b335f9081526002602052604090205460ff1615801561078057506001546001600160a01b03163314155b1561079d576040516282b42960e81b815260040160405180910390fd5b478211156107be57604051630271b2c160e31b815260040160405180910390fd5b604080516060810182523081525f60208083018290528351600160f01b91810191909152602281018590529092820190604201604051602081830303815290604052815250905046600103610861576108616001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000086611ce6565b60405163695ef6bf60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063695ef6bf9085906108b8903090606e9082908b9089906004016122de565b5f604051808303818588803b1580156108cf575f5ffd5b505af11580156108e1573d5f5f3e3d5ffd5b505050505050505050565b6001546001600160a01b03163314610916576040516282b42960e81b815260040160405180910390fd5b600454604080516001600160a01b03928316815291831660208301527fd45d1b0ce63eac73f4ef003d3867028416758e4e7d8159348074394138fc5f7c910160405180910390a1600480546001600160a01b0319166001600160a01b0392909216919091179055565b7f00000000000000000000000000000000000000000000000000000000000000003081036109b457639f03a0265f526004601cfd5b6109bd84611d39565b8360601b60601c93506352d1902d6001527f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80602060016004601d895afa5114610a0f576355299b496001526004601dfd5b847fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b5f38a28490558115610a5957604051828482375f388483885af4610a57573d5f823e3d81fd5b505b50505050565b5f7f0000000000000000000000000000000000000000000000000000000000000000308114610a9557639f03a0265f526004601cfd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc91505090565b6001546001600160a01b03163314610ae6576040516282b42960e81b815260040160405180910390fd5b6001600160a01b0382165f81815260026020908152604091829020805460ff191685151590811790915591519182527f193de8d500b5cb7b720089b258a39e9c1d0b840019a73ae7c51c3f9101732b02910160405180910390a25050565b6001546001600160a01b03163314610b6e576040516282b42960e81b815260040160405180910390fd5b6006546040516001600160a01b038084169216907fb52469c877d844aee7879726017328e719dd3ce8e14024a2b972ed75658d60ce905f90a36006546001600160a01b031615610bf257600654610bf2906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811691165f611ce6565b610c276001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016825f19611ce6565b600680546001600160a01b0319166001600160a01b0392909216919091179055565b335f9081526002602052604090205460ff16158015610c7357506001546001600160a01b03163314155b15610c90576040516282b42960e81b815260040160405180910390fd5b61a4b14614610cb257604051632204e15160e01b815260040160405180910390fd5b5f5f610cbd83611d44565b90925090508015610d07575f54610d07906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116916201000090041683611d78565b8115610d8f5760065460405163b66503cf60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018590529091169063b66503cf906044015f604051808303815f87803b158015610d78575f5ffd5b505af1158015610d8a573d5f5f3e3d5ffd5b505050505b60408051848152602081018490529081018290527fdd9968841efafb8408f1d3ddf902ab92180d70018c4d0a5f376dbcdd3310da109060600160405180910390a1505050565b335f9081526002602052604081205460ff16158015610dff57506001546001600160a01b03163314155b15610e1c576040516282b42960e81b815260040160405180910390fd5b5f8267ffffffffffffffff811115610e3657610e36612351565b604051908082528060200260200182016040528015610e5f578160200160208202803683370190505b5090505f5b83811015611583576005545f906001600160a01b0316639507d39a878785818110610e9157610e91612365565b905060200201356040518263ffffffff1660e01b8152600401610eb691815260200190565b606060405180830381865afa158015610ed1573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610ef59190612389565b90505f815f01516001600160a01b031663cd446e226040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f37573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610f5b919061240a565b9050306001600160a01b0316816001600160a01b031663017e7e586040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fa3573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610fc7919061240a565b6001600160a01b031614610ffe57604051639b21b9f160e01b81526001600160a01b03821660048201526024015b60405180910390fd5b5f825f01516001600160a01b0316636b2ace876040518163ffffffff1660e01b8152600401602060405180830381865afa15801561103e573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611062919061240a565b9050825f01516001600160a01b031663f8ba4cff6040518163ffffffff1660e01b81526004015f604051808303815f87803b15801561109f575f5ffd5b505af11580156110b1573d5f5f3e3d5ffd5b505050505f836020015160ff1660010361113957835f01516001600160a01b031663b27c0e746040518163ffffffff1660e01b81526004016040805180830381865afa158015611103573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906111279190612452565b6001600160801b031691506111b99050565b6002846020015160ff16106111b957835f01516001600160a01b031663b27c0e746040518163ffffffff1660e01b8152600401606060405180830381865afa158015611187573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906111ab9190612483565b506001600160801b03169150505b8351604051633de222bb60e21b81527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03818116600484015292831660248301525f9285169163566231189190839063f7888aec90604401602060405180830381865afa158015611233573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611257919061226a565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201525f6044820152606401602060405180830381865afa1580156112a4573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906112c8919061226a565b9050808211156113c3575f6112dd82846124d7565b60045490915061131b906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811691168684611dc1565b855160405162ae511b60e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301528681166024830181905292166044820152606481018390525f60848201526302b9446c9060a40160408051808303815f875af115801561139b573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906113bf91906122bc565b5050505b845f01516001600160a01b031663476343ee6040518163ffffffff1660e01b81526004015f604051808303815f87803b1580156113fe575f5ffd5b505af1158015611410573d5f5f3e3d5ffd5b505086516001600160a01b039081165f9081526003602052604090205416915050801561154657604051636d289ce560e11b81527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b038181166004840152602483018690525f604484015286169163f18d03cc919030908590859063da5139ca90606401602060405180830381865afa1580156114b6573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906114da919061226a565b6040516001600160e01b031960e087901b1681526001600160a01b03948516600482015292841660248401529216604482015260648101919091526084015f604051808303815f87803b15801561152f575f5ffd5b505af1158015611541573d5f5f3e3d5ffd5b505050505b8388888151811061155957611559612365565b6001600160a01b0390921660209283029190910190910152505060019094019350610e6492505050565b505f5b815181101561177b575f8282815181106115a2576115a2612365565b6020908102919091010151604051633de222bb60e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301523060248301529091169063f7888aec90604401602060405180830381865afa158015611618573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061163c919061226a565b90508015611772575f83838151811061165757611657612365565b602090810291909101015160405163097da6d360e41b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152306024830181905260448301525f606483015260848201859052909116906397da6d309060a40160408051808303815f875af11580156116e1573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061170591906122bc565b50905061171281866124ea565b945083838151811061172657611726612365565b60200260200101516001600160a01b03167f41d6edb123172e606b3a3ed2a197ed259f8e5c2fdab57ff5ae3b6f89c387ff828260405161176891815260200190565b60405180910390a2505b50600101611586565b506040518281527fe36285dbbf07eb283608a6bbeed71201eafbeb7e384df268276cca93cbd9aafe9060200160405180910390a15092915050565b6001546001600160a01b031633146117e0576040516282b42960e81b815260040160405180910390fd5b6005546040516001600160a01b038084169216907fec10a16af385903532506d1567380fd8d93d880e8ed4bcacc42b0848e781406a905f90a3600580546001600160a01b0319166001600160a01b0392909216919091179055565b6001546060906001600160a01b03163314611868576040516282b42960e81b815260040160405180910390fd5b6118a98584848080601f0160208091040260200160405190810160405280939291908181526020018383808284375f92019190915250899250611e23915050565b95945050505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000810460ff16159067ffffffffffffffff165f811580156118fc5750825b90505f8267ffffffffffffffff1660011480156119185750303b155b905081158015611926575080155b156119445760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff19166001178555831561197857845468ff00000000000000001916680100000000000000001785555b61198186611ebe565b83156119cc57845468ff000000000000000019168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b505050505050565b6001546001600160a01b031633146119fe576040516282b42960e81b815260040160405180910390fd5b6001600160a01b038281165f8181526003602090815260409182902054825190851681529385169084015290917f647b220698f70cae125b2b8121de86df712a49573b43531708e706db3a138219910160405180910390a26001600160a01b039182165f90815260036020526040902080546001600160a01b03191691909216179055565b6001546001600160a01b03163314611ab057604051631120ac6d60e31b8152336004820152602401610ff5565b5f5461271061ffff9091161115611ada57604051637d941fcf60e11b815260040160405180910390fd5b5f546040805161ffff8084168252841660208201526001600160a01b038581169362010000900416917f3211c83a09d01653307dce8be31e51c79240be602c393a64e512de455a4dd423910160405180910390a35f805475ffffffffffffffffffffffffffffffffffffffffffff1916620100006001600160a01b03949094169390930261ffff19169290921761ffff91909116179055565b6001546001600160a01b03163314611b9d576040516282b42960e81b815260040160405180910390fd5b600180546001600160a01b0319166001600160a01b03831690811790915560405133907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a350565b60055460408051630fbdb69960e11b815290515f926001600160a01b031691631f7b6d329160048083019260209291908290030181865afa158015611c2f573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611c53919061226a565b905090565b604080516060810182525f80825260208201819052918101919091526005546040516330af0bbf60e21b81526001600160a01b0384811660048301529091169063c2bc2efc90602401606060405180830381865afa158015611cbc573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611ce09190612389565b92915050565b81601452806034526f095ea7b30000000000000000000000005f5260205f604460105f875af18060015f511416611d2f57803d853b151710611d2f57633e3f8f735f526004601cfd5b505f603452505050565b611d41611f09565b50565b5f8054819061271090611d5b9061ffff16856124fd565b611d659190612514565b9050611d7181846124d7565b9150915091565b81601452806034526fa9059cbb0000000000000000000000005f5260205f604460105f875af18060015f511416611d2f57803d853b151710611d2f576390b8ec185f526004601cfd5b60405181606052826040528360601b602c526f23b872dd000000000000000000000000600c5260205f6064601c5f895af18060015f511416611e1557803d873b151710611e1557637939f4245f526004601cfd5b505f60605260405250505050565b606081471015611e485760405163cd78605960e01b8152306004820152602401610ff5565b5f5f856001600160a01b03168486604051611e639190612533565b5f6040518083038185875af1925050503d805f8114611e9d576040519150601f19603f3d011682016040523d82523d5f602084013e611ea2565b606091505b5091509150611eb2868383611f35565b925050505b9392505050565b600180546001600160a01b0319166001600160a01b0383169081179091556040515f907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350565b6001546001600160a01b03163314611f33576040516282b42960e81b815260040160405180910390fd5b565b606082611f4a57611f4582611f91565b611eb7565b8151158015611f6157506001600160a01b0384163b155b15611f8a57604051639996b31560e01b81526001600160a01b0385166004820152602401610ff5565b5080611eb7565b805115611fa15780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b6001600160a01b0381168114611d41575f5ffd5b5f60208284031215611fde575f5ffd5b8135611eb781611fba565b5f60208284031215611ff9575f5ffd5b5035919050565b5f5f5f60608486031215612012575f5ffd5b505081359360208301359350604090920135919050565b5f5f83601f840112612039575f5ffd5b50813567ffffffffffffffff811115612050575f5ffd5b602083019150836020828501011115612067575f5ffd5b9250929050565b5f5f5f60408486031215612080575f5ffd5b833561208b81611fba565b9250602084013567ffffffffffffffff8111156120a6575f5ffd5b6120b286828701612029565b9497909650939450505050565b8015158114611d41575f5ffd5b5f5f604083850312156120dd575f5ffd5b82356120e881611fba565b915060208301356120f8816120bf565b809150509250929050565b5f5f60208385031215612114575f5ffd5b823567ffffffffffffffff81111561212a575f5ffd5b8301601f8101851361213a575f5ffd5b803567ffffffffffffffff811115612150575f5ffd5b8560208260051b8401011115612164575f5ffd5b6020919091019590945092505050565b5f5f5f5f60608587031215612187575f5ffd5b843561219281611fba565b935060208501359250604085013567ffffffffffffffff8111156121b4575f5ffd5b6121c087828801612029565b95989497509550505050565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b602081525f611eb760208301846121cc565b5f5f6040838503121561221d575f5ffd5b823561222881611fba565b915060208301356120f881611fba565b5f5f60408385031215612249575f5ffd5b823561225481611fba565b9150602083013561ffff811681146120f8575f5ffd5b5f6020828403121561227a575f5ffd5b5051919050565b61ffff86168152846020820152836040820152821515606082015260a060808201525f6122b160a08301846121cc565b979650505050505050565b5f5f604083850312156122cd575f5ffd5b505080516020909101519092909150565b6001600160a01b038616815261ffff8516602082015283604082015282606082015260a060808201526001600160a01b0382511660a08201526001600160a01b0360208301511660c08201525f6040830151606060e08401526123456101008401826121cc565b98975050505050505050565b634e487b7160e01b5f52604160045260245ffd5b634e487b7160e01b5f52603260045260245ffd5b8051612384816120bf565b919050565b5f606082840312801561239a575f5ffd5b506040516060810167ffffffffffffffff811182821017156123ca57634e487b7160e01b5f52604160045260245ffd5b60405282516123d881611fba565b8152602083015160ff811681146123ed575f5ffd5b60208201526123fe60408401612379565b60408201529392505050565b5f6020828403121561241a575f5ffd5b8151611eb781611fba565b805167ffffffffffffffff81168114612384575f5ffd5b80516001600160801b0381168114612384575f5ffd5b5f5f60408385031215612463575f5ffd5b61246c83612425565b915061247a6020840161243c565b90509250929050565b5f5f5f60608486031215612495575f5ffd5b61249e84612425565b92506124ac6020850161243c565b91506124ba60408501612425565b90509250925092565b634e487b7160e01b5f52601160045260245ffd5b81810381811115611ce057611ce06124c3565b80820180821115611ce057611ce06124c3565b8082028115828204841417611ce057611ce06124c3565b5f8261252e57634e487b7160e01b5f52601260045260245ffd5b500490565b5f82518060208501845e5f92019182525091905056fea26469706673582212206d5140f1bf7a994b7bd340daddc4a840a75e5b5dcec4ff9dd71e3e9ca4ae2db864736f6c634300081c003300000000000000000000000041d5a04b4e03dc27dc1f5c5a576ad2187bc601af",
  "artifact_path": "CauldronFeeWithdrawer.sol",
  "artifact_full_path": "CauldronFeeWithdrawer.sol:CauldronFeeWithdrawer",
  "standardJsonInput": {
    "language": "Solidity",
    "sources": {
      "src/periphery/CauldronFeeWithdrawer.sol": {
        "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.0;\n\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\nimport {SafeTransferLib} from \"@solady/utils/SafeTransferLib.sol\";\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport {UUPSUpgradeable} from \"@solady/utils/UUPSUpgradeable.sol\";\nimport {ILzOFTV2, ILzApp, ILzCommonOFT, ILzBaseOFTV2} from \"@abracadabra-oft-v1/interfaces/ILayerZero.sol\";\nimport {IBentoBoxLite} from \"/interfaces/IBentoBoxV1.sol\";\nimport {ICauldronV1} from \"/interfaces/ICauldronV1.sol\";\nimport {ICauldronV2} from \"/interfaces/ICauldronV2.sol\";\nimport {OwnableOperators} from \"/mixins/OwnableOperators.sol\";\nimport {IMultiRewardsStaking} from \"/interfaces/IMultiRewardsStaking.sol\";\nimport {CauldronRegistry, CauldronInfo} from \"/periphery/CauldronRegistry.sol\";\nimport {FeeCollectable} from \"/mixins/FeeCollectable.sol\";\n\n/// @notice Withdraws MIM fees from Cauldrons and distribute them to SpellPower stakers\n/// All chains have this contract deployed with the same address.\n/// This is assuming MIM is using LayerZero OFTv2 EndpointV1.\ncontract CauldronFeeWithdrawer is FeeCollectable, OwnableOperators, UUPSUpgradeable, Initializable {\n    using SafeTransferLib for address;\n\n    event LogMimWithdrawn(address indexed box, uint256 amount);\n    event LogMimTotalWithdrawn(uint256 amount);\n    event LogFeeToOverrideChanged(address indexed cauldron, address previous, address current);\n    event LogMimProviderChanged(address previous, address current);\n    event LogStakingChanged(address indexed previous, address indexed current);\n    event LogRegistryChanged(address indexed previous, address indexed current);\n    event LogFeeDistributed(uint256 amount, uint256 userAmount, uint256 feeAmount);\n\n    error ErrInvalidFeeTo(address masterContract);\n    error ErrNotEnoughNativeTokenToCoverFee();\n    error ErrInvalidChainId();\n\n    uint16 public constant LZ_HUB_CHAINID = 110; // Arbitrum EndpointV1 ChainId\n    uint256 public constant HUB_CHAINID = 42161; // Arbitrum ChainId\n\n    address public immutable mim;\n    ILzOFTV2 public immutable oft;\n\n    mapping(address cauldron => address feeTo) public feeToOverrides;\n    address public mimProvider;\n    CauldronRegistry public registry;\n    IMultiRewardsStaking public staking;\n\n    // allow to receive gas to cover bridging fees\n    receive() external payable {}\n\n    constructor(ILzOFTV2 _oft) {\n        mim = ILzBaseOFTV2(address(_oft)).innerToken();\n        oft = _oft;\n\n        _disableInitializers();\n    }\n\n    function initialize(address _owner) external initializer {\n        _initializeOwner(_owner);\n    }\n\n    //////////////////////////////////////////////////////////////////////////////////////////////\n    /// VIEWS\n    //////////////////////////////////////////////////////////////////////////////////////////////\n\n    function cauldronInfosCount() external view returns (uint256) {\n        return registry.length();\n    }\n\n    function cauldronInfo(address cauldron) external view returns (CauldronInfo memory) {\n        return registry.get(cauldron);\n    }\n\n    function estimateBridgingFee(uint256 amount) external view returns (uint256 fee, uint256 gas) {\n        gas = ILzApp(address(oft)).minDstGasLookup(LZ_HUB_CHAINID, 0 /* packet type for sendFrom */);\n        (fee, ) = oft.estimateSendFee(\n            LZ_HUB_CHAINID,\n            bytes32(uint256(uint160(address(this)))),\n            amount,\n            false,\n            abi.encodePacked(uint16(1), uint256(gas))\n        );\n    }\n\n    //////////////////////////////////////////////////////////////////////////////////////////////\n    /// OPERATORS\n    //////////////////////////////////////////////////////////////////////////////////////////////\n\n    function withdraw(uint256[] calldata cauldronsIndices) external onlyOperators returns (uint256 totalAmount) {\n        address[] memory boxes = new address[](cauldronsIndices.length);\n\n        for (uint256 i = 0; i < cauldronsIndices.length; i++) {\n            CauldronInfo memory info = registry.get(cauldronsIndices[i]);\n            address masterContract = address(ICauldronV1(info.cauldron).masterContract());\n\n            if (ICauldronV1(masterContract).feeTo() != address(this)) {\n                revert ErrInvalidFeeTo(masterContract);\n            }\n\n            IBentoBoxLite box = IBentoBoxLite(ICauldronV1(info.cauldron).bentoBox());\n            ICauldronV1(info.cauldron).accrue();\n\n            uint256 feesEarned;\n            if (info.version == 1) {\n                (, feesEarned) = ICauldronV1(info.cauldron).accrueInfo();\n            } else if (info.version >= 2) {\n                (, feesEarned, ) = ICauldronV2(info.cauldron).accrueInfo();\n            }\n\n            uint256 cauldronMimBalance = box.toAmount(mim, box.balanceOf(mim, info.cauldron), false);\n\n            // in case the cauldron has more fees than the balance,\n            // deposit the missing amount from the mimProvider.\n            if (feesEarned > cauldronMimBalance) {\n                uint256 remainingAmount = feesEarned - cauldronMimBalance;\n                mim.safeTransferFrom(mimProvider, address(box), remainingAmount);\n                box.deposit(mim, address(box), info.cauldron, remainingAmount, 0);\n            }\n\n            ICauldronV1(info.cauldron).withdrawFees();\n\n            // redirect fees to override address when set\n            address feeToOverride = feeToOverrides[info.cauldron];\n            if (feeToOverride != address(0)) {\n                box.transfer(mim, address(this), feeToOverride, box.toShare(mim, feesEarned, false));\n            }\n\n            boxes[i] = address(box);\n        }\n\n        // Withdraw MIMs from all the bentoBoxes to this contract\n        for (uint256 i = 0; i < boxes.length; i++) {\n            uint256 share = IBentoBoxLite(boxes[i]).balanceOf(mim, address(this));\n            if (share > 0) {\n                (uint256 amountWithdrawn, ) = IBentoBoxLite(boxes[i]).withdraw(mim, address(this), address(this), 0, share);\n                totalAmount += amountWithdrawn;\n\n                emit LogMimWithdrawn(boxes[i], amountWithdrawn);\n            }\n        }\n\n        emit LogMimTotalWithdrawn(totalAmount);\n    }\n\n    function distribute(uint256 amount) external onlyOperators {\n        if (block.chainid != HUB_CHAINID) {\n            revert ErrInvalidChainId();\n        }\n\n        (uint256 userAmount, uint256 treasuryAmount) = _calculateFees(amount);\n\n        if (treasuryAmount > 0) {\n            mim.safeTransfer(feeCollector, treasuryAmount);\n        }\n\n        if (userAmount > 0) {\n            IMultiRewardsStaking(staking).notifyRewardAmount(mim, userAmount);\n        }\n\n        emit LogFeeDistributed(amount, userAmount, treasuryAmount);\n    }\n\n    function bridge(uint256 amount, uint256 fee, uint256 gas) external onlyOperators {\n        // check if there is enough native token to cover the bridging fees\n        if (fee > address(this).balance) {\n            revert ErrNotEnoughNativeTokenToCoverFee();\n        }\n\n        ILzCommonOFT.LzCallParams memory lzCallParams = ILzCommonOFT.LzCallParams({\n            refundAddress: payable(address(this)),\n            zroPaymentAddress: address(0),\n            adapterParams: abi.encodePacked(uint16(1), uint256(gas))\n        });\n\n        // MIM is native on mainnet, so we need to approve the oft proxy to bridge the amount\n        if (block.chainid == 1) {\n            mim.safeApprove(address(oft), amount);\n        }\n\n        oft.sendFrom{value: fee}(\n            address(this), // 'from' address to send tokens\n            LZ_HUB_CHAINID, // Arbitrum remote LayerZero chainId\n            bytes32(uint256(uint160(address(this)))), // all chains have this contract deployed with the same address\n            amount, // amount of tokens to send (in wei)\n            lzCallParams\n        );\n    }\n\n    //////////////////////////////////////////////////////////////////////////////////////////////\n    /// ADMIN\n    //////////////////////////////////////////////////////////////////////////////////////////////\n\n    function setFeeToOverride(address cauldron, address feeTo) external onlyOwner {\n        emit LogFeeToOverrideChanged(cauldron, feeToOverrides[cauldron], feeTo);\n        feeToOverrides[cauldron] = feeTo;\n    }\n\n    function setRegistry(address _registry) external onlyOwner {\n        emit LogRegistryChanged(address(registry), _registry);\n        registry = CauldronRegistry(_registry);\n    }\n\n    function setMimProvider(address _mimProvider) external onlyOwner {\n        emit LogMimProviderChanged(mimProvider, _mimProvider);\n        mimProvider = _mimProvider;\n    }\n\n    function setStaking(address _staking) external onlyOwner {\n        emit LogStakingChanged(address(staking), _staking);\n\n        if (address(staking) != address(0)) {\n            mim.safeApprove(address(staking), 0);\n        }\n\n        mim.safeApprove(_staking, type(uint256).max);\n        staking = IMultiRewardsStaking(_staking);\n    }\n\n    /// @notice Emergency function to execute a call on the contract, for example to rescue tokens or native tokens\n    function execute(address to, uint256 value, bytes calldata data) external onlyOwner returns (bytes memory result) {\n        return Address.functionCallWithValue(to, data, value);\n    }\n\n    //////////////////////////////////////////////////////////////////////////////////////////////\n    /// INTERNAL\n    //////////////////////////////////////////////////////////////////////////////////////////////\n\n    function _authorizeUpgrade(address /*newImplementation*/) internal virtual override {\n        _checkOwner();\n    }\n\n    function _isFeeOperator(address account) internal view override returns (bool) {\n        return owner == account;\n    }\n}\n"
      },
      "dependencies/openzeppelin-contracts-5.0.2/contracts/utils/Address.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}\n"
      },
      "dependencies/solady-0.0.281/src/utils/SafeTransferLib.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/SafeTransferLib.sol)\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeTransferLib.sol)\n/// @author Permit2 operations from (https://github.com/Uniswap/permit2/blob/main/src/libraries/Permit2Lib.sol)\n///\n/// @dev Note:\n/// - For ETH transfers, please use `forceSafeTransferETH` for DoS protection.\nlibrary SafeTransferLib {\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                       CUSTOM ERRORS                        */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev The ETH transfer has failed.\n    error ETHTransferFailed();\n\n    /// @dev The ERC20 `transferFrom` has failed.\n    error TransferFromFailed();\n\n    /// @dev The ERC20 `transfer` has failed.\n    error TransferFailed();\n\n    /// @dev The ERC20 `approve` has failed.\n    error ApproveFailed();\n\n    /// @dev The ERC20 `totalSupply` query has failed.\n    error TotalSupplyQueryFailed();\n\n    /// @dev The Permit2 operation has failed.\n    error Permit2Failed();\n\n    /// @dev The Permit2 amount must be less than `2**160 - 1`.\n    error Permit2AmountOverflow();\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                         CONSTANTS                          */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Suggested gas stipend for contract receiving ETH that disallows any storage writes.\n    uint256 internal constant GAS_STIPEND_NO_STORAGE_WRITES = 2300;\n\n    /// @dev Suggested gas stipend for contract receiving ETH to perform a few\n    /// storage reads and writes, but low enough to prevent griefing.\n    uint256 internal constant GAS_STIPEND_NO_GRIEF = 100000;\n\n    /// @dev The unique EIP-712 domain domain separator for the DAI token contract.\n    bytes32 internal constant DAI_DOMAIN_SEPARATOR =\n        0xdbb8cf42e1ecb028be3f3dbc922e1d878b963f411dc388ced501601c60f7c6f7;\n\n    /// @dev The address for the WETH9 contract on Ethereum mainnet.\n    address internal constant WETH9 = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n\n    /// @dev The canonical Permit2 address.\n    /// [Github](https://github.com/Uniswap/permit2)\n    /// [Etherscan](https://etherscan.io/address/0x000000000022D473030F116dDEE9F6B43aC78BA3)\n    address internal constant PERMIT2 = 0x000000000022D473030F116dDEE9F6B43aC78BA3;\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                       ETH OPERATIONS                       */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    // If the ETH transfer MUST succeed with a reasonable gas budget, use the force variants.\n    //\n    // The regular variants:\n    // - Forwards all remaining gas to the target.\n    // - Reverts if the target reverts.\n    // - Reverts if the current contract has insufficient balance.\n    //\n    // The force variants:\n    // - Forwards with an optional gas stipend\n    //   (defaults to `GAS_STIPEND_NO_GRIEF`, which is sufficient for most cases).\n    // - If the target reverts, or if the gas stipend is exhausted,\n    //   creates a temporary contract to force send the ETH via `SELFDESTRUCT`.\n    //   Future compatible with `SENDALL`: https://eips.ethereum.org/EIPS/eip-4758.\n    // - Reverts if the current contract has insufficient balance.\n    //\n    // The try variants:\n    // - Forwards with a mandatory gas stipend.\n    // - Instead of reverting, returns whether the transfer succeeded.\n\n    /// @dev Sends `amount` (in wei) ETH to `to`.\n    function safeTransferETH(address to, uint256 amount) internal {\n        /// @solidity memory-safe-assembly\n        assembly {\n            if iszero(call(gas(), to, amount, codesize(), 0x00, codesize(), 0x00)) {\n                mstore(0x00, 0xb12d13eb) // `ETHTransferFailed()`.\n                revert(0x1c, 0x04)\n            }\n        }\n    }\n\n    /// @dev Sends all the ETH in the current contract to `to`.\n    function safeTransferAllETH(address to) internal {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Transfer all the ETH and check if it succeeded or not.\n            if iszero(call(gas(), to, selfbalance(), codesize(), 0x00, codesize(), 0x00)) {\n                mstore(0x00, 0xb12d13eb) // `ETHTransferFailed()`.\n                revert(0x1c, 0x04)\n            }\n        }\n    }\n\n    /// @dev Force sends `amount` (in wei) ETH to `to`, with a `gasStipend`.\n    function forceSafeTransferETH(address to, uint256 amount, uint256 gasStipend) internal {\n        /// @solidity memory-safe-assembly\n        assembly {\n            if lt(selfbalance(), amount) {\n                mstore(0x00, 0xb12d13eb) // `ETHTransferFailed()`.\n                revert(0x1c, 0x04)\n            }\n            if iszero(call(gasStipend, to, amount, codesize(), 0x00, codesize(), 0x00)) {\n                mstore(0x00, to) // Store the address in scratch space.\n                mstore8(0x0b, 0x73) // Opcode `PUSH20`.\n                mstore8(0x20, 0xff) // Opcode `SELFDESTRUCT`.\n                if iszero(create(amount, 0x0b, 0x16)) { revert(codesize(), codesize()) } // For gas estimation.\n            }\n        }\n    }\n\n    /// @dev Force sends all the ETH in the current contract to `to`, with a `gasStipend`.\n    function forceSafeTransferAllETH(address to, uint256 gasStipend) internal {\n        /// @solidity memory-safe-assembly\n        assembly {\n            if iszero(call(gasStipend, to, selfbalance(), codesize(), 0x00, codesize(), 0x00)) {\n                mstore(0x00, to) // Store the address in scratch space.\n                mstore8(0x0b, 0x73) // Opcode `PUSH20`.\n                mstore8(0x20, 0xff) // Opcode `SELFDESTRUCT`.\n                if iszero(create(selfbalance(), 0x0b, 0x16)) { revert(codesize(), codesize()) } // For gas estimation.\n            }\n        }\n    }\n\n    /// @dev Force sends `amount` (in wei) ETH to `to`, with `GAS_STIPEND_NO_GRIEF`.\n    function forceSafeTransferETH(address to, uint256 amount) internal {\n        /// @solidity memory-safe-assembly\n        assembly {\n            if lt(selfbalance(), amount) {\n                mstore(0x00, 0xb12d13eb) // `ETHTransferFailed()`.\n                revert(0x1c, 0x04)\n            }\n            if iszero(call(GAS_STIPEND_NO_GRIEF, to, amount, codesize(), 0x00, codesize(), 0x00)) {\n                mstore(0x00, to) // Store the address in scratch space.\n                mstore8(0x0b, 0x73) // Opcode `PUSH20`.\n                mstore8(0x20, 0xff) // Opcode `SELFDESTRUCT`.\n                if iszero(create(amount, 0x0b, 0x16)) { revert(codesize(), codesize()) } // For gas estimation.\n            }\n        }\n    }\n\n    /// @dev Force sends all the ETH in the current contract to `to`, with `GAS_STIPEND_NO_GRIEF`.\n    function forceSafeTransferAllETH(address to) internal {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // forgefmt: disable-next-item\n            if iszero(call(GAS_STIPEND_NO_GRIEF, to, selfbalance(), codesize(), 0x00, codesize(), 0x00)) {\n                mstore(0x00, to) // Store the address in scratch space.\n                mstore8(0x0b, 0x73) // Opcode `PUSH20`.\n                mstore8(0x20, 0xff) // Opcode `SELFDESTRUCT`.\n                if iszero(create(selfbalance(), 0x0b, 0x16)) { revert(codesize(), codesize()) } // For gas estimation.\n            }\n        }\n    }\n\n    /// @dev Sends `amount` (in wei) ETH to `to`, with a `gasStipend`.\n    function trySafeTransferETH(address to, uint256 amount, uint256 gasStipend)\n        internal\n        returns (bool success)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            success := call(gasStipend, to, amount, codesize(), 0x00, codesize(), 0x00)\n        }\n    }\n\n    /// @dev Sends all the ETH in the current contract to `to`, with a `gasStipend`.\n    function trySafeTransferAllETH(address to, uint256 gasStipend)\n        internal\n        returns (bool success)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            success := call(gasStipend, to, selfbalance(), codesize(), 0x00, codesize(), 0x00)\n        }\n    }\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                      ERC20 OPERATIONS                      */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Sends `amount` of ERC20 `token` from `from` to `to`.\n    /// Reverts upon failure.\n    ///\n    /// The `from` account must have at least `amount` approved for\n    /// the current contract to manage.\n    function safeTransferFrom(address token, address from, address to, uint256 amount) internal {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let m := mload(0x40) // Cache the free memory pointer.\n            mstore(0x60, amount) // Store the `amount` argument.\n            mstore(0x40, to) // Store the `to` argument.\n            mstore(0x2c, shl(96, from)) // Store the `from` argument.\n            mstore(0x0c, 0x23b872dd000000000000000000000000) // `transferFrom(address,address,uint256)`.\n            let success := call(gas(), token, 0, 0x1c, 0x64, 0x00, 0x20)\n            if iszero(and(eq(mload(0x00), 1), success)) {\n                if iszero(lt(or(iszero(extcodesize(token)), returndatasize()), success)) {\n                    mstore(0x00, 0x7939f424) // `TransferFromFailed()`.\n                    revert(0x1c, 0x04)\n                }\n            }\n            mstore(0x60, 0) // Restore the zero slot to zero.\n            mstore(0x40, m) // Restore the free memory pointer.\n        }\n    }\n\n    /// @dev Sends `amount` of ERC20 `token` from `from` to `to`.\n    ///\n    /// The `from` account must have at least `amount` approved for the current contract to manage.\n    function trySafeTransferFrom(address token, address from, address to, uint256 amount)\n        internal\n        returns (bool success)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let m := mload(0x40) // Cache the free memory pointer.\n            mstore(0x60, amount) // Store the `amount` argument.\n            mstore(0x40, to) // Store the `to` argument.\n            mstore(0x2c, shl(96, from)) // Store the `from` argument.\n            mstore(0x0c, 0x23b872dd000000000000000000000000) // `transferFrom(address,address,uint256)`.\n            success := call(gas(), token, 0, 0x1c, 0x64, 0x00, 0x20)\n            if iszero(and(eq(mload(0x00), 1), success)) {\n                success := lt(or(iszero(extcodesize(token)), returndatasize()), success)\n            }\n            mstore(0x60, 0) // Restore the zero slot to zero.\n            mstore(0x40, m) // Restore the free memory pointer.\n        }\n    }\n\n    /// @dev Sends all of ERC20 `token` from `from` to `to`.\n    /// Reverts upon failure.\n    ///\n    /// The `from` account must have their entire balance approved for the current contract to manage.\n    function safeTransferAllFrom(address token, address from, address to)\n        internal\n        returns (uint256 amount)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let m := mload(0x40) // Cache the free memory pointer.\n            mstore(0x40, to) // Store the `to` argument.\n            mstore(0x2c, shl(96, from)) // Store the `from` argument.\n            mstore(0x0c, 0x70a08231000000000000000000000000) // `balanceOf(address)`.\n            // Read the balance, reverting upon failure.\n            if iszero(\n                and( // The arguments of `and` are evaluated from right to left.\n                    gt(returndatasize(), 0x1f), // At least 32 bytes returned.\n                    staticcall(gas(), token, 0x1c, 0x24, 0x60, 0x20)\n                )\n            ) {\n                mstore(0x00, 0x7939f424) // `TransferFromFailed()`.\n                revert(0x1c, 0x04)\n            }\n            mstore(0x00, 0x23b872dd) // `transferFrom(address,address,uint256)`.\n            amount := mload(0x60) // The `amount` is already at 0x60. We'll need to return it.\n            // Perform the transfer, reverting upon failure.\n            let success := call(gas(), token, 0, 0x1c, 0x64, 0x00, 0x20)\n            if iszero(and(eq(mload(0x00), 1), success)) {\n                if iszero(lt(or(iszero(extcodesize(token)), returndatasize()), success)) {\n                    mstore(0x00, 0x7939f424) // `TransferFromFailed()`.\n                    revert(0x1c, 0x04)\n                }\n            }\n            mstore(0x60, 0) // Restore the zero slot to zero.\n            mstore(0x40, m) // Restore the free memory pointer.\n        }\n    }\n\n    /// @dev Sends `amount` of ERC20 `token` from the current contract to `to`.\n    /// Reverts upon failure.\n    function safeTransfer(address token, address to, uint256 amount) internal {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x14, to) // Store the `to` argument.\n            mstore(0x34, amount) // Store the `amount` argument.\n            mstore(0x00, 0xa9059cbb000000000000000000000000) // `transfer(address,uint256)`.\n            // Perform the transfer, reverting upon failure.\n            let success := call(gas(), token, 0, 0x10, 0x44, 0x00, 0x20)\n            if iszero(and(eq(mload(0x00), 1), success)) {\n                if iszero(lt(or(iszero(extcodesize(token)), returndatasize()), success)) {\n                    mstore(0x00, 0x90b8ec18) // `TransferFailed()`.\n                    revert(0x1c, 0x04)\n                }\n            }\n            mstore(0x34, 0) // Restore the part of the free memory pointer that was overwritten.\n        }\n    }\n\n    /// @dev Sends all of ERC20 `token` from the current contract to `to`.\n    /// Reverts upon failure.\n    function safeTransferAll(address token, address to) internal returns (uint256 amount) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, 0x70a08231) // Store the function selector of `balanceOf(address)`.\n            mstore(0x20, address()) // Store the address of the current contract.\n            // Read the balance, reverting upon failure.\n            if iszero(\n                and( // The arguments of `and` are evaluated from right to left.\n                    gt(returndatasize(), 0x1f), // At least 32 bytes returned.\n                    staticcall(gas(), token, 0x1c, 0x24, 0x34, 0x20)\n                )\n            ) {\n                mstore(0x00, 0x90b8ec18) // `TransferFailed()`.\n                revert(0x1c, 0x04)\n            }\n            mstore(0x14, to) // Store the `to` argument.\n            amount := mload(0x34) // The `amount` is already at 0x34. We'll need to return it.\n            mstore(0x00, 0xa9059cbb000000000000000000000000) // `transfer(address,uint256)`.\n            // Perform the transfer, reverting upon failure.\n            let success := call(gas(), token, 0, 0x10, 0x44, 0x00, 0x20)\n            if iszero(and(eq(mload(0x00), 1), success)) {\n                if iszero(lt(or(iszero(extcodesize(token)), returndatasize()), success)) {\n                    mstore(0x00, 0x90b8ec18) // `TransferFailed()`.\n                    revert(0x1c, 0x04)\n                }\n            }\n            mstore(0x34, 0) // Restore the part of the free memory pointer that was overwritten.\n        }\n    }\n\n    /// @dev Sets `amount` of ERC20 `token` for `to` to manage on behalf of the current contract.\n    /// Reverts upon failure.\n    function safeApprove(address token, address to, uint256 amount) internal {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x14, to) // Store the `to` argument.\n            mstore(0x34, amount) // Store the `amount` argument.\n            mstore(0x00, 0x095ea7b3000000000000000000000000) // `approve(address,uint256)`.\n            let success := call(gas(), token, 0, 0x10, 0x44, 0x00, 0x20)\n            if iszero(and(eq(mload(0x00), 1), success)) {\n                if iszero(lt(or(iszero(extcodesize(token)), returndatasize()), success)) {\n                    mstore(0x00, 0x3e3f8f73) // `ApproveFailed()`.\n                    revert(0x1c, 0x04)\n                }\n            }\n            mstore(0x34, 0) // Restore the part of the free memory pointer that was overwritten.\n        }\n    }\n\n    /// @dev Sets `amount` of ERC20 `token` for `to` to manage on behalf of the current contract.\n    /// If the initial attempt to approve fails, attempts to reset the approved amount to zero,\n    /// then retries the approval again (some tokens, e.g. USDT, requires this).\n    /// Reverts upon failure.\n    function safeApproveWithRetry(address token, address to, uint256 amount) internal {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x14, to) // Store the `to` argument.\n            mstore(0x34, amount) // Store the `amount` argument.\n            mstore(0x00, 0x095ea7b3000000000000000000000000) // `approve(address,uint256)`.\n            // Perform the approval, retrying upon failure.\n            let success := call(gas(), token, 0, 0x10, 0x44, 0x00, 0x20)\n            if iszero(and(eq(mload(0x00), 1), success)) {\n                if iszero(lt(or(iszero(extcodesize(token)), returndatasize()), success)) {\n                    mstore(0x34, 0) // Store 0 for the `amount`.\n                    mstore(0x00, 0x095ea7b3000000000000000000000000) // `approve(address,uint256)`.\n                    pop(call(gas(), token, 0, 0x10, 0x44, codesize(), 0x00)) // Reset the approval.\n                    mstore(0x34, amount) // Store back the original `amount`.\n                    // Retry the approval, reverting upon failure.\n                    success := call(gas(), token, 0, 0x10, 0x44, 0x00, 0x20)\n                    if iszero(and(eq(mload(0x00), 1), success)) {\n                        // Check the `extcodesize` again just in case the token selfdestructs lol.\n                        if iszero(lt(or(iszero(extcodesize(token)), returndatasize()), success)) {\n                            mstore(0x00, 0x3e3f8f73) // `ApproveFailed()`.\n                            revert(0x1c, 0x04)\n                        }\n                    }\n                }\n            }\n            mstore(0x34, 0) // Restore the part of the free memory pointer that was overwritten.\n        }\n    }\n\n    /// @dev Returns the amount of ERC20 `token` owned by `account`.\n    /// Returns zero if the `token` does not exist.\n    function balanceOf(address token, address account) internal view returns (uint256 amount) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x14, account) // Store the `account` argument.\n            mstore(0x00, 0x70a08231000000000000000000000000) // `balanceOf(address)`.\n            amount :=\n                mul( // The arguments of `mul` are evaluated from right to left.\n                    mload(0x20),\n                    and( // The arguments of `and` are evaluated from right to left.\n                        gt(returndatasize(), 0x1f), // At least 32 bytes returned.\n                        staticcall(gas(), token, 0x10, 0x24, 0x20, 0x20)\n                    )\n                )\n        }\n    }\n\n    /// @dev Returns the total supply of the `token`.\n    /// Reverts if the token does not exist or does not implement `totalSupply()`.\n    function totalSupply(address token) internal view returns (uint256 result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, 0x18160ddd) // `totalSupply()`.\n            if iszero(\n                and(gt(returndatasize(), 0x1f), staticcall(gas(), token, 0x1c, 0x04, 0x00, 0x20))\n            ) {\n                mstore(0x00, 0x54cd9435) // `TotalSupplyQueryFailed()`.\n                revert(0x1c, 0x04)\n            }\n            result := mload(0x00)\n        }\n    }\n\n    /// @dev Sends `amount` of ERC20 `token` from `from` to `to`.\n    /// If the initial attempt fails, try to use Permit2 to transfer the token.\n    /// Reverts upon failure.\n    ///\n    /// The `from` account must have at least `amount` approved for the current contract to manage.\n    function safeTransferFrom2(address token, address from, address to, uint256 amount) internal {\n        if (!trySafeTransferFrom(token, from, to, amount)) {\n            permit2TransferFrom(token, from, to, amount);\n        }\n    }\n\n    /// @dev Sends `amount` of ERC20 `token` from `from` to `to` via Permit2.\n    /// Reverts upon failure.\n    function permit2TransferFrom(address token, address from, address to, uint256 amount)\n        internal\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let m := mload(0x40)\n            mstore(add(m, 0x74), shr(96, shl(96, token)))\n            mstore(add(m, 0x54), amount)\n            mstore(add(m, 0x34), to)\n            mstore(add(m, 0x20), shl(96, from))\n            // `transferFrom(address,address,uint160,address)`.\n            mstore(m, 0x36c78516000000000000000000000000)\n            let p := PERMIT2\n            let exists := eq(chainid(), 1)\n            if iszero(exists) { exists := iszero(iszero(extcodesize(p))) }\n            if iszero(\n                and(\n                    call(gas(), p, 0, add(m, 0x10), 0x84, codesize(), 0x00),\n                    lt(iszero(extcodesize(token)), exists) // Token has code and Permit2 exists.\n                )\n            ) {\n                mstore(0x00, 0x7939f4248757f0fd) // `TransferFromFailed()` or `Permit2AmountOverflow()`.\n                revert(add(0x18, shl(2, iszero(iszero(shr(160, amount))))), 0x04)\n            }\n        }\n    }\n\n    /// @dev Permit a user to spend a given amount of\n    /// another user's tokens via native EIP-2612 permit if possible, falling\n    /// back to Permit2 if native permit fails or is not implemented on the token.\n    function permit2(\n        address token,\n        address owner,\n        address spender,\n        uint256 amount,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        bool success;\n        /// @solidity memory-safe-assembly\n        assembly {\n            for {} shl(96, xor(token, WETH9)) {} {\n                mstore(0x00, 0x3644e515) // `DOMAIN_SEPARATOR()`.\n                if iszero(\n                    and( // The arguments of `and` are evaluated from right to left.\n                        lt(iszero(mload(0x00)), eq(returndatasize(), 0x20)), // Returns 1 non-zero word.\n                        // Gas stipend to limit gas burn for tokens that don't refund gas when\n                        // an non-existing function is called. 5K should be enough for a SLOAD.\n                        staticcall(5000, token, 0x1c, 0x04, 0x00, 0x20)\n                    )\n                ) { break }\n                // After here, we can be sure that token is a contract.\n                let m := mload(0x40)\n                mstore(add(m, 0x34), spender)\n                mstore(add(m, 0x20), shl(96, owner))\n                mstore(add(m, 0x74), deadline)\n                if eq(mload(0x00), DAI_DOMAIN_SEPARATOR) {\n                    mstore(0x14, owner)\n                    mstore(0x00, 0x7ecebe00000000000000000000000000) // `nonces(address)`.\n                    mstore(add(m, 0x94), staticcall(gas(), token, 0x10, 0x24, add(m, 0x54), 0x20))\n                    mstore(m, 0x8fcbaf0c000000000000000000000000) // `IDAIPermit.permit`.\n                    // `nonces` is already at `add(m, 0x54)`.\n                    // `1` is already stored at `add(m, 0x94)`.\n                    mstore(add(m, 0xb4), and(0xff, v))\n                    mstore(add(m, 0xd4), r)\n                    mstore(add(m, 0xf4), s)\n                    success := call(gas(), token, 0, add(m, 0x10), 0x104, codesize(), 0x00)\n                    break\n                }\n                mstore(m, 0xd505accf000000000000000000000000) // `IERC20Permit.permit`.\n                mstore(add(m, 0x54), amount)\n                mstore(add(m, 0x94), and(0xff, v))\n                mstore(add(m, 0xb4), r)\n                mstore(add(m, 0xd4), s)\n                success := call(gas(), token, 0, add(m, 0x10), 0xe4, codesize(), 0x00)\n                break\n            }\n        }\n        if (!success) simplePermit2(token, owner, spender, amount, deadline, v, r, s);\n    }\n\n    /// @dev Simple permit on the Permit2 contract.\n    function simplePermit2(\n        address token,\n        address owner,\n        address spender,\n        uint256 amount,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let m := mload(0x40)\n            mstore(m, 0x927da105) // `allowance(address,address,address)`.\n            {\n                let addressMask := shr(96, not(0))\n                mstore(add(m, 0x20), and(addressMask, owner))\n                mstore(add(m, 0x40), and(addressMask, token))\n                mstore(add(m, 0x60), and(addressMask, spender))\n                mstore(add(m, 0xc0), and(addressMask, spender))\n            }\n            let p := mul(PERMIT2, iszero(shr(160, amount)))\n            if iszero(\n                and( // The arguments of `and` are evaluated from right to left.\n                    gt(returndatasize(), 0x5f), // Returns 3 words: `amount`, `expiration`, `nonce`.\n                    staticcall(gas(), p, add(m, 0x1c), 0x64, add(m, 0x60), 0x60)\n                )\n            ) {\n                mstore(0x00, 0x6b836e6b8757f0fd) // `Permit2Failed()` or `Permit2AmountOverflow()`.\n                revert(add(0x18, shl(2, iszero(p))), 0x04)\n            }\n            mstore(m, 0x2b67b570) // `Permit2.permit` (PermitSingle variant).\n            // `owner` is already `add(m, 0x20)`.\n            // `token` is already at `add(m, 0x40)`.\n            mstore(add(m, 0x60), amount)\n            mstore(add(m, 0x80), 0xffffffffffff) // `expiration = type(uint48).max`.\n            // `nonce` is already at `add(m, 0xa0)`.\n            // `spender` is already at `add(m, 0xc0)`.\n            mstore(add(m, 0xe0), deadline)\n            mstore(add(m, 0x100), 0x100) // `signature` offset.\n            mstore(add(m, 0x120), 0x41) // `signature` length.\n            mstore(add(m, 0x140), r)\n            mstore(add(m, 0x160), s)\n            mstore(add(m, 0x180), shl(248, v))\n            if iszero( // Revert if token does not have code, or if the call fails.\n            mul(extcodesize(token), call(gas(), p, 0, add(m, 0x1c), 0x184, codesize(), 0x00))) {\n                mstore(0x00, 0x6b836e6b) // `Permit2Failed()`.\n                revert(0x1c, 0x04)\n            }\n        }\n    }\n}\n"
      },
      "dependencies/openzeppelin-contracts-upgradeable-5.0.2/contracts/proxy/utils/Initializable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Storage of the initializable contract.\n     *\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\n     * when using with upgradeable contracts.\n     *\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\n     */\n    struct InitializableStorage {\n        /**\n         * @dev Indicates that the contract has been initialized.\n         */\n        uint64 _initialized;\n        /**\n         * @dev Indicates that the contract is in the process of being initialized.\n         */\n        bool _initializing;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Initializable\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\n\n    /**\n     * @dev The contract is already initialized.\n     */\n    error InvalidInitialization();\n\n    /**\n     * @dev The contract is not initializing.\n     */\n    error NotInitializing();\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint64 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\n     * production.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        // Cache values to avoid duplicated sloads\n        bool isTopLevelCall = !$._initializing;\n        uint64 initialized = $._initialized;\n\n        // Allowed calls:\n        // - initialSetup: the contract is not in the initializing state and no previous version was\n        //                 initialized\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\n        //                 current contract is just being deployed\n        bool initialSetup = initialized == 0 && isTopLevelCall;\n        bool construction = initialized == 1 && address(this).code.length == 0;\n\n        if (!initialSetup && !construction) {\n            revert InvalidInitialization();\n        }\n        $._initialized = 1;\n        if (isTopLevelCall) {\n            $._initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            $._initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint64 version) {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing || $._initialized >= version) {\n            revert InvalidInitialization();\n        }\n        $._initialized = version;\n        $._initializing = true;\n        _;\n        $._initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        _checkInitializing();\n        _;\n    }\n\n    /**\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\n     */\n    function _checkInitializing() internal view virtual {\n        if (!_isInitializing()) {\n            revert NotInitializing();\n        }\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing) {\n            revert InvalidInitialization();\n        }\n        if ($._initialized != type(uint64).max) {\n            $._initialized = type(uint64).max;\n            emit Initialized(type(uint64).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint64) {\n        return _getInitializableStorage()._initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _getInitializableStorage()._initializing;\n    }\n\n    /**\n     * @dev Returns a pointer to the storage namespace.\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\n        assembly {\n            $.slot := INITIALIZABLE_STORAGE\n        }\n    }\n}\n"
      },
      "dependencies/solady-0.0.281/src/utils/UUPSUpgradeable.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/// @notice UUPS proxy mixin.\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/UUPSUpgradeable.sol)\n/// @author Modified from OpenZeppelin\n/// (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/proxy/utils/UUPSUpgradeable.sol)\n///\n/// @dev Note:\n/// - This implementation is intended to be used with ERC1967 proxies.\n/// See: `LibClone.deployERC1967` and related functions.\n/// - This implementation is NOT compatible with legacy OpenZeppelin proxies\n/// which do not store the implementation at `_ERC1967_IMPLEMENTATION_SLOT`.\nabstract contract UUPSUpgradeable {\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                       CUSTOM ERRORS                        */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev The upgrade failed.\n    error UpgradeFailed();\n\n    /// @dev The call is from an unauthorized call context.\n    error UnauthorizedCallContext();\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                         IMMUTABLES                         */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev For checking if the context is a delegate call.\n    uint256 private immutable __self = uint256(uint160(address(this)));\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                           EVENTS                           */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Emitted when the proxy's implementation is upgraded.\n    event Upgraded(address indexed implementation);\n\n    /// @dev `keccak256(bytes(\"Upgraded(address)\"))`.\n    uint256 private constant _UPGRADED_EVENT_SIGNATURE =\n        0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b;\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                          STORAGE                           */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev The ERC-1967 storage slot for the implementation in the proxy.\n    /// `uint256(keccak256(\"eip1967.proxy.implementation\")) - 1`.\n    bytes32 internal constant _ERC1967_IMPLEMENTATION_SLOT =\n        0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                      UUPS OPERATIONS                       */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Please override this function to check if `msg.sender` is authorized\n    /// to upgrade the proxy to `newImplementation`, reverting if not.\n    /// ```\n    ///     function _authorizeUpgrade(address) internal override onlyOwner {}\n    /// ```\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n\n    /// @dev Returns the storage slot used by the implementation,\n    /// as specified in [ERC1822](https://eips.ethereum.org/EIPS/eip-1822).\n    ///\n    /// Note: The `notDelegated` modifier prevents accidental upgrades to\n    /// an implementation that is a proxy contract.\n    function proxiableUUID() public view virtual notDelegated returns (bytes32) {\n        // This function must always return `_ERC1967_IMPLEMENTATION_SLOT` to comply with ERC1967.\n        return _ERC1967_IMPLEMENTATION_SLOT;\n    }\n\n    /// @dev Upgrades the proxy's implementation to `newImplementation`.\n    /// Emits a {Upgraded} event.\n    ///\n    /// Note: Passing in empty `data` skips the delegatecall to `newImplementation`.\n    function upgradeToAndCall(address newImplementation, bytes calldata data)\n        public\n        payable\n        virtual\n        onlyProxy\n    {\n        _authorizeUpgrade(newImplementation);\n        /// @solidity memory-safe-assembly\n        assembly {\n            newImplementation := shr(96, shl(96, newImplementation)) // Clears upper 96 bits.\n            mstore(0x01, 0x52d1902d) // `proxiableUUID()`.\n            let s := _ERC1967_IMPLEMENTATION_SLOT\n            // Check if `newImplementation` implements `proxiableUUID` correctly.\n            if iszero(eq(mload(staticcall(gas(), newImplementation, 0x1d, 0x04, 0x01, 0x20)), s)) {\n                mstore(0x01, 0x55299b49) // `UpgradeFailed()`.\n                revert(0x1d, 0x04)\n            }\n            // Emit the {Upgraded} event.\n            log2(codesize(), 0x00, _UPGRADED_EVENT_SIGNATURE, newImplementation)\n            sstore(s, newImplementation) // Updates the implementation.\n\n            // Perform a delegatecall to `newImplementation` if `data` is non-empty.\n            if data.length {\n                // Forwards the `data` to `newImplementation` via delegatecall.\n                let m := mload(0x40)\n                calldatacopy(m, data.offset, data.length)\n                if iszero(delegatecall(gas(), newImplementation, m, data.length, codesize(), 0x00))\n                {\n                    // Bubble up the revert if the call reverts.\n                    returndatacopy(m, 0x00, returndatasize())\n                    revert(m, returndatasize())\n                }\n            }\n        }\n    }\n\n    /// @dev Requires that the execution is performed through a proxy.\n    modifier onlyProxy() {\n        uint256 s = __self;\n        /// @solidity memory-safe-assembly\n        assembly {\n            // To enable use cases with an immutable default implementation in the bytecode,\n            // (see: ERC6551Proxy), we don't require that the proxy address must match the\n            // value stored in the implementation slot, which may not be initialized.\n            if eq(s, address()) {\n                mstore(0x00, 0x9f03a026) // `UnauthorizedCallContext()`.\n                revert(0x1c, 0x04)\n            }\n        }\n        _;\n    }\n\n    /// @dev Requires that the execution is NOT performed via delegatecall.\n    /// This is the opposite of `onlyProxy`.\n    modifier notDelegated() {\n        uint256 s = __self;\n        /// @solidity memory-safe-assembly\n        assembly {\n            if iszero(eq(s, address())) {\n                mstore(0x00, 0x9f03a026) // `UnauthorizedCallContext()`.\n                revert(0x1c, 0x04)\n            }\n        }\n        _;\n    }\n}\n"
      },
      "dependencies/abracadabra-oft-v1-0.0.1/src/interfaces/ILayerZero.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\ninterface ILzFeeHandler {\n    enum QuoteType {\n        None,\n        Oracle,\n        Fixed\n    }\n\n    function getFee() external view returns (uint256);\n}\n\ninterface ILzCommonOFT is IERC165 {\n    struct LzCallParams {\n        address payable refundAddress;\n        address zroPaymentAddress;\n        bytes adapterParams;\n    }\n\n    function estimateSendFee(\n        uint16 _dstChainId,\n        bytes32 _toAddress,\n        uint _amount,\n        bool _useZro,\n        bytes calldata _adapterParams\n    ) external view returns (uint nativeFee, uint zroFee);\n\n    function estimateSendAndCallFee(\n        uint16 _dstChainId,\n        bytes32 _toAddress,\n        uint _amount,\n        bytes calldata _payload,\n        uint64 _dstGasForCall,\n        bool _useZro,\n        bytes calldata _adapterParams\n    ) external view returns (uint nativeFee, uint zroFee);\n\n    function circulatingSupply() external view returns (uint);\n\n    function token() external view returns (address);\n}\n\ninterface ILzUserApplicationConfig {\n    function setConfig(\n        uint16 _version,\n        uint16 _chainId,\n        uint _configType,\n        bytes calldata _config\n    ) external;\n\n    function setSendVersion(uint16 _version) external;\n\n    function setReceiveVersion(uint16 _version) external;\n\n    function forceResumeReceive(\n        uint16 _srcChainId,\n        bytes calldata _srcAddress\n    ) external;\n}\n\ninterface ILzEndpoint is ILzUserApplicationConfig {\n    function defaultSendLibrary() external view returns (address);\n\n    function send(\n        uint16 _dstChainId,\n        bytes calldata _destination,\n        bytes calldata _payload,\n        address payable _refundAddress,\n        address _zroPaymentAddress,\n        bytes calldata _adapterParams\n    ) external payable;\n\n    function receivePayload(\n        uint16 _srcChainId,\n        bytes calldata _srcAddress,\n        address _dstAddress,\n        uint64 _nonce,\n        uint _gasLimit,\n        bytes calldata _payload\n    ) external;\n\n    function getInboundNonce(\n        uint16 _srcChainId,\n        bytes calldata _srcAddress\n    ) external view returns (uint64);\n\n    function getOutboundNonce(\n        uint16 _dstChainId,\n        address _srcAddress\n    ) external view returns (uint64);\n\n    function estimateFees(\n        uint16 _dstChainId,\n        address _userApplication,\n        bytes calldata _payload,\n        bool _payInZRO,\n        bytes calldata _adapterParam\n    ) external view returns (uint nativeFee, uint zroFee);\n\n    function getChainId() external view returns (uint16);\n\n    function retryPayload(\n        uint16 _srcChainId,\n        bytes calldata _srcAddress,\n        bytes calldata _payload\n    ) external;\n\n    function hasStoredPayload(\n        uint16 _srcChainId,\n        bytes calldata _srcAddress\n    ) external view returns (bool);\n\n    function getSendLibraryAddress(\n        address _userApplication\n    ) external view returns (address);\n\n    function getReceiveLibraryAddress(\n        address _userApplication\n    ) external view returns (address);\n\n    function isSendingPayload() external view returns (bool);\n\n    function isReceivingPayload() external view returns (bool);\n\n    function getConfig(\n        uint16 _version,\n        uint16 _chainId,\n        address _userApplication,\n        uint _configType\n    ) external view returns (bytes memory);\n\n    function getSendVersion(\n        address _userApplication\n    ) external view returns (uint16);\n\n    function getReceiveVersion(\n        address _userApplication\n    ) external view returns (uint16);\n\n    function defaultSendVersion() external view returns (uint16);\n\n    function defaultReceiveVersion() external view returns (uint16);\n\n    function defaultReceiveLibraryAddress() external view returns (address);\n\n    function uaConfigLookup(\n        address _address\n    )\n        external\n        view\n        returns (\n            uint16 sendVersion,\n            uint16 receiveVersion,\n            address receiveLibraryAddress,\n            address sendLibrary\n        );\n}\n\ninterface ILzBaseOFTV2 {\n    function sharedDecimals() external view returns (uint8);\n\n    function innerToken() external view returns (address);\n\n    function feeHandler() external view returns (ILzFeeHandler);\n}\n\ninterface ILzApp {\n    function lzReceive(\n        uint16 _srcChainId,\n        bytes calldata _srcAddress,\n        uint64 _nonce,\n        bytes calldata _payload\n    ) external;\n\n    function minDstGasLookup(\n        uint16 _srcChainId,\n        uint16 _packetType\n    ) external view returns (uint);\n\n    function setTrustedRemote(\n        uint16 _remoteChainId,\n        bytes calldata _path\n    ) external;\n\n    function trustedRemoteLookup(\n        uint16 _srcChainId\n    ) external view returns (bytes memory);\n\n    function setConfig(\n        uint16 _version,\n        uint16 _chainId,\n        uint _configType,\n        bytes calldata _config\n    ) external;\n\n    function lzEndpoint() external view returns (ILzEndpoint);\n}\n\ninterface ILzOFTV2 is ILzCommonOFT {\n    function sendFrom(\n        address _from,\n        uint16 _dstChainId,\n        bytes32 _toAddress,\n        uint _amount,\n        LzCallParams calldata _callParams\n    ) external payable;\n\n    function sendAndCall(\n        address _from,\n        uint16 _dstChainId,\n        bytes32 _toAddress,\n        uint _amount,\n        bytes calldata _payload,\n        uint64 _dstGasForCall,\n        LzCallParams calldata _callParams\n    ) external payable;\n}\n\ninterface ILzOFTReceiverV2 {\n    function onOFTReceived(\n        uint16 _srcChainId,\n        bytes calldata _srcAddress,\n        uint64 _nonce,\n        bytes32 _from,\n        uint _amount,\n        bytes calldata _payload\n    ) external;\n}\n\ninterface ILzUltraLightNodeV2 {\n    function defaultAppConfig(\n        uint16\n    )\n        external\n        view\n        returns (\n            uint16 inboundProofLibraryVersion,\n            uint64 inboundBlockConfirmations,\n            address relayer,\n            uint16 outboundProofType,\n            uint64 outboundBlockConfirmations,\n            address oracle\n        );\n\n    function appConfig(\n        address,\n        uint16\n    )\n        external\n        view\n        returns (\n            uint16 inboundProofLibraryVersion,\n            uint64 inboundBlockConfirmations,\n            address relayer,\n            uint16 outboundProofType,\n            uint64 outboundBlockConfirmations,\n            address oracle\n        );\n}\n\ninterface ILzReceiver {\n    function lzReceive(\n        uint16 _srcChainId,\n        bytes calldata _srcAddress,\n        uint64 _nonce,\n        bytes calldata _payload\n    ) external;\n}\n\ninterface ILzIndirectOFTV2 is ILzBaseOFTV2 {\n    function ld2sdRate() external view returns (uint);\n}\n\ninterface ILzProxyOFTV2 is ILzBaseOFTV2 {\n    function ld2sdRate() external view returns (uint);\n}\n\ninterface IOFTV2View {\n    function lzReceive(\n        uint16 _srcChainId,\n        bytes32 _scrAddress,\n        bytes memory _payload,\n        uint _totalSupply\n    ) external view returns (uint);\n\n    function getInboundNonce(uint16 _srcChainId) external view returns (uint64);\n\n    function getCurrentState() external view returns (uint);\n\n    function isProxy() external view returns (bool);\n}\n\ninterface IPreCrimeView {\n    struct Packet {\n        uint16 srcChainId;\n        bytes32 srcAddress;\n        uint64 nonce;\n        bytes payload;\n    }\n\n    struct SimulationResult {\n        uint chainTotalSupply;\n        bool isProxy;\n    }\n\n    function getConfig(\n        Packet[] calldata _packets\n    ) external view returns (bytes memory);\n\n    function precrime(\n        Packet[] calldata _packets,\n        bytes[] calldata _simulation\n    ) external view returns (uint16 code, bytes memory reason);\n\n    function version() external view returns (uint16);\n\n    function simulate(\n        Packet[] calldata _packets\n    ) external view returns (uint16 code, bytes memory result);\n}\n"
      },
      "src/interfaces/IBentoBoxV1.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\nimport {IERC20} from \"@BoringSolidity/interfaces/IERC20.sol\";\nimport {Rebase} from \"@BoringSolidity/libraries/BoringRebase.sol\";\nimport {IStrategy} from \"/interfaces/IStrategy.sol\";\n\ninterface IFlashBorrower {\n    /// @notice The flashloan callback. `amount` + `fee` needs to repayed to msg.sender before this call returns.\n    /// @param sender The address of the invoker of this flashloan.\n    /// @param token The address of the token that is loaned.\n    /// @param amount of the `token` that is loaned.\n    /// @param fee The fee that needs to be paid on top for this loan. Needs to be the same as `token`.\n    /// @param data Additional data that was passed to the flashloan function.\n    function onFlashLoan(address sender, IERC20 token, uint256 amount, uint256 fee, bytes calldata data) external;\n}\n\ninterface IBatchFlashBorrower {\n    /// @notice The callback for batched flashloans. Every amount + fee needs to repayed to msg.sender before this call returns.\n    /// @param sender The address of the invoker of this flashloan.\n    /// @param tokens Array of addresses for ERC-20 tokens that is loaned.\n    /// @param amounts A one-to-one map to `tokens` that is loaned.\n    /// @param fees A one-to-one map to `tokens` that needs to be paid on top for each loan. Needs to be the same token.\n    /// @param data Additional data that was passed to the flashloan function.\n    function onBatchFlashLoan(\n        address sender,\n        IERC20[] calldata tokens,\n        uint256[] calldata amounts,\n        uint256[] calldata fees,\n        bytes calldata data\n    ) external;\n}\n\ninterface IBentoBoxV1 {\n    function balanceOf(IERC20, address) external view returns (uint256);\n\n    function batch(bytes[] calldata calls, bool revertOnFail) external payable returns (bool[] memory successes, bytes[] memory results);\n\n    function batchFlashLoan(\n        IBatchFlashBorrower borrower,\n        address[] calldata receivers,\n        IERC20[] calldata tokens,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n\n    function claimOwnership() external;\n\n    function flashLoan(IFlashBorrower borrower, address receiver, IERC20 token, uint256 amount, bytes calldata data) external;\n\n    function deploy(address masterContract, bytes calldata data, bool useCreate2) external payable returns (address);\n\n    function deposit(\n        IERC20 token_,\n        address from,\n        address to,\n        uint256 amount,\n        uint256 share\n    ) external payable returns (uint256 amountOut, uint256 shareOut);\n\n    function harvest(IERC20 token, bool balance, uint256 maxChangeAmount) external;\n\n    function masterContractApproved(address, address) external view returns (bool);\n\n    function masterContractOf(address) external view returns (address);\n\n    function nonces(address) external view returns (uint256);\n\n    function owner() external view returns (address);\n\n    function pendingOwner() external view returns (address);\n\n    function pendingStrategy(IERC20) external view returns (IStrategy);\n\n    function permitToken(IERC20 token, address from, address to, uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    function registerProtocol() external;\n\n    function setMasterContractApproval(address user, address masterContract, bool approved, uint8 v, bytes32 r, bytes32 s) external;\n\n    function setStrategy(IERC20 token, IStrategy newStrategy) external;\n\n    function setStrategyTargetPercentage(IERC20 token, uint64 targetPercentage_) external;\n\n    function strategy(IERC20) external view returns (IStrategy);\n\n    function strategyData(IERC20) external view returns (uint64 strategyStartDate, uint64 targetPercentage, uint128 balance);\n\n    function toAmount(IERC20 token, uint256 share, bool roundUp) external view returns (uint256 amount);\n\n    function toShare(IERC20 token, uint256 amount, bool roundUp) external view returns (uint256 share);\n\n    function totals(IERC20) external view returns (Rebase memory totals_);\n\n    function transfer(IERC20 token, address from, address to, uint256 share) external;\n\n    function transferMultiple(IERC20 token, address from, address[] calldata tos, uint256[] calldata shares) external;\n\n    function transferOwnership(address newOwner, bool direct, bool renounce) external;\n\n    function whitelistMasterContract(address masterContract, bool approved) external;\n\n    function whitelistedMasterContracts(address) external view returns (bool);\n\n    function withdraw(\n        IERC20 token_,\n        address from,\n        address to,\n        uint256 amount,\n        uint256 share\n    ) external returns (uint256 amountOut, uint256 shareOut);\n}\n\ninterface IBentoBoxLite {\n    function deposit(\n        address token_,\n        address from,\n        address to,\n        uint256 amount,\n        uint256 share\n    ) external payable returns (uint256 amountOut, uint256 shareOut);\n\n    function withdraw(\n        address token_,\n        address from,\n        address to,\n        uint256 amount,\n        uint256 share\n    ) external returns (uint256 amountOut, uint256 shareOut);\n\n    function balanceOf(address, address) external view returns (uint256);\n\n    function toAmount(address token, uint256 share, bool roundUp) external view returns (uint256 amount);\n\n    function toShare(address token, uint256 amount, bool roundUp) external view returns (uint256 share);\n\n    function transfer(address token, address from, address to, uint256 share) external;\n}\n"
      },
      "src/interfaces/ICauldronV1.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\nimport {IOracle} from \"/interfaces/IOracle.sol\";\n\ninterface ICauldronV1 {\n    function accrue() external;\n\n    function withdrawFees() external;\n\n    function accrueInfo() external view returns (uint64, uint128);\n\n    function setFeeTo(address newFeeTo) external;\n\n    function feeTo() external view returns (address);\n\n    function masterContract() external view returns (ICauldronV1);\n\n    function bentoBox() external view returns (address);\n\n    function exchangeRate() external view returns (uint256 rate);\n\n    function updateExchangeRate() external returns (bool updated, uint256 rate);\n\n    function oracle() external view returns (IOracle);\n\n    function oracleData() external view returns (bytes memory);\n}\n"
      },
      "src/interfaces/ICauldronV2.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\nimport {IERC20} from \"@BoringSolidity/interfaces/IERC20.sol\";\nimport {Rebase} from \"@BoringSolidity/libraries/BoringRebase.sol\";\nimport {IOracle} from \"/interfaces/IOracle.sol\";\n\ninterface ICauldronV2 {\n    function oracle() external view returns (IOracle);\n\n    function oracleData() external view returns (bytes memory);\n\n    function accrueInfo() external view returns (uint64, uint128, uint64);\n\n    function BORROW_OPENING_FEE() external view returns (uint256);\n\n    function COLLATERIZATION_RATE() external view returns (uint256);\n\n    function LIQUIDATION_MULTIPLIER() external view returns (uint256);\n\n    function totalCollateralShare() external view returns (uint256);\n\n    function bentoBox() external view returns (address);\n\n    function feeTo() external view returns (address);\n\n    function masterContract() external view returns (ICauldronV2);\n\n    function collateral() external view returns (IERC20);\n\n    function setFeeTo(address newFeeTo) external;\n\n    function accrue() external;\n\n    function totalBorrow() external view returns (Rebase memory);\n\n    function userBorrowPart(address account) external view returns (uint256);\n\n    function userCollateralShare(address account) external view returns (uint256);\n\n    function withdrawFees() external;\n\n    function cook(\n        uint8[] calldata actions,\n        uint256[] calldata values,\n        bytes[] calldata datas\n    ) external payable returns (uint256 value1, uint256 value2);\n\n    function addCollateral(address to, bool skim, uint256 share) external;\n\n    function removeCollateral(address to, uint256 share) external;\n\n    function borrow(address to, uint256 amount) external returns (uint256 part, uint256 share);\n\n    function repay(address to, bool skim, uint256 part) external returns (uint256 amount);\n\n    function reduceSupply(uint256 amount) external;\n\n    function magicInternetMoney() external view returns (IERC20);\n\n    function liquidate(address[] calldata users, uint256[] calldata maxBorrowParts, address to, address swapper) external;\n\n    function updateExchangeRate() external returns (bool updated, uint256 rate);\n\n    function exchangeRate() external view returns (uint256 rate);\n\n    function init(bytes calldata data) external payable;\n}\n"
      },
      "src/mixins/OwnableOperators.sol": {
        "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.0;\n\n/// @title OwnableOperators\n/// @dev must call `_initializeOwner` to initialize owner\ncontract OwnableOperators {\n    event OwnershipTransferred(address indexed user, address indexed newOwner);\n    event OperatorChanged(address indexed, bool);\n\n    error Unauthorized();\n\n    address public owner;\n    mapping(address => bool) public operators;\n\n    modifier onlyOwner() virtual {\n        if(msg.sender != owner) {\n            revert Unauthorized();\n        }\n        _;\n    }\n\n    modifier onlyOperators() {\n        if (!operators[msg.sender] && msg.sender != owner) {\n            revert Unauthorized();\n        }\n        _;\n    }\n\n    //////////////////////////////////////////////////////////////////////////////////////\n    /// Admin\n    //////////////////////////////////////////////////////////////////////////////////////\n\n    function setOperator(address operator, bool enable) external onlyOwner {\n        operators[operator] = enable;\n        emit OperatorChanged(operator, enable);\n    }\n\n    function transferOwnership(address newOwner) external onlyOwner {\n        owner = newOwner;\n        emit OwnershipTransferred(msg.sender, newOwner);\n    }\n\n    //////////////////////////////////////////////////////////////////////////////////////\n    /// Internals\n    //////////////////////////////////////////////////////////////////////////////////////\n\n    function _initializeOwner(address _owner) internal {\n        owner = _owner;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    function _checkOwner() internal view {\n        if (msg.sender != owner) {\n            revert Unauthorized();\n        }\n    }\n}\n"
      },
      "src/interfaces/IMultiRewardsStaking.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\ninterface IMultiRewardsStaking {\n    struct Reward {\n        uint256 rewardsDuration;\n        uint256 periodFinish;\n        uint256 rewardRate;\n        uint256 lastUpdateTime;\n        uint256 rewardPerTokenStored;\n    }\n\n    function ROLE_OPERATOR() external view returns (uint256);\n\n    function ROLE_REWARD_DISTRIBUTOR() external view returns (uint256);\n\n    function addReward(address rewardToken, uint256 _rewardsDuration) external;\n\n    function balanceOf(address user) external view returns (uint256 amount);\n\n    function earned(address user, address rewardToken) external view returns (uint256);\n\n    function exit() external;\n\n    function getRewardForDuration(address rewardToken) external view returns (uint256);\n\n    function getRewards() external;\n\n    function lastTimeRewardApplicable(address rewardToken) external view returns (uint256);\n\n    function notifyRewardAmount(address rewardToken, uint256 amount) external;\n\n    function operators(address) external view returns (bool);\n\n    function owner() external view returns (address);\n\n    function pause() external;\n\n    function paused() external view returns (bool);\n\n    function recover(address tokenAddress, uint256 tokenAmount) external;\n\n    function rewardData(address token) external view returns (Reward memory);\n\n    function rewardPerToken(address rewardToken) external view returns (uint256);\n\n    function rewardTokens(uint256) external view returns (address);\n\n    function rewards(address user, address token) external view returns (uint256 amount);\n\n    function setOperator(address operator, bool status) external;\n\n    function setRewardsDuration(address rewardToken, uint256 _rewardsDuration) external;\n\n    function stake(uint256 amount) external;\n\n    function stakingToken() external view returns (address);\n\n    function totalSupply() external view returns (uint256);\n\n    function transferOwnership(address newOwner) external;\n\n    function unpause() external;\n\n    function userRewardPerTokenPaid(address user, address token) external view returns (uint256 amount);\n\n    function getRewardTokenLength() external view returns (uint256);\n\n    function isSupportedReward(address rewardToken) external view returns (bool);\n\n    function withdraw(uint256 amount) external;\n}\n"
      },
      "src/periphery/CauldronRegistry.sol": {
        "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.0;\n\nimport {OwnableOperators} from \"/mixins/OwnableOperators.sol\";\n\nstruct CauldronInfo {\n    address cauldron;\n    uint8 version;\n    bool deprecated;\n}\n\ncontract CauldronRegistry is OwnableOperators {\n    event LogCauldronRegistered(address indexed cauldron, uint8 version, bool deprecated);\n    event LogCauldronRemoved(address indexed cauldron);\n    event LogCauldronDeprecated(address indexed cauldron, bool deprecated);\n\n    error ErrAlreadyRegistered(address cauldron_);\n    error ErrNotRegistered(address cauldron_);\n    error ErrEmptyRegistry();\n    error ErrTooManyCauldrons();\n    error ErrInvalidCauldron(address cauldron_);\n\n    CauldronInfo[] public cauldrons;\n    mapping(address => uint256) internal cauldronIndicies;\n\n    constructor(address owner_) {\n        _initializeOwner(owner_);\n    }\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // VIEWS\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    function length() public view returns (uint256) {\n        return cauldrons.length;\n    }\n\n    function get(address cauldron_) public view returns (CauldronInfo memory) {\n        uint256 cauldronIndex = cauldronIndicies[cauldron_];\n        if (!registered(cauldron_)) {\n            revert ErrNotRegistered(cauldron_);\n        }\n\n        return cauldrons[cauldronIndex];\n    }\n\n    function registered(address cauldron_) public view returns (bool) {\n        return cauldronIndicies[cauldron_] != 0 || (cauldrons.length != 0 && cauldrons[0].cauldron == cauldron_);\n    }\n\n    function get(uint256 index_) public view returns (CauldronInfo memory) {\n        if (index_ >= cauldrons.length) {\n            revert ErrNotRegistered(address(0));\n        }\n\n        return cauldrons[index_];\n    }\n\n    function isDeprecated(address cauldron_) public view returns (bool) {\n        return get(cauldron_).deprecated;\n    }\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // OPERATORS\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    function add(CauldronInfo[] calldata items_) external onlyOperators {\n        for (uint256 i = 0; i < items_.length; ++i) {\n            CauldronInfo memory item = items_[i];\n\n            if (item.cauldron == address(0)) {\n                revert ErrInvalidCauldron(item.cauldron);\n            }\n\n            if (registered(item.cauldron)) {\n                revert ErrAlreadyRegistered(item.cauldron);\n            }\n\n            uint256 cauldronIndex = cauldrons.length;\n            cauldrons.push(item);\n            cauldronIndicies[item.cauldron] = cauldronIndex;\n\n            emit LogCauldronRegistered(item.cauldron, item.version, item.deprecated);\n        }\n    }\n\n    function setDeprecated(address cauldron_, bool deprecated_) external onlyOperators {\n        if (!registered(cauldron_)) {\n            revert ErrNotRegistered(cauldron_);\n        }\n\n        cauldrons[cauldronIndicies[cauldron_]].deprecated = deprecated_;\n        emit LogCauldronDeprecated(cauldron_, deprecated_);\n    }\n\n    function remove(address[] calldata cauldrons_) external onlyOperators {\n        if (cauldrons.length == 0) {\n            revert ErrEmptyRegistry();\n        }\n\n        if (cauldrons.length < cauldrons_.length) {\n            revert ErrTooManyCauldrons();\n        }\n\n        for (uint256 i = 0; i < cauldrons_.length; ++i) {\n            address cauldron = cauldrons_[i];\n\n            if (address(cauldron) == address(0)) {\n                revert ErrInvalidCauldron(cauldron);\n            }\n\n            uint256 cauldronIndex = cauldronIndicies[cauldron];\n            if (cauldronIndex == 0 && cauldrons[0].cauldron != cauldron) {\n                revert ErrNotRegistered(cauldron);\n            }\n\n            uint256 lastIndex = cauldrons.length - 1;\n            if (cauldronIndex == lastIndex) {\n                cauldrons.pop();\n                delete cauldronIndicies[cauldron];\n                emit LogCauldronRemoved(cauldron);\n            } else {\n                cauldronIndicies[cauldrons[lastIndex].cauldron] = cauldronIndex;\n                cauldrons[cauldronIndex] = cauldrons[lastIndex];\n                cauldrons.pop();\n                delete cauldronIndicies[cauldron];\n                emit LogCauldronRemoved(cauldron);\n            }\n        }\n    }\n}\n"
      },
      "src/mixins/FeeCollectable.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\nabstract contract FeeCollectable {\n    error ErrInvalidFeeBips();\n    error ErrInvalidFeeOperator(address);\n    event LogFeeParametersChanged(\n        address indexed previousFeeCollector,\n        uint16 previousFeeAmount,\n        address indexed feeCollector,\n        uint16 feeAmount\n    );\n\n    uint256 internal constant BIPS = 10_000;\n\n    uint16 public feeBips;\n    address public feeCollector;\n\n    modifier onlyAllowedFeeOperator() {\n        if (!_isFeeOperator(msg.sender)) {\n            revert ErrInvalidFeeOperator(msg.sender);\n        }\n        _;\n    }\n\n    function setFeeParameters(address _feeCollector, uint16 _feeBips) external onlyAllowedFeeOperator {\n        if (feeBips > BIPS) {\n            revert ErrInvalidFeeBips();\n        }\n\n        emit LogFeeParametersChanged(feeCollector, feeBips, _feeCollector, _feeBips);\n\n        feeCollector = _feeCollector;\n        feeBips = _feeBips;\n    }\n\n    ////////////////////////////////////////////////////////////////////////////////\n    // Internals\n    ////////////////////////////////////////////////////////////////////////////////\n\n    function _calculateFees(uint256 amountIn) internal view returns (uint userAmount, uint feeAmount) {\n        feeAmount = (amountIn * feeBips) / BIPS;\n        userAmount = amountIn - feeAmount;\n    }\n\n    function _isFeeOperator(address account) internal virtual returns (bool);\n}\n"
      },
      "dependencies/openzeppelin-contracts-5.0.2/contracts/utils/introspection/IERC165.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
      },
      "dependencies/BoringSolidity-1.0.0/contracts/interfaces/IERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IERC20 {\n    // transfer and tranferFrom have been removed, because they don't work on all tokens (some aren't ERC20 complaint).\n    // By removing them you can't accidentally use them.\n    // name, symbol and decimals have been removed, because they are optional and sometimes wrongly implemented (MKR).\n    // Use BoringERC20 with `using BoringERC20 for IERC20` and call `safeTransfer`, `safeTransferFrom`, etc instead.\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /// @notice EIP 2612\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n}\n\ninterface IStrictERC20 {\n    // This is the strict ERC20 interface. Don't use this, certainly not if you don't control the ERC20 token you're calling.\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address _owner) external view returns (uint256 balance);\n    function transfer(address _to, uint256 _value) external returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\n    function approve(address _spender, uint256 _value) external returns (bool success);\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /// @notice EIP 2612\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n}\n"
      },
      "dependencies/BoringSolidity-1.0.0/contracts/libraries/BoringRebase.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport {BoringMath, BoringMath128} from \"./BoringMath.sol\";\n\nstruct Rebase {\n    uint128 elastic;\n    uint128 base;\n}\n\n/// @notice A rebasing library using overflow-/underflow-safe math.\nlibrary RebaseLibrary {\n    using BoringMath for uint256;\n    using BoringMath128 for uint128;\n\n    /// @notice Calculates the base value in relationship to `elastic` and `total`.\n    function toBase(\n        Rebase memory total,\n        uint256 elastic,\n        bool roundUp\n    ) internal pure returns (uint256 base) {\n        if (total.elastic == 0) {\n            base = elastic;\n        } else {\n            base = (elastic * total.base) / total.elastic;\n            if (roundUp && (base * total.elastic) / total.base < elastic) {\n                base++;\n            }\n        }\n    }\n\n    /// @notice Calculates the elastic value in relationship to `base` and `total`.\n    function toElastic(\n        Rebase memory total,\n        uint256 base,\n        bool roundUp\n    ) internal pure returns (uint256 elastic) {\n        if (total.base == 0) {\n            elastic = base;\n        } else {\n            elastic = (base * total.elastic) / total.base;\n            if (roundUp && (elastic * total.base) / total.elastic < base) {\n                elastic++;\n            }\n        }\n    }\n\n    /// @notice Add `elastic` to `total` and doubles `total.base`.\n    /// @return (Rebase) The new total.\n    /// @return base in relationship to `elastic`.\n    function add(\n        Rebase memory total,\n        uint256 elastic,\n        bool roundUp\n    ) internal pure returns (Rebase memory, uint256 base) {\n        base = toBase(total, elastic, roundUp);\n        total.elastic += elastic.to128();\n        total.base += base.to128();\n        return (total, base);\n    }\n\n    /// @notice Sub `base` from `total` and update `total.elastic`.\n    /// @return (Rebase) The new total.\n    /// @return elastic in relationship to `base`.\n    function sub(\n        Rebase memory total,\n        uint256 base,\n        bool roundUp\n    ) internal pure returns (Rebase memory, uint256 elastic) {\n        elastic = toElastic(total, base, roundUp);\n        total.elastic -= elastic.to128();\n        total.base -= base.to128();\n        return (total, elastic);\n    }\n\n    /// @notice Add `elastic` and `base` to `total`.\n    function add(\n        Rebase memory total,\n        uint256 elastic,\n        uint256 base\n    ) internal pure returns (Rebase memory) {\n        total.elastic += elastic.to128();\n        total.base += base.to128();\n        return total;\n    }\n\n    /// @notice Subtract `elastic` and `base` to `total`.\n    function sub(\n        Rebase memory total,\n        uint256 elastic,\n        uint256 base\n    ) internal pure returns (Rebase memory) {\n        total.elastic -= elastic.to128();\n        total.base -= base.to128();\n        return total;\n    }\n\n    /// @notice Add `elastic` to `total` and update storage.\n    /// @return newElastic Returns updated `elastic`.\n    function addElastic(Rebase storage total, uint256 elastic) internal returns (uint256 newElastic) {\n        newElastic = total.elastic += elastic.to128();\n    }\n\n    /// @notice Subtract `elastic` from `total` and update storage.\n    /// @return newElastic Returns updated `elastic`.\n    function subElastic(Rebase storage total, uint256 elastic) internal returns (uint256 newElastic) {\n        newElastic = total.elastic -= elastic.to128();\n    }\n}\n"
      },
      "src/interfaces/IStrategy.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\ninterface IStrategy {\n    function skim(uint256 amount) external;\n\n    function harvest(uint256 balance, address sender) external returns (int256 amountAdded);\n\n    function withdraw(uint256 amount) external returns (uint256 actualAmount);\n\n    function exit(uint256 balance) external returns (int256 amountAdded);\n}\n"
      },
      "src/interfaces/IOracle.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\ninterface IOracle {\n    function decimals() external view returns (uint8);\n\n    function get(bytes calldata data) external returns (bool success, uint256 rate);\n\n    function peek(bytes calldata data) external view returns (bool success, uint256 rate);\n\n    function peekSpot(bytes calldata data) external view returns (uint256 rate);\n\n    function symbol(bytes calldata data) external view returns (string memory);\n\n    function name(bytes calldata data) external view returns (string memory);\n}\n"
      },
      "dependencies/BoringSolidity-1.0.0/contracts/libraries/BoringMath.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\nlibrary BoringMath {\n    error ErrOverflow();\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    function to32(uint256 a) internal pure returns (uint32) {\n        if (a > type(uint32).max) {\n            revert ErrOverflow();\n        }\n        return uint32(a);\n    }\n\n    function to40(uint256 a) internal pure returns (uint40) {\n        if (a > type(uint40).max) {\n            revert ErrOverflow();\n        }\n        return uint40(a);\n    }\n\n    function to64(uint256 a) internal pure returns (uint64) {\n        if (a > type(uint64).max) {\n            revert ErrOverflow();\n        }\n        return uint64(a);\n    }\n\n    function to112(uint256 a) internal pure returns (uint112) {\n        if (a > type(uint112).max) {\n            revert ErrOverflow();\n        }\n        return uint112(a);\n    }\n\n    function to128(uint256 a) internal pure returns (uint128) {\n        if (a > type(uint128).max) {\n            revert ErrOverflow();\n        }\n        return uint128(a);\n    }\n\n    function to208(uint256 a) internal pure returns (uint208) {\n        if (a > type(uint208).max) {\n            revert ErrOverflow();\n        }\n        return uint208(a);\n    }\n\n    function to216(uint256 a) internal pure returns (uint216) {\n        if (a > type(uint216).max) {\n            revert ErrOverflow();\n        }\n        return uint216(a);\n    }\n\n    function to224(uint256 a) internal pure returns (uint224) {\n        if (a > type(uint224).max) {\n            revert ErrOverflow();\n        }\n        return uint224(a);\n    }\n}\n\nlibrary BoringMath32 {\n    function add(uint32 a, uint32 b) internal pure returns (uint32) {\n        return a + b;\n    }\n\n    function sub(uint32 a, uint32 b) internal pure returns (uint32) {\n        return a - b;\n    }\n\n    function mul(uint32 a, uint32 b) internal pure returns (uint32) {\n        return a * b;\n    }\n\n    function div(uint32 a, uint32 b) internal pure returns (uint32) {\n        return a / b;\n    }\n}\n\nlibrary BoringMath64 {\n    function add(uint64 a, uint64 b) internal pure returns (uint64) {\n        return a + b;\n    }\n\n    function sub(uint64 a, uint64 b) internal pure returns (uint64) {\n        return a - b;\n    }\n\n    function mul(uint64 a, uint64 b) internal pure returns (uint64) {\n        return a * b;\n    }\n\n    function div(uint64 a, uint64 b) internal pure returns (uint64) {\n        return a / b;\n    }\n}\n\nlibrary BoringMath112 {\n    function add(uint112 a, uint112 b) internal pure returns (uint112) {\n        return a + b;\n    }\n\n    function sub(uint112 a, uint112 b) internal pure returns (uint112) {\n        return a - b;\n    }\n\n    function mul(uint112 a, uint112 b) internal pure returns (uint112) {\n        return a * b;\n    }\n\n    function div(uint112 a, uint112 b) internal pure returns (uint112) {\n        return a / b;\n    }\n}\n\nlibrary BoringMath128 {\n    function add(uint128 a, uint128 b) internal pure returns (uint128) {\n        return a + b;\n    }\n\n    function sub(uint128 a, uint128 b) internal pure returns (uint128) {\n        return a - b;\n    }\n\n    function mul(uint128 a, uint128 b) internal pure returns (uint128) {\n        return a * b;\n    }\n\n    function div(uint128 a, uint128 b) internal pure returns (uint128) {\n        return a / b;\n    }\n}\n\nlibrary BoringMath224 {\n    function add(uint224 a, uint224 b) internal pure returns (uint224) {\n        return a + b;\n    }\n\n    function sub(uint224 a, uint224 b) internal pure returns (uint224) {\n        return a - b;\n    }\n\n    function mul(uint224 a, uint224 b) internal pure returns (uint224) {\n        return a * b;\n    }\n\n    function div(uint224 a, uint224 b) internal pure returns (uint224) {\n        return a / b;\n    }\n}\n"
      }
    },
    "settings": {
      "remappings": [
        "/=src/",
        "forge-std/=dependencies/forge-std-1.9.5/src/",
        "halmos-cheatcodes/=dependencies/halmos-cheatcodes-3ca0e11/src/",
        "@openzeppelin/contracts/=dependencies/openzeppelin-contracts-5.0.2/contracts/",
        "@openzeppelin/contracts-upgradeable/=dependencies/openzeppelin-contracts-upgradeable-5.0.2/contracts/",
        "@BoringSolidity/=dependencies/BoringSolidity-1.0.0/contracts/",
        "@solady/=dependencies/solady-0.0.281/src/",
        "@solmate/=dependencies/solmate-6.2.0/src/",
        "@excessivelySafeCall/=dependencies/ExcessivelySafeCall-0.0.1/src/",
        "@safe-contracts/=dependencies/safe-contracts-1.3.0/contracts/",
        "@fuzzlib/=dependencies/fuzzlib-0.0.1/src/",
        "@abracadabra-oft-v1/=dependencies/abracadabra-oft-v1-0.0.1/src/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 400
      },
      "metadata": {
        "useLiteralContent": false,
        "bytecodeHash": "ipfs",
        "appendCBOR": true
      },
      "outputSelection": {
        "*": {
          "*": [
            "abi",
            "evm.bytecode.object",
            "evm.bytecode.sourceMap",
            "evm.bytecode.linkReferences",
            "evm.deployedBytecode.object",
            "evm.deployedBytecode.sourceMap",
            "evm.deployedBytecode.linkReferences",
            "evm.deployedBytecode.immutableReferences",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "evmVersion": "cancun",
      "viaIR": false,
      "libraries": {}
    }
  },
  "compiler": "0.8.28+commit.7893614a"
}