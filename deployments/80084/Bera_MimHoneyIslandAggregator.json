{
  "address": "0xad2f284Db532A57d6940F3A46D875549DCEB030d",
  "abi": [
    {
      "type": "constructor",
      "inputs": [
        {
          "name": "island_",
          "type": "address",
          "internalType": "contract IKodiakVaultV1"
        },
        {
          "name": "tokenAggregator0",
          "type": "address",
          "internalType": "contract IAggregator"
        },
        {
          "name": "tokenAggregator1",
          "type": "address",
          "internalType": "contract IAggregator"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "WAD",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "decimals",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint8",
          "internalType": "uint8"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "island",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "contract IKodiakVaultV1"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "latestAnswer",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "int256",
          "internalType": "int256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "latestRoundData",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint80",
          "internalType": "uint80"
        },
        {
          "name": "",
          "type": "int256",
          "internalType": "int256"
        },
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "",
          "type": "uint80",
          "internalType": "uint80"
        }
      ],
      "stateMutability": "view"
    }
  ],
  "bytecode": "0x6101c0604052348015610010575f80fd5b50604051610d5f380380610d5f83398101604081905261002f916103c3565b826001600160a01b03166080816001600160a01b0316815250505f836001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610086573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906100aa919061040d565b6001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156100e5573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610109919061042f565b6001600160a01b03841660a05260ff811660c081905290915061012d906012610463565b61013890600a61055f565b60e08181525050826001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561017b573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061019f919061042f565b6101ad9060ff166012610463565b6101b890600a61055f565b6101008181525050836001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101fc573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610220919061040d565b6001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561025b573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061027f919061042f565b6001600160a01b0383166101205260ff81166101408190529091506102a5906012610463565b6102b090600a61055f565b6101608181525050816001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102f4573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610318919061042f565b6103269060ff166012610463565b61033190600a61055f565b61018081815250506080516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610377573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061039b919061042f565b60ff166101a0525061056a92505050565b6001600160a01b03811681146103c0575f80fd5b50565b5f805f606084860312156103d5575f80fd5b83516103e0816103ac565b60208501519093506103f1816103ac565b6040850151909250610402816103ac565b809150509250925092565b5f6020828403121561041d575f80fd5b8151610428816103ac565b9392505050565b5f6020828403121561043f575f80fd5b815160ff81168114610428575f80fd5b634e487b7160e01b5f52601160045260245ffd5b818103818111156104765761047661044f565b92915050565b6001815b60018411156104b75780850481111561049b5761049b61044f565b60018416156104a957908102905b60019390931c928002610480565b935093915050565b5f826104cd57506001610476565b816104d957505f610476565b81600181146104ef57600281146104f957610515565b6001915050610476565b60ff84111561050a5761050a61044f565b50506001821b610476565b5060208310610133831016604e8410600b8410161715610538575081810a610476565b6105445f19848461047c565b805f19048211156105575761055761044f565b029392505050565b5f61042883836104bf565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516107806105df5f395f605e01525f61027701525f61037101525f50505f6101be01525f61024501525f61034401525f50505f61013701525f818160ba015281816102cf015261039b01526107805ff3fe608060405234801561000f575f80fd5b5060043610610055575f3560e01c8063313ce5671461005957806350d25bcd146100975780636a146024146100ad578063db5537e1146100b5578063feaf968c146100f4575b5f80fd5b6100807f000000000000000000000000000000000000000000000000000000000000000081565b60405160ff90911681526020015b60405180910390f35b61009f610133565b60405190815260200161008e565b61009f601281565b6100dc7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161008e565b6100fc610456565b6040805169ffffffffffffffffffff968716815260208101959095528401929092526060830152909116608082015260a00161008e565b5f807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610191573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906101b59190610666565b5050509150505f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610218573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061023c9190610666565b5050509150505f7f00000000000000000000000000000000000000000000000000000000000000008361026f91906106c8565b90505f61029c7f0000000000000000000000000000000000000000000000000000000000000000846106c8565b90505f6102a98383610476565b60405163b670ed7d60e01b81526001600160a01b0382811660048301529192505f9182917f00000000000000000000000000000000000000000000000000000000000000009091169063b670ed7d906024016040805180830381865afa158015610315573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061033991906106df565b90925090505f6103697f0000000000000000000000000000000000000000000000000000000000000000846106c8565b90505f6103967f0000000000000000000000000000000000000000000000000000000000000000846106c8565b90505f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103f5573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104199190610701565b90505f61042688846106c8565b6104308a866106c8565b61043a9190610718565b9050610446828261072b565b9b50505050505050505050505090565b5f805f805f80610464610133565b90969095505f94508493508392509050565b5f633b9aca006104a18361049286670de0b6b3a76400006106c8565b61049c919061072b565b6104cb565b6104b8906c010000000000000000000000006106c8565b6104c2919061072b565b90505b92915050565b5f815f036104da57505f919050565b816001600160801b82106104f35760809190911c9060401b5b68010000000000000000821061050e5760409190911c9060201b5b64010000000082106105255760209190911c9060101b5b62010000821061053a5760109190911c9060081b5b610100821061054e5760089190911c9060041b5b601082106105615760049190911c9060021b5b6008821061056d5760011b5b6001610579828661072b565b6105839083610718565b901c90506001610593828661072b565b61059d9083610718565b901c905060016105ad828661072b565b6105b79083610718565b901c905060016105c7828661072b565b6105d19083610718565b901c905060016105e1828661072b565b6105eb9083610718565b901c905060016105fb828661072b565b6106059083610718565b901c90506001610615828661072b565b61061f9083610718565b901c90505f61062e828661072b565b905080821061063d578061063f565b815b95945050505050565b805169ffffffffffffffffffff81168114610661575f80fd5b919050565b5f805f805f60a0868803121561067a575f80fd5b61068386610648565b602087015160408801516060890151929750909550935091506106a860808701610648565b90509295509295909350565b634e487b7160e01b5f52601160045260245ffd5b80820281158282048414176104c5576104c56106b4565b5f80604083850312156106f0575f80fd5b505080516020909101519092909150565b5f60208284031215610711575f80fd5b5051919050565b808201808211156104c5576104c56106b4565b5f8261074557634e487b7160e01b5f52601260045260245ffd5b50049056fea264697066735822122022753e146dc6fd741de43caa480146687f711c015589f7534b6e7042da73635664736f6c634300081a0033",
  "args_data": "0x00000000000000000000000074e852a4f88bfbeff01275bb95d5ed77f2967d1200000000000000000000000014d6df05ce338f8b32491532e9e0b23838ad213e00000000000000000000000014d6df05ce338f8b32491532e9e0b23838ad213e",
  "tx_hash": "0x2b5e8a1f626b889059655d34cfc3c415f04ffc3c8de97d2ce1ae40e9a9f90e32",
  "args": [
    "0x74E852a4f88bfbEff01275bB95d5ed77f2967d12",
    "0x14D6dF05Ce338f8b32491532E9E0b23838AD213E",
    "0x14D6dF05Ce338f8b32491532E9E0b23838AD213E"
  ],
  "data": "0x6101c0604052348015610010575f80fd5b50604051610d5f380380610d5f83398101604081905261002f916103c3565b826001600160a01b03166080816001600160a01b0316815250505f836001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610086573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906100aa919061040d565b6001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156100e5573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610109919061042f565b6001600160a01b03841660a05260ff811660c081905290915061012d906012610463565b61013890600a61055f565b60e08181525050826001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561017b573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061019f919061042f565b6101ad9060ff166012610463565b6101b890600a61055f565b6101008181525050836001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101fc573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610220919061040d565b6001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561025b573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061027f919061042f565b6001600160a01b0383166101205260ff81166101408190529091506102a5906012610463565b6102b090600a61055f565b6101608181525050816001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102f4573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610318919061042f565b6103269060ff166012610463565b61033190600a61055f565b61018081815250506080516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610377573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061039b919061042f565b60ff166101a0525061056a92505050565b6001600160a01b03811681146103c0575f80fd5b50565b5f805f606084860312156103d5575f80fd5b83516103e0816103ac565b60208501519093506103f1816103ac565b6040850151909250610402816103ac565b809150509250925092565b5f6020828403121561041d575f80fd5b8151610428816103ac565b9392505050565b5f6020828403121561043f575f80fd5b815160ff81168114610428575f80fd5b634e487b7160e01b5f52601160045260245ffd5b818103818111156104765761047661044f565b92915050565b6001815b60018411156104b75780850481111561049b5761049b61044f565b60018416156104a957908102905b60019390931c928002610480565b935093915050565b5f826104cd57506001610476565b816104d957505f610476565b81600181146104ef57600281146104f957610515565b6001915050610476565b60ff84111561050a5761050a61044f565b50506001821b610476565b5060208310610133831016604e8410600b8410161715610538575081810a610476565b6105445f19848461047c565b805f19048211156105575761055761044f565b029392505050565b5f61042883836104bf565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516107806105df5f395f605e01525f61027701525f61037101525f50505f6101be01525f61024501525f61034401525f50505f61013701525f818160ba015281816102cf015261039b01526107805ff3fe608060405234801561000f575f80fd5b5060043610610055575f3560e01c8063313ce5671461005957806350d25bcd146100975780636a146024146100ad578063db5537e1146100b5578063feaf968c146100f4575b5f80fd5b6100807f000000000000000000000000000000000000000000000000000000000000000081565b60405160ff90911681526020015b60405180910390f35b61009f610133565b60405190815260200161008e565b61009f601281565b6100dc7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161008e565b6100fc610456565b6040805169ffffffffffffffffffff968716815260208101959095528401929092526060830152909116608082015260a00161008e565b5f807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610191573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906101b59190610666565b5050509150505f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610218573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061023c9190610666565b5050509150505f7f00000000000000000000000000000000000000000000000000000000000000008361026f91906106c8565b90505f61029c7f0000000000000000000000000000000000000000000000000000000000000000846106c8565b90505f6102a98383610476565b60405163b670ed7d60e01b81526001600160a01b0382811660048301529192505f9182917f00000000000000000000000000000000000000000000000000000000000000009091169063b670ed7d906024016040805180830381865afa158015610315573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061033991906106df565b90925090505f6103697f0000000000000000000000000000000000000000000000000000000000000000846106c8565b90505f6103967f0000000000000000000000000000000000000000000000000000000000000000846106c8565b90505f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103f5573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104199190610701565b90505f61042688846106c8565b6104308a866106c8565b61043a9190610718565b9050610446828261072b565b9b50505050505050505050505090565b5f805f805f80610464610133565b90969095505f94508493508392509050565b5f633b9aca006104a18361049286670de0b6b3a76400006106c8565b61049c919061072b565b6104cb565b6104b8906c010000000000000000000000006106c8565b6104c2919061072b565b90505b92915050565b5f815f036104da57505f919050565b816001600160801b82106104f35760809190911c9060401b5b68010000000000000000821061050e5760409190911c9060201b5b64010000000082106105255760209190911c9060101b5b62010000821061053a5760109190911c9060081b5b610100821061054e5760089190911c9060041b5b601082106105615760049190911c9060021b5b6008821061056d5760011b5b6001610579828661072b565b6105839083610718565b901c90506001610593828661072b565b61059d9083610718565b901c905060016105ad828661072b565b6105b79083610718565b901c905060016105c7828661072b565b6105d19083610718565b901c905060016105e1828661072b565b6105eb9083610718565b901c905060016105fb828661072b565b6106059083610718565b901c90506001610615828661072b565b61061f9083610718565b901c90505f61062e828661072b565b905080821061063d578061063f565b815b95945050505050565b805169ffffffffffffffffffff81168114610661575f80fd5b919050565b5f805f805f60a0868803121561067a575f80fd5b61068386610648565b602087015160408801516060890151929750909550935091506106a860808701610648565b90509295509295909350565b634e487b7160e01b5f52601160045260245ffd5b80820281158282048414176104c5576104c56106b4565b5f80604083850312156106f0575f80fd5b505080516020909101519092909150565b5f60208284031215610711575f80fd5b5051919050565b808201808211156104c5576104c56106b4565b5f8261074557634e487b7160e01b5f52601260045260245ffd5b50049056fea264697066735822122022753e146dc6fd741de43caa480146687f711c015589f7534b6e7042da73635664736f6c634300081a003300000000000000000000000074e852a4f88bfbeff01275bb95d5ed77f2967d1200000000000000000000000014d6df05ce338f8b32491532e9e0b23838ad213e00000000000000000000000014d6df05ce338f8b32491532e9e0b23838ad213e",
  "artifact_path": "KodiakIslandAggregator.sol",
  "artifact_full_path": "KodiakIslandAggregator.sol:KodiakIslandAggregator",
  "standardJsonInput": {
    "language": "Solidity",
    "sources": {
      "src/oracles/aggregators/KodiakIslandAggregator.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\nimport {IERC20Metadata} from \"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\";\nimport {IAggregator} from \"/interfaces/IAggregator.sol\";\nimport {BabylonianLib} from \"/libraries/BabylonianLib.sol\";\nimport {IKodiakVaultV1} from \"/interfaces/IKodiak.sol\";\n\n/// @title KodiakIslandLPAggregator\n/// @author Berastotle\n/// @notice Aggregator used for getting the price of an LP token denominated in USD.\n/// @dev Extend Uniswap V2 solution based on here https://blog.alphafinance.io/fair-lp-token-pricing/ to Kodiak UniV3 ALM\ncontract KodiakIslandAggregator is IAggregator {\n    uint256 public constant WAD = 18;\n\n    IKodiakVaultV1 public immutable island;\n    IAggregator immutable aggregator0;\n    uint8 immutable decimals0;\n    uint256 immutable tokenDecimalScale0;\n    uint256 immutable aggregatorDecimalScale0;\n    IAggregator immutable aggregator1;\n    uint8 immutable decimals1;\n    uint256 immutable tokenDecimalScale1;\n    uint256 immutable aggregatorDecimalScale1;\n\n    uint8 public immutable override decimals;\n\n    constructor(IKodiakVaultV1 island_, IAggregator tokenAggregator0, IAggregator tokenAggregator1) {\n        island = island_;\n        uint8 decimal;\n\n        // Token0\n        decimal = IERC20Metadata(island_.token0()).decimals();\n        aggregator0 = tokenAggregator0;\n        decimals0 = decimal;\n        tokenDecimalScale0 = (10 ** (WAD - decimal));\n        aggregatorDecimalScale0 = 10 ** (WAD - tokenAggregator0.decimals());\n\n        // Token1\n        decimal = IERC20Metadata(island_.token1()).decimals();\n        aggregator1 = tokenAggregator1;\n        decimals1 = decimal;\n        tokenDecimalScale1 = (10 ** (WAD - decimal));\n        aggregatorDecimalScale1 = 10 ** (WAD - tokenAggregator1.decimals());\n\n        decimals = IERC20Metadata(address(island)).decimals();\n    }\n\n    function latestAnswer() public view override returns (int256) {\n        (, int256 feed0, , , ) = aggregator0.latestRoundData();\n        (, int256 feed1, , , ) = aggregator1.latestRoundData();\n\n        uint256 normalizedPriceFeed0 = uint256(feed0) * aggregatorDecimalScale0;\n        uint256 normalizedPriceFeed1 = uint256(feed1) * aggregatorDecimalScale1;\n        uint160 priceSqrtRatioX96 = _getSqrtPriceX96(normalizedPriceFeed0, normalizedPriceFeed1);\n        (uint256 reserve0, uint256 reserve1) = island.getUnderlyingBalancesAtPrice(priceSqrtRatioX96);\n        \n        uint256 normalizedReserve0 = reserve0 * tokenDecimalScale0;\n        uint256 normalizedReserve1 = reserve1 * tokenDecimalScale1;\n        uint256 totalSupply = island.totalSupply();\n        uint256 totalValue = (normalizedReserve0 * normalizedPriceFeed0) + (normalizedReserve1 * normalizedPriceFeed1);\n\n        return int256(totalValue / totalSupply);\n    }\n\n    function _getSqrtPriceX96(uint256 normalizedPriceFeed0, uint256 normalizedPriceFeed1) internal pure returns (uint160) {\n        return uint160((BabylonianLib.sqrt((normalizedPriceFeed0 * 1e18) / normalizedPriceFeed1) * 2 ** 96) / 1e9);\n    }\n\n    function latestRoundData() external view returns (uint80, int256, uint256, uint256, uint80) {\n        return (0, latestAnswer(), 0, 0, 0);\n    }\n}\n"
      },
      "lib/openzeppelin-contracts/contracts/interfaces/IERC20Metadata.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20Metadata} from \"../token/ERC20/extensions/IERC20Metadata.sol\";\n"
      },
      "src/interfaces/IAggregator.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\ninterface IAggregator {\n    function decimals() external view returns (uint8);\n\n    function latestAnswer() external view returns (int256 answer);\n\n    function latestRoundData()\n        external\n        view\n        returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n\ninterface IAggregatorWithMeta is IAggregator {\n    function description() external view returns (string memory);\n\n    function version() external view returns (uint256);\n}\n"
      },
      "src/libraries/BabylonianLib.sol": {
        "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity >=0.8.0;\n\n/// @notice Babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method).\nlibrary BabylonianLib {\n    // computes square roots using the babylonian method\n    // credit for this implementation goes to\n    // https://github.com/abdk-consulting/abdk-libraries-solidity/blob/master/ABDKMath64x64.sol#L687\n    function sqrt(uint256 x) internal pure returns (uint256) {\n        if (x == 0) return 0;\n        // this block is equivalent to r = uint256(1) << (BitMath.mostSignificantBit(x) / 2);\n        // however that code costs significantly more gas\n        uint256 xx = x;\n        uint256 r = 1;\n        if (xx >= 0x100000000000000000000000000000000) {\n            xx >>= 128;\n            r <<= 64;\n        }\n        if (xx >= 0x10000000000000000) {\n            xx >>= 64;\n            r <<= 32;\n        }\n        if (xx >= 0x100000000) {\n            xx >>= 32;\n            r <<= 16;\n        }\n        if (xx >= 0x10000) {\n            xx >>= 16;\n            r <<= 8;\n        }\n        if (xx >= 0x100) {\n            xx >>= 8;\n            r <<= 4;\n        }\n        if (xx >= 0x10) {\n            xx >>= 4;\n            r <<= 2;\n        }\n        if (xx >= 0x8) {\n            r <<= 1;\n        }\n        r = (r + x / r) >> 1;\n        r = (r + x / r) >> 1;\n        r = (r + x / r) >> 1;\n        r = (r + x / r) >> 1;\n        r = (r + x / r) >> 1;\n        r = (r + x / r) >> 1;\n        r = (r + x / r) >> 1; // Seven iterations should be enough\n        uint256 r1 = x / r;\n        return (r < r1 ? r : r1);\n    }\n}"
      },
      "src/interfaces/IKodiak.sol": {
        "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.8.0;\n\ninterface IKodiakVaultV1 {\n    function name() external view returns (string memory);\n\n    function token0() external view returns (address);\n\n    function token1() external view returns (address);\n\n    function totalSupply() external view returns (uint256);\n\n    function getUnderlyingBalancesAtPrice(uint160 sqrtRatioX96) external view returns (uint256 amount0Current, uint256 amount1Current);\n\n    function getUnderlyingBalances() external view returns (uint256 amount0Current, uint256 amount1Current);\n}\n\ninterface IKodiakVaultStaking {\n    function earned(address account) external view returns (uint256[] memory new_earned);\n\n    function emergencyWithdraw(bytes32 kek_id) external;\n\n    function getAllRewardTokens() external view returns (address[] memory);\n\n    function rewardTokens(uint i) external view returns (address);\n\n    function getReward() external returns (uint256[] memory);\n\n    function rewardsPerToken() external view returns (uint256[] memory newRewardsPerTokenStored);\n\n    function stakeLocked(uint256 liquidity, uint256 secs) external;\n\n    function withdrawLockedAll() external;\n}\n\ninterface IKodiakV1RouterStaking {\n    function addLiquidity(\n        IKodiakVaultV1 pool,\n        uint256 amount0Max,\n        uint256 amount1Max,\n        uint256 amount0Min,\n        uint256 amount1Min,\n        uint256 amountSharesMin,\n        address receiver\n    ) external returns (uint256 amount0, uint256 amount1, uint256 mintAmount);\n\n    function addLiquidityETH(\n        IKodiakVaultV1 pool,\n        uint256 amount0Max,\n        uint256 amount1Max,\n        uint256 amount0Min,\n        uint256 amount1Min,\n        uint256 amountSharesMin,\n        address receiver\n    ) external payable returns (uint256 amount0, uint256 amount1, uint256 mintAmount);\n\n    function removeLiquidity(\n        IKodiakVaultV1 pool,\n        uint256 burnAmount,\n        uint256 amount0Min,\n        uint256 amount1Min,\n        address receiver\n    ) external returns (uint256 amount0, uint256 amount1, uint128 liquidityBurned);\n\n    function removeLiquidityETH(\n        IKodiakVaultV1 pool,\n        uint256 burnAmount,\n        uint256 amount0Min,\n        uint256 amount1Min,\n        address payable receiver\n    ) external returns (uint256 amount0, uint256 amount1, uint128 liquidityBurned);\n}\n"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
      }
    },
    "settings": {
      "remappings": [
        "/=src/",
        "forge-std/=lib/forge-std/src/",
        "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
        "@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
        "@BoringSolidity/=lib/BoringSolidity/contracts/",
        "@solady/=lib/solady/src/",
        "@solmate/=lib/solmate/src/",
        "@excessivelySafeCall/=lib/ExcessivelySafeCall/src/",
        "@safe-contracts/=lib/safe-contracts/contracts/",
        "@fuzzlib/=lib/fuzzlib/src/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 400
      },
      "metadata": {
        "useLiteralContent": false,
        "bytecodeHash": "ipfs",
        "appendCBOR": true
      },
      "outputSelection": {
        "*": {
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "evmVersion": "shanghai",
      "viaIR": false,
      "libraries": {}
    }
  },
  "compiler": "0.8.26+commit.8a97fa7a"
}