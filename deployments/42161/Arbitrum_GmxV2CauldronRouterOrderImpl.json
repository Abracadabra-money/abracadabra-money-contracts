{
  "address": "0x760c0d870c574d53af2ACD8369A9F237412c5C6F",
  "abi": [
    {
      "type": "constructor",
      "inputs": [
        {
          "name": "_degenBox",
          "type": "address",
          "internalType": "contract IBentoBoxV1"
        },
        {
          "name": "_gmxRouter",
          "type": "address",
          "internalType": "contract IGmxV2ExchangeRouter"
        },
        {
          "name": "_syntheticsRouter",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "_gmxReader",
          "type": "address",
          "internalType": "contract IGmxReader"
        },
        {
          "name": "_weth",
          "type": "address",
          "internalType": "contract IWETH"
        },
        {
          "name": "_refundTo",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "receive",
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "DATASTORE",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "contract IGmxDataStore"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "DEPOSIT_LIST",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "DEPOSIT_VAULT",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "EXECUTE_DEPOSIT_FEATURE_DISABLED",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "EXECUTE_WITHDRAWAL_FEATURE_DISABLED",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "GMX_READER",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "contract IGmxReader"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "GMX_ROUTER",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "contract IGmxV2ExchangeRouter"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "ORDER_KEEPER",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "REFUND_TO",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "SYNTHETICS_ROUTER",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "WETH",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "contract IWETH"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "WITHDRAWAL_LIST",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "WITHDRAWAL_VAULT",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "afterDepositCancellation",
      "inputs": [
        {
          "name": "key",
          "type": "bytes32",
          "internalType": "bytes32"
        },
        {
          "name": "deposit",
          "type": "tuple",
          "internalType": "struct IGmxV2Deposit.Props",
          "components": [
            {
              "name": "addresses",
              "type": "tuple",
              "internalType": "struct IGmxV2Deposit.Addresses",
              "components": [
                {
                  "name": "account",
                  "type": "address",
                  "internalType": "address"
                },
                {
                  "name": "receiver",
                  "type": "address",
                  "internalType": "address"
                },
                {
                  "name": "callbackContract",
                  "type": "address",
                  "internalType": "address"
                },
                {
                  "name": "uiFeeReceiver",
                  "type": "address",
                  "internalType": "address"
                },
                {
                  "name": "market",
                  "type": "address",
                  "internalType": "address"
                },
                {
                  "name": "initialLongToken",
                  "type": "address",
                  "internalType": "address"
                },
                {
                  "name": "initialShortToken",
                  "type": "address",
                  "internalType": "address"
                },
                {
                  "name": "longTokenSwapPath",
                  "type": "address[]",
                  "internalType": "address[]"
                },
                {
                  "name": "shortTokenSwapPath",
                  "type": "address[]",
                  "internalType": "address[]"
                }
              ]
            },
            {
              "name": "numbers",
              "type": "tuple",
              "internalType": "struct IGmxV2Deposit.Numbers",
              "components": [
                {
                  "name": "initialLongTokenAmount",
                  "type": "uint256",
                  "internalType": "uint256"
                },
                {
                  "name": "initialShortTokenAmount",
                  "type": "uint256",
                  "internalType": "uint256"
                },
                {
                  "name": "minMarketTokens",
                  "type": "uint256",
                  "internalType": "uint256"
                },
                {
                  "name": "updatedAtBlock",
                  "type": "uint256",
                  "internalType": "uint256"
                },
                {
                  "name": "updatedAtTime",
                  "type": "uint256",
                  "internalType": "uint256"
                },
                {
                  "name": "executionFee",
                  "type": "uint256",
                  "internalType": "uint256"
                },
                {
                  "name": "callbackGasLimit",
                  "type": "uint256",
                  "internalType": "uint256"
                }
              ]
            },
            {
              "name": "flags",
              "type": "tuple",
              "internalType": "struct IGmxV2Deposit.Flags",
              "components": [
                {
                  "name": "shouldUnwrapNativeToken",
                  "type": "bool",
                  "internalType": "bool"
                }
              ]
            }
          ]
        },
        {
          "name": "eventData",
          "type": "tuple",
          "internalType": "struct IGmxV2EventUtils.EventLogData",
          "components": [
            {
              "name": "addressItems",
              "type": "tuple",
              "internalType": "struct IGmxV2EventUtils.AddressItems",
              "components": [
                {
                  "name": "items",
                  "type": "tuple[]",
                  "internalType": "struct IGmxV2EventUtils.AddressKeyValue[]",
                  "components": [
                    {
                      "name": "key",
                      "type": "string",
                      "internalType": "string"
                    },
                    {
                      "name": "value",
                      "type": "address",
                      "internalType": "address"
                    }
                  ]
                },
                {
                  "name": "arrayItems",
                  "type": "tuple[]",
                  "internalType": "struct IGmxV2EventUtils.AddressArrayKeyValue[]",
                  "components": [
                    {
                      "name": "key",
                      "type": "string",
                      "internalType": "string"
                    },
                    {
                      "name": "value",
                      "type": "address[]",
                      "internalType": "address[]"
                    }
                  ]
                }
              ]
            },
            {
              "name": "uintItems",
              "type": "tuple",
              "internalType": "struct IGmxV2EventUtils.UintItems",
              "components": [
                {
                  "name": "items",
                  "type": "tuple[]",
                  "internalType": "struct IGmxV2EventUtils.UintKeyValue[]",
                  "components": [
                    {
                      "name": "key",
                      "type": "string",
                      "internalType": "string"
                    },
                    {
                      "name": "value",
                      "type": "uint256",
                      "internalType": "uint256"
                    }
                  ]
                },
                {
                  "name": "arrayItems",
                  "type": "tuple[]",
                  "internalType": "struct IGmxV2EventUtils.UintArrayKeyValue[]",
                  "components": [
                    {
                      "name": "key",
                      "type": "string",
                      "internalType": "string"
                    },
                    {
                      "name": "value",
                      "type": "uint256[]",
                      "internalType": "uint256[]"
                    }
                  ]
                }
              ]
            },
            {
              "name": "intItems",
              "type": "tuple",
              "internalType": "struct IGmxV2EventUtils.IntItems",
              "components": [
                {
                  "name": "items",
                  "type": "tuple[]",
                  "internalType": "struct IGmxV2EventUtils.IntKeyValue[]",
                  "components": [
                    {
                      "name": "key",
                      "type": "string",
                      "internalType": "string"
                    },
                    {
                      "name": "value",
                      "type": "int256",
                      "internalType": "int256"
                    }
                  ]
                },
                {
                  "name": "arrayItems",
                  "type": "tuple[]",
                  "internalType": "struct IGmxV2EventUtils.IntArrayKeyValue[]",
                  "components": [
                    {
                      "name": "key",
                      "type": "string",
                      "internalType": "string"
                    },
                    {
                      "name": "value",
                      "type": "int256[]",
                      "internalType": "int256[]"
                    }
                  ]
                }
              ]
            },
            {
              "name": "boolItems",
              "type": "tuple",
              "internalType": "struct IGmxV2EventUtils.BoolItems",
              "components": [
                {
                  "name": "items",
                  "type": "tuple[]",
                  "internalType": "struct IGmxV2EventUtils.BoolKeyValue[]",
                  "components": [
                    {
                      "name": "key",
                      "type": "string",
                      "internalType": "string"
                    },
                    {
                      "name": "value",
                      "type": "bool",
                      "internalType": "bool"
                    }
                  ]
                },
                {
                  "name": "arrayItems",
                  "type": "tuple[]",
                  "internalType": "struct IGmxV2EventUtils.BoolArrayKeyValue[]",
                  "components": [
                    {
                      "name": "key",
                      "type": "string",
                      "internalType": "string"
                    },
                    {
                      "name": "value",
                      "type": "bool[]",
                      "internalType": "bool[]"
                    }
                  ]
                }
              ]
            },
            {
              "name": "bytes32Items",
              "type": "tuple",
              "internalType": "struct IGmxV2EventUtils.Bytes32Items",
              "components": [
                {
                  "name": "items",
                  "type": "tuple[]",
                  "internalType": "struct IGmxV2EventUtils.Bytes32KeyValue[]",
                  "components": [
                    {
                      "name": "key",
                      "type": "string",
                      "internalType": "string"
                    },
                    {
                      "name": "value",
                      "type": "bytes32",
                      "internalType": "bytes32"
                    }
                  ]
                },
                {
                  "name": "arrayItems",
                  "type": "tuple[]",
                  "internalType": "struct IGmxV2EventUtils.Bytes32ArrayKeyValue[]",
                  "components": [
                    {
                      "name": "key",
                      "type": "string",
                      "internalType": "string"
                    },
                    {
                      "name": "value",
                      "type": "bytes32[]",
                      "internalType": "bytes32[]"
                    }
                  ]
                }
              ]
            },
            {
              "name": "bytesItems",
              "type": "tuple",
              "internalType": "struct IGmxV2EventUtils.BytesItems",
              "components": [
                {
                  "name": "items",
                  "type": "tuple[]",
                  "internalType": "struct IGmxV2EventUtils.BytesKeyValue[]",
                  "components": [
                    {
                      "name": "key",
                      "type": "string",
                      "internalType": "string"
                    },
                    {
                      "name": "value",
                      "type": "bytes",
                      "internalType": "bytes"
                    }
                  ]
                },
                {
                  "name": "arrayItems",
                  "type": "tuple[]",
                  "internalType": "struct IGmxV2EventUtils.BytesArrayKeyValue[]",
                  "components": [
                    {
                      "name": "key",
                      "type": "string",
                      "internalType": "string"
                    },
                    {
                      "name": "value",
                      "type": "bytes[]",
                      "internalType": "bytes[]"
                    }
                  ]
                }
              ]
            },
            {
              "name": "stringItems",
              "type": "tuple",
              "internalType": "struct IGmxV2EventUtils.StringItems",
              "components": [
                {
                  "name": "items",
                  "type": "tuple[]",
                  "internalType": "struct IGmxV2EventUtils.StringKeyValue[]",
                  "components": [
                    {
                      "name": "key",
                      "type": "string",
                      "internalType": "string"
                    },
                    {
                      "name": "value",
                      "type": "string",
                      "internalType": "string"
                    }
                  ]
                },
                {
                  "name": "arrayItems",
                  "type": "tuple[]",
                  "internalType": "struct IGmxV2EventUtils.StringArrayKeyValue[]",
                  "components": [
                    {
                      "name": "key",
                      "type": "string",
                      "internalType": "string"
                    },
                    {
                      "name": "value",
                      "type": "string[]",
                      "internalType": "string[]"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "afterDepositExecution",
      "inputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        },
        {
          "name": "deposit",
          "type": "tuple",
          "internalType": "struct IGmxV2Deposit.Props",
          "components": [
            {
              "name": "addresses",
              "type": "tuple",
              "internalType": "struct IGmxV2Deposit.Addresses",
              "components": [
                {
                  "name": "account",
                  "type": "address",
                  "internalType": "address"
                },
                {
                  "name": "receiver",
                  "type": "address",
                  "internalType": "address"
                },
                {
                  "name": "callbackContract",
                  "type": "address",
                  "internalType": "address"
                },
                {
                  "name": "uiFeeReceiver",
                  "type": "address",
                  "internalType": "address"
                },
                {
                  "name": "market",
                  "type": "address",
                  "internalType": "address"
                },
                {
                  "name": "initialLongToken",
                  "type": "address",
                  "internalType": "address"
                },
                {
                  "name": "initialShortToken",
                  "type": "address",
                  "internalType": "address"
                },
                {
                  "name": "longTokenSwapPath",
                  "type": "address[]",
                  "internalType": "address[]"
                },
                {
                  "name": "shortTokenSwapPath",
                  "type": "address[]",
                  "internalType": "address[]"
                }
              ]
            },
            {
              "name": "numbers",
              "type": "tuple",
              "internalType": "struct IGmxV2Deposit.Numbers",
              "components": [
                {
                  "name": "initialLongTokenAmount",
                  "type": "uint256",
                  "internalType": "uint256"
                },
                {
                  "name": "initialShortTokenAmount",
                  "type": "uint256",
                  "internalType": "uint256"
                },
                {
                  "name": "minMarketTokens",
                  "type": "uint256",
                  "internalType": "uint256"
                },
                {
                  "name": "updatedAtBlock",
                  "type": "uint256",
                  "internalType": "uint256"
                },
                {
                  "name": "updatedAtTime",
                  "type": "uint256",
                  "internalType": "uint256"
                },
                {
                  "name": "executionFee",
                  "type": "uint256",
                  "internalType": "uint256"
                },
                {
                  "name": "callbackGasLimit",
                  "type": "uint256",
                  "internalType": "uint256"
                }
              ]
            },
            {
              "name": "flags",
              "type": "tuple",
              "internalType": "struct IGmxV2Deposit.Flags",
              "components": [
                {
                  "name": "shouldUnwrapNativeToken",
                  "type": "bool",
                  "internalType": "bool"
                }
              ]
            }
          ]
        },
        {
          "name": "",
          "type": "tuple",
          "internalType": "struct IGmxV2EventUtils.EventLogData",
          "components": [
            {
              "name": "addressItems",
              "type": "tuple",
              "internalType": "struct IGmxV2EventUtils.AddressItems",
              "components": [
                {
                  "name": "items",
                  "type": "tuple[]",
                  "internalType": "struct IGmxV2EventUtils.AddressKeyValue[]",
                  "components": [
                    {
                      "name": "key",
                      "type": "string",
                      "internalType": "string"
                    },
                    {
                      "name": "value",
                      "type": "address",
                      "internalType": "address"
                    }
                  ]
                },
                {
                  "name": "arrayItems",
                  "type": "tuple[]",
                  "internalType": "struct IGmxV2EventUtils.AddressArrayKeyValue[]",
                  "components": [
                    {
                      "name": "key",
                      "type": "string",
                      "internalType": "string"
                    },
                    {
                      "name": "value",
                      "type": "address[]",
                      "internalType": "address[]"
                    }
                  ]
                }
              ]
            },
            {
              "name": "uintItems",
              "type": "tuple",
              "internalType": "struct IGmxV2EventUtils.UintItems",
              "components": [
                {
                  "name": "items",
                  "type": "tuple[]",
                  "internalType": "struct IGmxV2EventUtils.UintKeyValue[]",
                  "components": [
                    {
                      "name": "key",
                      "type": "string",
                      "internalType": "string"
                    },
                    {
                      "name": "value",
                      "type": "uint256",
                      "internalType": "uint256"
                    }
                  ]
                },
                {
                  "name": "arrayItems",
                  "type": "tuple[]",
                  "internalType": "struct IGmxV2EventUtils.UintArrayKeyValue[]",
                  "components": [
                    {
                      "name": "key",
                      "type": "string",
                      "internalType": "string"
                    },
                    {
                      "name": "value",
                      "type": "uint256[]",
                      "internalType": "uint256[]"
                    }
                  ]
                }
              ]
            },
            {
              "name": "intItems",
              "type": "tuple",
              "internalType": "struct IGmxV2EventUtils.IntItems",
              "components": [
                {
                  "name": "items",
                  "type": "tuple[]",
                  "internalType": "struct IGmxV2EventUtils.IntKeyValue[]",
                  "components": [
                    {
                      "name": "key",
                      "type": "string",
                      "internalType": "string"
                    },
                    {
                      "name": "value",
                      "type": "int256",
                      "internalType": "int256"
                    }
                  ]
                },
                {
                  "name": "arrayItems",
                  "type": "tuple[]",
                  "internalType": "struct IGmxV2EventUtils.IntArrayKeyValue[]",
                  "components": [
                    {
                      "name": "key",
                      "type": "string",
                      "internalType": "string"
                    },
                    {
                      "name": "value",
                      "type": "int256[]",
                      "internalType": "int256[]"
                    }
                  ]
                }
              ]
            },
            {
              "name": "boolItems",
              "type": "tuple",
              "internalType": "struct IGmxV2EventUtils.BoolItems",
              "components": [
                {
                  "name": "items",
                  "type": "tuple[]",
                  "internalType": "struct IGmxV2EventUtils.BoolKeyValue[]",
                  "components": [
                    {
                      "name": "key",
                      "type": "string",
                      "internalType": "string"
                    },
                    {
                      "name": "value",
                      "type": "bool",
                      "internalType": "bool"
                    }
                  ]
                },
                {
                  "name": "arrayItems",
                  "type": "tuple[]",
                  "internalType": "struct IGmxV2EventUtils.BoolArrayKeyValue[]",
                  "components": [
                    {
                      "name": "key",
                      "type": "string",
                      "internalType": "string"
                    },
                    {
                      "name": "value",
                      "type": "bool[]",
                      "internalType": "bool[]"
                    }
                  ]
                }
              ]
            },
            {
              "name": "bytes32Items",
              "type": "tuple",
              "internalType": "struct IGmxV2EventUtils.Bytes32Items",
              "components": [
                {
                  "name": "items",
                  "type": "tuple[]",
                  "internalType": "struct IGmxV2EventUtils.Bytes32KeyValue[]",
                  "components": [
                    {
                      "name": "key",
                      "type": "string",
                      "internalType": "string"
                    },
                    {
                      "name": "value",
                      "type": "bytes32",
                      "internalType": "bytes32"
                    }
                  ]
                },
                {
                  "name": "arrayItems",
                  "type": "tuple[]",
                  "internalType": "struct IGmxV2EventUtils.Bytes32ArrayKeyValue[]",
                  "components": [
                    {
                      "name": "key",
                      "type": "string",
                      "internalType": "string"
                    },
                    {
                      "name": "value",
                      "type": "bytes32[]",
                      "internalType": "bytes32[]"
                    }
                  ]
                }
              ]
            },
            {
              "name": "bytesItems",
              "type": "tuple",
              "internalType": "struct IGmxV2EventUtils.BytesItems",
              "components": [
                {
                  "name": "items",
                  "type": "tuple[]",
                  "internalType": "struct IGmxV2EventUtils.BytesKeyValue[]",
                  "components": [
                    {
                      "name": "key",
                      "type": "string",
                      "internalType": "string"
                    },
                    {
                      "name": "value",
                      "type": "bytes",
                      "internalType": "bytes"
                    }
                  ]
                },
                {
                  "name": "arrayItems",
                  "type": "tuple[]",
                  "internalType": "struct IGmxV2EventUtils.BytesArrayKeyValue[]",
                  "components": [
                    {
                      "name": "key",
                      "type": "string",
                      "internalType": "string"
                    },
                    {
                      "name": "value",
                      "type": "bytes[]",
                      "internalType": "bytes[]"
                    }
                  ]
                }
              ]
            },
            {
              "name": "stringItems",
              "type": "tuple",
              "internalType": "struct IGmxV2EventUtils.StringItems",
              "components": [
                {
                  "name": "items",
                  "type": "tuple[]",
                  "internalType": "struct IGmxV2EventUtils.StringKeyValue[]",
                  "components": [
                    {
                      "name": "key",
                      "type": "string",
                      "internalType": "string"
                    },
                    {
                      "name": "value",
                      "type": "string",
                      "internalType": "string"
                    }
                  ]
                },
                {
                  "name": "arrayItems",
                  "type": "tuple[]",
                  "internalType": "struct IGmxV2EventUtils.StringArrayKeyValue[]",
                  "components": [
                    {
                      "name": "key",
                      "type": "string",
                      "internalType": "string"
                    },
                    {
                      "name": "value",
                      "type": "string[]",
                      "internalType": "string[]"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "afterWithdrawalCancellation",
      "inputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        },
        {
          "name": "withdrawal",
          "type": "tuple",
          "internalType": "struct IGmxV2Withdrawal.Props",
          "components": [
            {
              "name": "addresses",
              "type": "tuple",
              "internalType": "struct IGmxV2Withdrawal.Addresses",
              "components": [
                {
                  "name": "account",
                  "type": "address",
                  "internalType": "address"
                },
                {
                  "name": "receiver",
                  "type": "address",
                  "internalType": "address"
                },
                {
                  "name": "callbackContract",
                  "type": "address",
                  "internalType": "address"
                },
                {
                  "name": "uiFeeReceiver",
                  "type": "address",
                  "internalType": "address"
                },
                {
                  "name": "market",
                  "type": "address",
                  "internalType": "address"
                },
                {
                  "name": "longTokenSwapPath",
                  "type": "address[]",
                  "internalType": "address[]"
                },
                {
                  "name": "shortTokenSwapPath",
                  "type": "address[]",
                  "internalType": "address[]"
                }
              ]
            },
            {
              "name": "numbers",
              "type": "tuple",
              "internalType": "struct IGmxV2Withdrawal.Numbers",
              "components": [
                {
                  "name": "marketTokenAmount",
                  "type": "uint256",
                  "internalType": "uint256"
                },
                {
                  "name": "minLongTokenAmount",
                  "type": "uint256",
                  "internalType": "uint256"
                },
                {
                  "name": "minShortTokenAmount",
                  "type": "uint256",
                  "internalType": "uint256"
                },
                {
                  "name": "updatedAtBlock",
                  "type": "uint256",
                  "internalType": "uint256"
                },
                {
                  "name": "updatedAtTime",
                  "type": "uint256",
                  "internalType": "uint256"
                },
                {
                  "name": "executionFee",
                  "type": "uint256",
                  "internalType": "uint256"
                },
                {
                  "name": "callbackGasLimit",
                  "type": "uint256",
                  "internalType": "uint256"
                }
              ]
            },
            {
              "name": "flags",
              "type": "tuple",
              "internalType": "struct IGmxV2Withdrawal.Flags",
              "components": [
                {
                  "name": "shouldUnwrapNativeToken",
                  "type": "bool",
                  "internalType": "bool"
                }
              ]
            }
          ]
        },
        {
          "name": "",
          "type": "tuple",
          "internalType": "struct IGmxV2EventUtils.EventLogData",
          "components": [
            {
              "name": "addressItems",
              "type": "tuple",
              "internalType": "struct IGmxV2EventUtils.AddressItems",
              "components": [
                {
                  "name": "items",
                  "type": "tuple[]",
                  "internalType": "struct IGmxV2EventUtils.AddressKeyValue[]",
                  "components": [
                    {
                      "name": "key",
                      "type": "string",
                      "internalType": "string"
                    },
                    {
                      "name": "value",
                      "type": "address",
                      "internalType": "address"
                    }
                  ]
                },
                {
                  "name": "arrayItems",
                  "type": "tuple[]",
                  "internalType": "struct IGmxV2EventUtils.AddressArrayKeyValue[]",
                  "components": [
                    {
                      "name": "key",
                      "type": "string",
                      "internalType": "string"
                    },
                    {
                      "name": "value",
                      "type": "address[]",
                      "internalType": "address[]"
                    }
                  ]
                }
              ]
            },
            {
              "name": "uintItems",
              "type": "tuple",
              "internalType": "struct IGmxV2EventUtils.UintItems",
              "components": [
                {
                  "name": "items",
                  "type": "tuple[]",
                  "internalType": "struct IGmxV2EventUtils.UintKeyValue[]",
                  "components": [
                    {
                      "name": "key",
                      "type": "string",
                      "internalType": "string"
                    },
                    {
                      "name": "value",
                      "type": "uint256",
                      "internalType": "uint256"
                    }
                  ]
                },
                {
                  "name": "arrayItems",
                  "type": "tuple[]",
                  "internalType": "struct IGmxV2EventUtils.UintArrayKeyValue[]",
                  "components": [
                    {
                      "name": "key",
                      "type": "string",
                      "internalType": "string"
                    },
                    {
                      "name": "value",
                      "type": "uint256[]",
                      "internalType": "uint256[]"
                    }
                  ]
                }
              ]
            },
            {
              "name": "intItems",
              "type": "tuple",
              "internalType": "struct IGmxV2EventUtils.IntItems",
              "components": [
                {
                  "name": "items",
                  "type": "tuple[]",
                  "internalType": "struct IGmxV2EventUtils.IntKeyValue[]",
                  "components": [
                    {
                      "name": "key",
                      "type": "string",
                      "internalType": "string"
                    },
                    {
                      "name": "value",
                      "type": "int256",
                      "internalType": "int256"
                    }
                  ]
                },
                {
                  "name": "arrayItems",
                  "type": "tuple[]",
                  "internalType": "struct IGmxV2EventUtils.IntArrayKeyValue[]",
                  "components": [
                    {
                      "name": "key",
                      "type": "string",
                      "internalType": "string"
                    },
                    {
                      "name": "value",
                      "type": "int256[]",
                      "internalType": "int256[]"
                    }
                  ]
                }
              ]
            },
            {
              "name": "boolItems",
              "type": "tuple",
              "internalType": "struct IGmxV2EventUtils.BoolItems",
              "components": [
                {
                  "name": "items",
                  "type": "tuple[]",
                  "internalType": "struct IGmxV2EventUtils.BoolKeyValue[]",
                  "components": [
                    {
                      "name": "key",
                      "type": "string",
                      "internalType": "string"
                    },
                    {
                      "name": "value",
                      "type": "bool",
                      "internalType": "bool"
                    }
                  ]
                },
                {
                  "name": "arrayItems",
                  "type": "tuple[]",
                  "internalType": "struct IGmxV2EventUtils.BoolArrayKeyValue[]",
                  "components": [
                    {
                      "name": "key",
                      "type": "string",
                      "internalType": "string"
                    },
                    {
                      "name": "value",
                      "type": "bool[]",
                      "internalType": "bool[]"
                    }
                  ]
                }
              ]
            },
            {
              "name": "bytes32Items",
              "type": "tuple",
              "internalType": "struct IGmxV2EventUtils.Bytes32Items",
              "components": [
                {
                  "name": "items",
                  "type": "tuple[]",
                  "internalType": "struct IGmxV2EventUtils.Bytes32KeyValue[]",
                  "components": [
                    {
                      "name": "key",
                      "type": "string",
                      "internalType": "string"
                    },
                    {
                      "name": "value",
                      "type": "bytes32",
                      "internalType": "bytes32"
                    }
                  ]
                },
                {
                  "name": "arrayItems",
                  "type": "tuple[]",
                  "internalType": "struct IGmxV2EventUtils.Bytes32ArrayKeyValue[]",
                  "components": [
                    {
                      "name": "key",
                      "type": "string",
                      "internalType": "string"
                    },
                    {
                      "name": "value",
                      "type": "bytes32[]",
                      "internalType": "bytes32[]"
                    }
                  ]
                }
              ]
            },
            {
              "name": "bytesItems",
              "type": "tuple",
              "internalType": "struct IGmxV2EventUtils.BytesItems",
              "components": [
                {
                  "name": "items",
                  "type": "tuple[]",
                  "internalType": "struct IGmxV2EventUtils.BytesKeyValue[]",
                  "components": [
                    {
                      "name": "key",
                      "type": "string",
                      "internalType": "string"
                    },
                    {
                      "name": "value",
                      "type": "bytes",
                      "internalType": "bytes"
                    }
                  ]
                },
                {
                  "name": "arrayItems",
                  "type": "tuple[]",
                  "internalType": "struct IGmxV2EventUtils.BytesArrayKeyValue[]",
                  "components": [
                    {
                      "name": "key",
                      "type": "string",
                      "internalType": "string"
                    },
                    {
                      "name": "value",
                      "type": "bytes[]",
                      "internalType": "bytes[]"
                    }
                  ]
                }
              ]
            },
            {
              "name": "stringItems",
              "type": "tuple",
              "internalType": "struct IGmxV2EventUtils.StringItems",
              "components": [
                {
                  "name": "items",
                  "type": "tuple[]",
                  "internalType": "struct IGmxV2EventUtils.StringKeyValue[]",
                  "components": [
                    {
                      "name": "key",
                      "type": "string",
                      "internalType": "string"
                    },
                    {
                      "name": "value",
                      "type": "string",
                      "internalType": "string"
                    }
                  ]
                },
                {
                  "name": "arrayItems",
                  "type": "tuple[]",
                  "internalType": "struct IGmxV2EventUtils.StringArrayKeyValue[]",
                  "components": [
                    {
                      "name": "key",
                      "type": "string",
                      "internalType": "string"
                    },
                    {
                      "name": "value",
                      "type": "string[]",
                      "internalType": "string[]"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "afterWithdrawalExecution",
      "inputs": [
        {
          "name": "key",
          "type": "bytes32",
          "internalType": "bytes32"
        },
        {
          "name": "withdrawal",
          "type": "tuple",
          "internalType": "struct IGmxV2Withdrawal.Props",
          "components": [
            {
              "name": "addresses",
              "type": "tuple",
              "internalType": "struct IGmxV2Withdrawal.Addresses",
              "components": [
                {
                  "name": "account",
                  "type": "address",
                  "internalType": "address"
                },
                {
                  "name": "receiver",
                  "type": "address",
                  "internalType": "address"
                },
                {
                  "name": "callbackContract",
                  "type": "address",
                  "internalType": "address"
                },
                {
                  "name": "uiFeeReceiver",
                  "type": "address",
                  "internalType": "address"
                },
                {
                  "name": "market",
                  "type": "address",
                  "internalType": "address"
                },
                {
                  "name": "longTokenSwapPath",
                  "type": "address[]",
                  "internalType": "address[]"
                },
                {
                  "name": "shortTokenSwapPath",
                  "type": "address[]",
                  "internalType": "address[]"
                }
              ]
            },
            {
              "name": "numbers",
              "type": "tuple",
              "internalType": "struct IGmxV2Withdrawal.Numbers",
              "components": [
                {
                  "name": "marketTokenAmount",
                  "type": "uint256",
                  "internalType": "uint256"
                },
                {
                  "name": "minLongTokenAmount",
                  "type": "uint256",
                  "internalType": "uint256"
                },
                {
                  "name": "minShortTokenAmount",
                  "type": "uint256",
                  "internalType": "uint256"
                },
                {
                  "name": "updatedAtBlock",
                  "type": "uint256",
                  "internalType": "uint256"
                },
                {
                  "name": "updatedAtTime",
                  "type": "uint256",
                  "internalType": "uint256"
                },
                {
                  "name": "executionFee",
                  "type": "uint256",
                  "internalType": "uint256"
                },
                {
                  "name": "callbackGasLimit",
                  "type": "uint256",
                  "internalType": "uint256"
                }
              ]
            },
            {
              "name": "flags",
              "type": "tuple",
              "internalType": "struct IGmxV2Withdrawal.Flags",
              "components": [
                {
                  "name": "shouldUnwrapNativeToken",
                  "type": "bool",
                  "internalType": "bool"
                }
              ]
            }
          ]
        },
        {
          "name": "eventData",
          "type": "tuple",
          "internalType": "struct IGmxV2EventUtils.EventLogData",
          "components": [
            {
              "name": "addressItems",
              "type": "tuple",
              "internalType": "struct IGmxV2EventUtils.AddressItems",
              "components": [
                {
                  "name": "items",
                  "type": "tuple[]",
                  "internalType": "struct IGmxV2EventUtils.AddressKeyValue[]",
                  "components": [
                    {
                      "name": "key",
                      "type": "string",
                      "internalType": "string"
                    },
                    {
                      "name": "value",
                      "type": "address",
                      "internalType": "address"
                    }
                  ]
                },
                {
                  "name": "arrayItems",
                  "type": "tuple[]",
                  "internalType": "struct IGmxV2EventUtils.AddressArrayKeyValue[]",
                  "components": [
                    {
                      "name": "key",
                      "type": "string",
                      "internalType": "string"
                    },
                    {
                      "name": "value",
                      "type": "address[]",
                      "internalType": "address[]"
                    }
                  ]
                }
              ]
            },
            {
              "name": "uintItems",
              "type": "tuple",
              "internalType": "struct IGmxV2EventUtils.UintItems",
              "components": [
                {
                  "name": "items",
                  "type": "tuple[]",
                  "internalType": "struct IGmxV2EventUtils.UintKeyValue[]",
                  "components": [
                    {
                      "name": "key",
                      "type": "string",
                      "internalType": "string"
                    },
                    {
                      "name": "value",
                      "type": "uint256",
                      "internalType": "uint256"
                    }
                  ]
                },
                {
                  "name": "arrayItems",
                  "type": "tuple[]",
                  "internalType": "struct IGmxV2EventUtils.UintArrayKeyValue[]",
                  "components": [
                    {
                      "name": "key",
                      "type": "string",
                      "internalType": "string"
                    },
                    {
                      "name": "value",
                      "type": "uint256[]",
                      "internalType": "uint256[]"
                    }
                  ]
                }
              ]
            },
            {
              "name": "intItems",
              "type": "tuple",
              "internalType": "struct IGmxV2EventUtils.IntItems",
              "components": [
                {
                  "name": "items",
                  "type": "tuple[]",
                  "internalType": "struct IGmxV2EventUtils.IntKeyValue[]",
                  "components": [
                    {
                      "name": "key",
                      "type": "string",
                      "internalType": "string"
                    },
                    {
                      "name": "value",
                      "type": "int256",
                      "internalType": "int256"
                    }
                  ]
                },
                {
                  "name": "arrayItems",
                  "type": "tuple[]",
                  "internalType": "struct IGmxV2EventUtils.IntArrayKeyValue[]",
                  "components": [
                    {
                      "name": "key",
                      "type": "string",
                      "internalType": "string"
                    },
                    {
                      "name": "value",
                      "type": "int256[]",
                      "internalType": "int256[]"
                    }
                  ]
                }
              ]
            },
            {
              "name": "boolItems",
              "type": "tuple",
              "internalType": "struct IGmxV2EventUtils.BoolItems",
              "components": [
                {
                  "name": "items",
                  "type": "tuple[]",
                  "internalType": "struct IGmxV2EventUtils.BoolKeyValue[]",
                  "components": [
                    {
                      "name": "key",
                      "type": "string",
                      "internalType": "string"
                    },
                    {
                      "name": "value",
                      "type": "bool",
                      "internalType": "bool"
                    }
                  ]
                },
                {
                  "name": "arrayItems",
                  "type": "tuple[]",
                  "internalType": "struct IGmxV2EventUtils.BoolArrayKeyValue[]",
                  "components": [
                    {
                      "name": "key",
                      "type": "string",
                      "internalType": "string"
                    },
                    {
                      "name": "value",
                      "type": "bool[]",
                      "internalType": "bool[]"
                    }
                  ]
                }
              ]
            },
            {
              "name": "bytes32Items",
              "type": "tuple",
              "internalType": "struct IGmxV2EventUtils.Bytes32Items",
              "components": [
                {
                  "name": "items",
                  "type": "tuple[]",
                  "internalType": "struct IGmxV2EventUtils.Bytes32KeyValue[]",
                  "components": [
                    {
                      "name": "key",
                      "type": "string",
                      "internalType": "string"
                    },
                    {
                      "name": "value",
                      "type": "bytes32",
                      "internalType": "bytes32"
                    }
                  ]
                },
                {
                  "name": "arrayItems",
                  "type": "tuple[]",
                  "internalType": "struct IGmxV2EventUtils.Bytes32ArrayKeyValue[]",
                  "components": [
                    {
                      "name": "key",
                      "type": "string",
                      "internalType": "string"
                    },
                    {
                      "name": "value",
                      "type": "bytes32[]",
                      "internalType": "bytes32[]"
                    }
                  ]
                }
              ]
            },
            {
              "name": "bytesItems",
              "type": "tuple",
              "internalType": "struct IGmxV2EventUtils.BytesItems",
              "components": [
                {
                  "name": "items",
                  "type": "tuple[]",
                  "internalType": "struct IGmxV2EventUtils.BytesKeyValue[]",
                  "components": [
                    {
                      "name": "key",
                      "type": "string",
                      "internalType": "string"
                    },
                    {
                      "name": "value",
                      "type": "bytes",
                      "internalType": "bytes"
                    }
                  ]
                },
                {
                  "name": "arrayItems",
                  "type": "tuple[]",
                  "internalType": "struct IGmxV2EventUtils.BytesArrayKeyValue[]",
                  "components": [
                    {
                      "name": "key",
                      "type": "string",
                      "internalType": "string"
                    },
                    {
                      "name": "value",
                      "type": "bytes[]",
                      "internalType": "bytes[]"
                    }
                  ]
                }
              ]
            },
            {
              "name": "stringItems",
              "type": "tuple",
              "internalType": "struct IGmxV2EventUtils.StringItems",
              "components": [
                {
                  "name": "items",
                  "type": "tuple[]",
                  "internalType": "struct IGmxV2EventUtils.StringKeyValue[]",
                  "components": [
                    {
                      "name": "key",
                      "type": "string",
                      "internalType": "string"
                    },
                    {
                      "name": "value",
                      "type": "string",
                      "internalType": "string"
                    }
                  ]
                },
                {
                  "name": "arrayItems",
                  "type": "tuple[]",
                  "internalType": "struct IGmxV2EventUtils.StringArrayKeyValue[]",
                  "components": [
                    {
                      "name": "key",
                      "type": "string",
                      "internalType": "string"
                    },
                    {
                      "name": "value",
                      "type": "string[]",
                      "internalType": "string[]"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "cancelOrder",
      "inputs": [],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "cauldron",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "degenBox",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "contract IBentoBoxV1"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "depositType",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getExchangeRates",
      "inputs": [],
      "outputs": [
        {
          "name": "shortExchangeRate",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "marketExchangeRate",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "init",
      "inputs": [
        {
          "name": "_cauldron",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "_user",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "params",
          "type": "tuple",
          "internalType": "struct GmRouterOrderParams",
          "components": [
            {
              "name": "inputToken",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "deposit",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "inputAmount",
              "type": "uint128",
              "internalType": "uint128"
            },
            {
              "name": "executionFee",
              "type": "uint128",
              "internalType": "uint128"
            },
            {
              "name": "minOutput",
              "type": "uint128",
              "internalType": "uint128"
            },
            {
              "name": "minOutLong",
              "type": "uint128",
              "internalType": "uint128"
            }
          ]
        }
      ],
      "outputs": [],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "inputAmount",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint128",
          "internalType": "uint128"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "isActive",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "isDepositExecutionDisabled",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "isHomogenousMarket",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "isWithdrawalExecutionDisabled",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "market",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "minOut",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint128",
          "internalType": "uint128"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "minOutLong",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint128",
          "internalType": "uint128"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "oracle",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "contract IOracle"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "oracleDecimalScale",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint128",
          "internalType": "uint128"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "orderAgent",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "contract IGmCauldronOrderAgent"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "orderKey",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "orderValueInCollateral",
      "inputs": [],
      "outputs": [
        {
          "name": "result",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "sendValueInCollateral",
      "inputs": [
        {
          "name": "recipient",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "shareMarketToken",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "shortToken",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "user",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "withdrawFromOrder",
      "inputs": [
        {
          "name": "token",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "to",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "amount",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "event",
      "name": "LogRefundWETH",
      "inputs": [
        {
          "name": "user",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "amount",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "error",
      "name": "ErrAlreadyInitialized",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrExecuteDepositsDisabled",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrExecuteWithdrawalsDisabled",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrFinalized",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrIncorrectInitialization",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrMinOutTooLarge",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrNotOwner",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrUnauthorized",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrWrongUser",
      "inputs": []
    }
  ],
  "bytecode": "0x6101a0604052348015610010575f80fd5b5060405161458938038061458983398101604081905261002f9161029c565b6001600160a01b0380871661018052858116608081905284821660a052908516610120526040805163660d0d6760e01b8152905163660d0d67916004808201926020929091908290030181865afa15801561008c573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906100b0919061031f565b6001600160a01b031660c0816001600160a01b031681525050846001600160a01b0316639c8b2cfb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610105573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610129919061031f565b6001600160a01b031663d7cd39496040518163ffffffff1660e01b8152600401602060405180830381865afa158015610164573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610188919061031f565b6001600160a01b031660e0816001600160a01b031681525050846001600160a01b0316632c2f3c076040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101dd573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610201919061031f565b6001600160a01b03166369d421486040518163ffffffff1660e01b8152600401602060405180830381865afa15801561023c573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610260919061031f565b6001600160a01b03908116610100529182166101405216610160525061034192505050565b6001600160a01b0381168114610299575f80fd5b50565b5f805f805f8060c087890312156102b1575f80fd5b86516102bc81610285565b60208801519096506102cd81610285565b60408801519095506102de81610285565b60608801519094506102ef81610285565b608088015190935061030081610285565b60a088015190925061031181610285565b809150509295509295509295565b5f6020828403121561032f575f80fd5b815161033a81610285565b9392505050565b60805160a05160c05160e05161010051610120516101405161016051610180516140fc61048d5f395f8181610610015281816113f401528181611488015281816114d101528181611840015281816118830152818161193d0152818161198901528181611c990152611ce201525f818161023e01526105bf01525f61069501525f818161066201528181611272015261131801525f8181610564015281816122a8015261235d01525f818161073e01528181611f6b015261201d01525f81816103650152818161095c015281816109d601528181610ab90152610fae01525f81816104e00152610fe001525f818161041a0152818161088d01528181610beb01528181610c6701528181610ce901528181610e2401528181611bc001528181611fa6015281816120540152818161220f015281816122e301528181612394015261257e01526140fc5ff3fe608060405260043610610236575f3560e01c806396b888fa11610129578063c9ac221a116100a8578063ebd3664b1161006d578063ebd3664b146107a7578063f3eab936146107c6578063f931abae146107df578063fabc5d0b146107f3578063fd77d17514610807575f80fd5b8063c9ac221a14610713578063d522f2ee1461072d578063e2a5426014610760578063e3065da714610774578063e4372fe714610793575f80fd5b8063aa579b80116100ee578063aa579b8014610651578063ad5c464814610684578063bae6b633146106b7578063c15e3f2d146106cb578063c4b2b980146106f4575f80fd5b806396b888fa146105995780639710704d146105ae57806397ff6a04146105e15780639f495c15146105ff578063a165daa214610632575f80fd5b80636ed0f620116101b557806380f556051161017a57806380f556051461050257806385bc189f14610521578063907f74141461053f57806390a722771461055357806391cea94e14610586575f80fd5b80636ed0f620146104505780636f0445481461047257806372ccfa60146104915780637dc0d1d0146104b05780637e36c6fc146104cf575f80fd5b806345f3bdcc116101fb57806345f3bdcc1461039f5780634f8632ba146103c45780635131bf8e146103e3578063562a97e5146104095780636a8165481461043c575f80fd5b8063026c35e4146102ba57806309ee789a146102fd578063162b4d0c1461032157806322f3e2d4146103405780633f7cefce14610354575f80fd5b366102b6575f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316346040515f6040518083038185875af1925050503d805f81146102a4576040519150601f19603f3d011682016040523d82523d5f602084013e6102a9565b606091505b50509050806102b457005b005b5f80fd5b3480156102c5575f80fd5b506007546102e090600160801b90046001600160801b031681565b6040516001600160801b0390911681526020015b60405180910390f35b348015610308575f80fd5b50610311610826565b60405190151581526020016102f4565b34801561032c575f80fd5b506006546102e0906001600160801b031681565b34801561034b575f80fd5b506103116109d3565b34801561035f575f80fd5b506103877f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016102f4565b3480156103aa575f80fd5b50600854610387906201000090046001600160a01b031681565b3480156103cf575f80fd5b50600154610387906001600160a01b031681565b3480156103ee575f80fd5b506006546102e090600160801b90046001600160801b031681565b348015610414575f80fd5b506103877f000000000000000000000000000000000000000000000000000000000000000081565b348015610447575f80fd5b506102b4610b9c565b34801561045b575f80fd5b50610464610c9e565b6040519081526020016102f4565b34801561047d575f80fd5b506007546102e0906001600160801b031681565b34801561049c575f80fd5b506102b46104ab36600461372d565b610ce7565b3480156104bb575f80fd5b50600554610387906001600160a01b031681565b3480156104da575f80fd5b506103877f000000000000000000000000000000000000000000000000000000000000000081565b34801561050d575f80fd5b50600354610387906001600160a01b031681565b34801561052c575f80fd5b5060085461031190610100900460ff1681565b34801561054a575f80fd5b50610311610dcb565b34801561055e575f80fd5b506103877f000000000000000000000000000000000000000000000000000000000000000081565b6102b46105943660046138b7565b610e7e565b3480156105a4575f80fd5b5061046460025481565b3480156105b9575f80fd5b506103877f000000000000000000000000000000000000000000000000000000000000000081565b3480156105ec575f80fd5b505f54610387906001600160a01b031681565b34801561060a575f80fd5b506103877f000000000000000000000000000000000000000000000000000000000000000081565b34801561063d575f80fd5b506102b461064c366004613974565b61136b565b34801561065c575f80fd5b506103877f000000000000000000000000000000000000000000000000000000000000000081565b34801561068f575f80fd5b506103877f000000000000000000000000000000000000000000000000000000000000000081565b3480156106c2575f80fd5b50610464611560565b3480156106d6575f80fd5b506106df611593565b604080519283526020830191909152016102f4565b3480156106ff575f80fd5b506102b461070e36600461399e565b505050565b34801561071e575f80fd5b506102b461070e36600461372d565b348015610738575f80fd5b506103877f000000000000000000000000000000000000000000000000000000000000000081565b34801561076b575f80fd5b5061046461177b565b34801561077f575f80fd5b50600454610387906001600160a01b031681565b34801561079e575f80fd5b506104646117ba565b3480156107b2575f80fd5b506102b46107c1366004613aec565b611807565b3480156107d1575f80fd5b506008546103119060ff1681565b3480156107ea575f80fd5b50610464611a73565b3480156107fe575f80fd5b50610464611b8e565b348015610812575f80fd5b506102b461082136600461399e565b611bbe565b5f806040516020016108759060208082526023908201527f455845435554455f5749544844524157414c5f464541545552455f444953414260408201526213115160ea1b606082015260800190565b604051602081830303815290604052805190602001207f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632c2f3c076040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108e7573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061090b9190613b3c565b60405160200161092e9291909182526001600160a01b0316602082015260400190565b60408051808303601f19018152908290528051602090910120633d70e7e560e11b82526004820181905291507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690637ae1cfca90602401602060405180830381865afa1580156109a9573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109cd9190613b5e565b91505090565b5f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166391d4403c604051602001610a33906020808252600c908201526b11115413d4d25517d31254d560a21b604082015260600190565b604051602081830303815290604052805190602001206002546040518363ffffffff1660e01b8152600401610a72929190918252602082015260400190565b602060405180830381865afa158015610a8d573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610ab19190613b5e565b80610b9757507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166391d4403c604051602001610b19906020808252600f908201526e15d2551211149055d05317d31254d5608a1b604082015260600190565b604051602081830303815290604052805190602001206002546040518363ffffffff1660e01b8152600401610b58929190918252602082015260400190565b602060405180830381865afa158015610b73573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610b979190613b5e565b905090565b5f546001600160a01b03163314610bc657604051630da4973960e31b815260040160405180910390fd5b60085460ff1615610c4d57600254604051630c50112160e21b815260048101919091527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906331404484906024015b5f604051808303815f87803b158015610c35575f80fd5b505af1158015610c47573d5f803e3d5ffd5b50505050565b6002546040516303909e2d60e51b815260048101919091527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690637213c5a090602401610c1e565b604051602001610cce906020808252600c908201526b27a92222a92fa5a2a2a822a960a11b604082015260600190565b6040516020818303038152906040528051906020012081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632c2f3c076040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d43573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610d679190613b3c565b6001600160a01b0316336001600160a01b031614610d9857604051636609677b60e11b815260040160405180910390fd5b8151516001600160a01b03163014610dc3576040516308e4775b60e01b815260040160405180910390fd5b61070e611c1a565b5f80604051602001610e0c906020808252818101527f455845435554455f4445504f5349545f464541545552455f44495341424c4544604082015260600190565b604051602081830303815290604052805190602001207f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639c8b2cfb6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108e7573d5f803e3d5ffd5b5f546001600160a01b031615610ea75760405163027d126360e01b815260040160405180910390fd5b6001600160a01b038316610ece576040516369159e9360e01b815260040160405180910390fd5b6008805462010000330275ffffffffffffffffffffffffffffffffffffffff0000199091161790555f80546001600160a01b038581166001600160a01b0319928316811790935560018054918616919092161790556040805163d8dfeb4560e01b8152905163d8dfeb45916004808201926020929091908290030181865afa158015610f5c573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610f809190613b3c565b600380546001600160a01b0319166001600160a01b0392831690811790915560405163714af34b60e01b81527f00000000000000000000000000000000000000000000000000000000000000008316600482015260248101919091525f917f0000000000000000000000000000000000000000000000000000000000000000169063714af34b90604401608060405180830381865afa158015611025573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906110499190613b79565b604083015160808401516001600160801b03918216600160801b9183169182021760065560a0850151600780546fffffffffffffffffffffffffffffffff19169184169182179055929350909161109f91613c11565b11156110be576040516356d7048360e01b815260040160405180910390fd5b6060810151604082015160088054600480546001600160a01b0319166001600160a01b039586169081179091556020870151151560ff19610100959096168214949094029490941661ffff199091161791909117905561111d90611e3a565b6008546004805460405163addd509960e01b81526001600160a01b0391821692810192909252620100009092049091169063addd509990602401602060405180830381865afa158015611172573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906111969190613b3c565b6001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156111d1573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906111f59190613c2a565b6111ff9190613c4a565b61120a90600a613d46565b600780546001600160801b03928316600160801b02921691909117905560085460ff16156112d85761123a610dcb565b15611258576040516358fdc02560e11b815260040160405180910390fd5b60408201516004546112a0916001600160a01b03909116907f0000000000000000000000000000000000000000000000000000000000000000906001600160801b0316611f0b565b600354606080830151604080850151908601516080870151938701516112d0956001600160a01b03169490611f54565b600255610c47565b6112e0610826565b156112fe5760405163844fa17360e01b815260040160405180910390fd5b6040820151600354611346916001600160a01b03909116907f0000000000000000000000000000000000000000000000000000000000000000906001600160801b0316611f0b565b611362826040015183608001518460a001518560600151612291565b60025550505050565b5f546001600160a01b0316331461139557604051630da4973960e31b815260040160405180910390fd5b5f8061139f611593565b90925090505f6113af8284613d54565b600754600354604051630acc462360e31b81526001600160a01b0391821660048201526024810188905260016044820152600160801b9092046001600160801b0316917f000000000000000000000000000000000000000000000000000000000000000090911690635662311890606401602060405180830381865afa15801561143b573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061145f9190613d6b565b6114699190613d54565b6114739190613d82565b6004549091506114ad906001600160a01b03167f0000000000000000000000000000000000000000000000000000000000000000836125ff565b6004805460405162ae511b60e21b81526001600160a01b03918216928101929092527f00000000000000000000000000000000000000000000000000000000000000008116602483018190529087166044830152606482018390525f6084830152906302b9446c9060a40160408051808303815f875af1158015611533573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906115579190613da1565b50505050505050565b604051602001610cce906020808252600f908201526e15d2551211149055d05317d31254d5608a1b604082015260600190565b6008546004805460405163addd509960e01b81526001600160a01b03918216928101929092525f928392620100009091049091169063addd509990602401602060405180830381865afa1580156115ec573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906116109190613b3c565b604080516020810182525f8152905163eeb8a8d360e01b81526001600160a01b03929092169163eeb8a8d39161164891600401613de5565b6040805180830381865afa158015611662573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906116869190613e17565b60085460035460405163addd509960e01b81526001600160a01b0391821660048201529295506201000090910416915063addd509990602401602060405180830381865afa1580156116da573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906116fe9190613b3c565b604080516020810182525f8152905163eeb8a8d360e01b81526001600160a01b03929092169163eeb8a8d39161173691600401613de5565b6040805180830381865afa158015611750573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906117749190613e17565b9293915050565b604051602001610cce906020808252818101527f455845435554455f4445504f5349545f464541545552455f44495341424c4544604082015260600190565b604051602001610cce9060208082526023908201527f455845435554455f5749544844524157414c5f464541545552455f444953414260408201526213115160ea1b606082015260800190565b5f546001600160a01b0316331461183157604051630da4973960e31b815260040160405180910390fd5b6118656001600160a01b0385167f0000000000000000000000000000000000000000000000000000000000000000846125ff565b60405162ae511b60e21b81526001600160a01b0385811660048301527f00000000000000000000000000000000000000000000000000000000000000008116602483018190529085166044830152606482018490525f6084830152906302b9446c9060a40160408051808303815f875af11580156118e5573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906119099190613da1565b50506004545f90611923906001600160a01b03163061263f565b90508015611a1157600454611962906001600160a01b03167f0000000000000000000000000000000000000000000000000000000000000000836125ff565b6004805460015460405162ae511b60e21b81526001600160a01b03928316938101939093527f000000000000000000000000000000000000000000000000000000000000000082166024840181905291166044830152606482018390525f6084830152906302b9446c9060a40160408051808303815f875af11580156119ea573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611a0e9190613da1565b50505b5f546001546040516390e7212760e01b81526001600160a01b0391821660048201529116906390e72127906024015f604051808303815f87803b158015611a56575f80fd5b505af1158015611a68573d5f803e3d5ffd5b505050505050505050565b5f805f611a7e611593565b600854919350915060ff1615611b09576007546006545f916001600160801b03600160801b9091048116918491611ab791879116613d54565b611ac19190613d54565b611acb9190613d82565b600654909150600160801b90046001600160801b03168111611aed5780611b01565b600654600160801b90046001600160801b03165b935050505090565b6007546006545f91600160801b8082046001600160801b039081169386938893611b3893918216920416613e43565b6001600160801b0316611b4b9190613d54565b611b559190613d54565b611b5f9190613d82565b6006549091506001600160801b03168111611b7a5780611b01565b6006546001600160801b0316935050505090565b604051602001610cce906020808252600c908201526b11115413d4d25517d31254d560a21b604082015260600190565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639c8b2cfb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d43573d5f803e3d5ffd5b6003546040516370a0823160e01b81523060048201525f916001600160a01b0316906370a0823190602401602060405180830381865afa158015611c60573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611c849190613d6b565b600354909150611cbe906001600160a01b03167f0000000000000000000000000000000000000000000000000000000000000000836125ff565b6003545f805460405162ae511b60e21b81526001600160a01b0393841660048201527f000000000000000000000000000000000000000000000000000000000000000084166024820181905293909116604482015260648101849052608481018290529091906302b9446c9060a40160408051808303815f875af1158015611d48573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611d6c9190613da1565b5f546001805460405163860ffea160e01b81526001600160a01b0391821660048201526024810192909252604482018490529294509116915063860ffea1906064015f604051808303815f87803b158015611dc5575f80fd5b505af1158015611dd7573d5f803e3d5ffd5b50505f546001546040516390e7212760e01b81526001600160a01b039182166004820152911692506390e7212791506024015f604051808303815f87803b158015611e20575f80fd5b505af1158015611e32573d5f803e3d5ffd5b505050505050565b60408051600481526024810182526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663313ce56760e01b17905290515f91829182916001600160a01b03861691611e949190613e62565b5f60405180830381855afa9150503d805f8114611ecc576040519150601f19603f3d011682016040523d82523d5f602084013e611ed1565b606091505b5091509150818015611ee4575080516020145b611eef576012611f03565b80806020019051810190611f039190613c2a565b949350505050565b81601452806034526f095ea7b30000000000000000000000005f5260205f604460105f875af13d1560015f51141716611f4b57633e3f8f735f526004601cfd5b5f603452505050565b604051637d39aaf160e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526001600160801b038316602483018190525f927f000000000000000000000000000000000000000000000000000000000000000090921691637d39aaf191906044015f604051808303818588803b158015611fea575f80fd5b505af1158015611ffc573d5f803e3d5ffd5b5050604051631cdacd5960e31b81526001600160a01b038a811660048301527f0000000000000000000000000000000000000000000000000000000000000000811660248301526001600160801b03891660448301527f000000000000000000000000000000000000000000000000000000000000000016935063e6d66ac8925060640190505f604051808303815f87803b158015612099575f80fd5b505af11580156120ab573d5f803e3d5ffd5b505f92508291506120b99050565b6040519080825280602002602001820160405280156120e2578160200160208202803683370190505b5090505f604051806101800160405280306001600160a01b03168152602001306001600160a01b031681526020015f6001600160a01b031681526020018a6001600160a01b03168152602001886001600160a01b03168152602001896001600160a01b03168152602001838152602001838152602001866001600160801b031681526020015f15158152602001856001600160801b03168152602001600860029054906101000a90046001600160a01b03166001600160a01b03166324f746976040518163ffffffff1660e01b8152600401602060405180830381865afa1580156121cf573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906121f39190613d6b565b9052604051635b4e956160e01b81529091506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690635b4e956190612244908490600401613ec0565b6020604051808303815f875af1158015612260573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906122849190613d6b565b9998505050505050505050565b604051637d39aaf160e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526001600160801b038316602483018190525f927f000000000000000000000000000000000000000000000000000000000000000090921691637d39aaf191906044015f604051808303818588803b158015612327575f80fd5b505af1158015612339573d5f803e3d5ffd5b5050600354604051631cdacd5960e31b81526001600160a01b0391821660048201527f0000000000000000000000000000000000000000000000000000000000000000821660248201526001600160801b038a1660448201527f0000000000000000000000000000000000000000000000000000000000000000909116935063e6d66ac8925060640190505f604051808303815f87803b1580156123db575f80fd5b505af11580156123ed573d5f803e3d5ffd5b505f9250600191506123fc9050565b604051908082528060200260200182016040528015612425578160200160208202803683370190505b5060035481519192506001600160a01b03169082905f9061244857612448613fca565b6001600160a01b03928316602091820292909201810191909152604080515f80825261018082018352309382018481529282019390935260608101839052600354909316608084015260085460a0840190610100900460ff166124ab57846124ad565b835b8152602001838152602001876001600160801b03168152602001886001600160801b031681526020015f15158152602001866001600160801b03168152602001600860029054906101000a90046001600160a01b03166001600160a01b03166324f746976040518163ffffffff1660e01b8152600401602060405180830381865afa15801561253e573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906125629190613d6b565b905260405163ad23c5a160e01b81529091506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063ad23c5a1906125b3908490600401613fde565b6020604051808303815f875af11580156125cf573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906125f39190613d6b565b98975050505050505050565b81601452806034526fa9059cbb0000000000000000000000005f5260205f604460105f875af13d1560015f51141716611f4b576390b8ec185f526004601cfd5b5f816014526f70a082310000000000000000000000005f5260208060246010865afa601f3d111660205102905092915050565b634e487b7160e01b5f52604160045260245ffd5b60405160e081016001600160401b03811182821017156126a8576126a8612672565b60405290565b604080519081016001600160401b03811182821017156126a8576126a8612672565b604051606081016001600160401b03811182821017156126a8576126a8612672565b60405160c081016001600160401b03811182821017156126a8576126a8612672565b60405161012081016001600160401b03811182821017156126a8576126a8612672565b604051601f8201601f191681016001600160401b038111828210171561275f5761275f612672565b604052919050565b6001600160a01b038116811461277b575f80fd5b50565b803561278981612767565b919050565b5f6001600160401b038211156127a6576127a6612672565b5060051b60200190565b5f82601f8301126127bf575f80fd5b81356127d26127cd8261278e565b612737565b8082825260208201915060208360051b8601019250858311156127f3575f80fd5b602085015b8381101561281957803561280b81612767565b8352602092830192016127f8565b5095945050505050565b5f60e08284031215612833575f80fd5b61283b612686565b823581526020808401359082015260408084013590820152606080840135908201526080808401359082015260a0808401359082015260c0928301359281019290925250919050565b801515811461277b575f80fd5b5f602082840312156128a1575f80fd5b604051602081016001600160401b03811182821017156128c3576128c3612672565b60405290508082356128d481612884565b905292915050565b5f82601f8301126128eb575f80fd5b8135602083015f806001600160401b0384111561290a5761290a612672565b50601f8301601f191660200161291f81612737565b915050828152858383011115612933575f80fd5b828260208301375f92810160200192909252509392505050565b5f82601f83011261295c575f80fd5b813561296a6127cd8261278e565b8082825260208201915060208360051b86010192508583111561298b575f80fd5b602085015b838110156128195780356001600160401b038111156129ad575f80fd5b86016040818903601f190112156129c2575f80fd5b6129ca6126ae565b60208201356001600160401b038111156129e2575f80fd5b6129f18a6020838601016128dc565b82525060408201356001600160401b03811115612a0c575f80fd5b612a1b8a6020838601016127b0565b6020830152508085525050602083019250602081019050612990565b5f60408284031215612a47575f80fd5b612a4f6126ae565b905081356001600160401b03811115612a66575f80fd5b8201601f81018413612a76575f80fd5b8035612a846127cd8261278e565b8082825260208201915060208360051b850101925086831115612aa5575f80fd5b602084015b83811015612b335780356001600160401b03811115612ac7575f80fd5b85016040818a03601f19011215612adc575f80fd5b612ae46126ae565b60208201356001600160401b03811115612afc575f80fd5b612b0b8b6020838601016128dc565b82525060408201359150612b1e82612767565b60208181019290925284529283019201612aaa565b50845250505060208201356001600160401b03811115612b51575f80fd5b612b5d8482850161294d565b60208301525092915050565b5f82601f830112612b78575f80fd5b8135612b866127cd8261278e565b8082825260208201915060208360051b860101925085831115612ba7575f80fd5b602085015b838110156128195780356001600160401b03811115612bc9575f80fd5b86016040818903601f19011215612bde575f80fd5b612be66126ae565b60208201356001600160401b03811115612bfe575f80fd5b612c0d8a6020838601016128dc565b82525060408201356001600160401b03811115612c28575f80fd5b60208184010192505088601f830112612c3f575f80fd5b8135612c4d6127cd8261278e565b8082825260208201915060208360051b86010192508b831115612c6e575f80fd5b6020850194505b82851015612c90578435825260209485019490910190612c75565b8060208501525050508085525050602083019250602081019050612bac565b5f60408284031215612cbf575f80fd5b612cc76126ae565b905081356001600160401b03811115612cde575f80fd5b8201601f81018413612cee575f80fd5b8035612cfc6127cd8261278e565b8082825260208201915060208360051b850101925086831115612d1d575f80fd5b602084015b83811015612da35780356001600160401b03811115612d3f575f80fd5b85016040818a03601f19011215612d54575f80fd5b612d5c6126ae565b60208201356001600160401b03811115612d74575f80fd5b612d838b6020838601016128dc565b825250604091909101356020808301919091529084529283019201612d22565b50845250505060208201356001600160401b03811115612dc1575f80fd5b612b5d84828501612b69565b5f60408284031215612ddd575f80fd5b612de56126ae565b905081356001600160401b03811115612dfc575f80fd5b8201601f81018413612e0c575f80fd5b8035612e1a6127cd8261278e565b8082825260208201915060208360051b850101925086831115612e3b575f80fd5b602084015b83811015612da35780356001600160401b03811115612e5d575f80fd5b85016040818a03601f19011215612e72575f80fd5b612e7a6126ae565b60208201356001600160401b03811115612e92575f80fd5b612ea18b6020838601016128dc565b825250604091909101356020808301919091529084529283019201612e40565b5f82601f830112612ed0575f80fd5b8135612ede6127cd8261278e565b8082825260208201915060208360051b860101925085831115612eff575f80fd5b602085015b838110156128195780356001600160401b03811115612f21575f80fd5b86016040818903601f19011215612f36575f80fd5b612f3e6126ae565b60208201356001600160401b03811115612f56575f80fd5b612f658a6020838601016128dc565b82525060408201356001600160401b03811115612f80575f80fd5b60208184010192505088601f830112612f97575f80fd5b8135612fa56127cd8261278e565b8082825260208201915060208360051b86010192508b831115612fc6575f80fd5b6020850194505b82851015612ff1578435612fe081612884565b825260209485019490910190612fcd565b8060208501525050508085525050602083019250602081019050612f04565b5f60408284031215613020575f80fd5b6130286126ae565b905081356001600160401b0381111561303f575f80fd5b8201601f8101841361304f575f80fd5b803561305d6127cd8261278e565b8082825260208201915060208360051b85010192508683111561307e575f80fd5b602084015b8381101561310c5780356001600160401b038111156130a0575f80fd5b85016040818a03601f190112156130b5575f80fd5b6130bd6126ae565b60208201356001600160401b038111156130d5575f80fd5b6130e48b6020838601016128dc565b825250604082013591506130f782612884565b60208181019290925284529283019201613083565b50845250505060208201356001600160401b0381111561312a575f80fd5b612b5d84828501612ec1565b5f60408284031215613146575f80fd5b61314e6126ae565b905081356001600160401b03811115613165575f80fd5b8201601f81018413613175575f80fd5b80356131836127cd8261278e565b8082825260208201915060208360051b8501019250868311156131a4575f80fd5b602084015b83811015612da35780356001600160401b038111156131c6575f80fd5b85016040818a03601f190112156131db575f80fd5b6131e36126ae565b60208201356001600160401b038111156131fb575f80fd5b61320a8b6020838601016128dc565b8252506040919091013560208083019190915290845292830192016131a9565b5f82601f830112613239575f80fd5b81356132476127cd8261278e565b8082825260208201915060208360051b860101925085831115613268575f80fd5b602085015b838110156128195780356001600160401b0381111561328a575f80fd5b86016040818903601f1901121561329f575f80fd5b6132a76126ae565b60208201356001600160401b038111156132bf575f80fd5b6132ce8a6020838601016128dc565b82525060408201356001600160401b038111156132e9575f80fd5b60208184010192505088601f830112613300575f80fd5b813561330e6127cd8261278e565b8082825260208201915060208360051b86010192508b83111561332f575f80fd5b602085015b8381101561336f5780356001600160401b03811115613351575f80fd5b6133608e6020838a01016128dc565b84525060209283019201613334565b50806020850152505050808552505060208301925060208101905061326d565b5f6040828403121561339f575f80fd5b6133a76126ae565b905081356001600160401b038111156133be575f80fd5b8201601f810184136133ce575f80fd5b80356133dc6127cd8261278e565b8082825260208201915060208360051b8501019250868311156133fd575f80fd5b602084015b838110156134a95780356001600160401b0381111561341f575f80fd5b85016040818a03601f19011215613434575f80fd5b61343c6126ae565b60208201356001600160401b03811115613454575f80fd5b6134638b6020838601016128dc565b82525060408201356001600160401b0381111561347e575f80fd5b61348d8b6020838601016128dc565b6020830152508085525050602083019250602081019050613402565b50845250505060208201356001600160401b038111156134c7575f80fd5b612b5d8482850161322a565b5f604082840312156134e3575f80fd5b6134eb6126ae565b905081356001600160401b03811115613502575f80fd5b8201601f81018413613512575f80fd5b80356135206127cd8261278e565b8082825260208201915060208360051b850101925086831115613541575f80fd5b602084015b838110156134a95780356001600160401b03811115613563575f80fd5b85016040818a03601f19011215613578575f80fd5b6135806126ae565b60208201356001600160401b03811115613598575f80fd5b6135a78b6020838601016128dc565b82525060408201356001600160401b038111156135c2575f80fd5b6135d18b6020838601016128dc565b6020830152508085525050602083019250602081019050613546565b5f60e082840312156135fd575f80fd5b613605612686565b905081356001600160401b0381111561361c575f80fd5b61362884828501612a37565b82525060208201356001600160401b03811115613643575f80fd5b61364f84828501612caf565b60208301525060408201356001600160401b0381111561366d575f80fd5b61367984828501612dcd565b60408301525060608201356001600160401b03811115613697575f80fd5b6136a384828501613010565b60608301525060808201356001600160401b038111156136c1575f80fd5b6136cd84828501613136565b60808301525060a08201356001600160401b038111156136eb575f80fd5b6136f78482850161338f565b60a08301525060c08201356001600160401b03811115613715575f80fd5b613721848285016134d3565b60c08301525092915050565b5f805f6060848603121561373f575f80fd5b8335925060208401356001600160401b0381111561375b575f80fd5b8401610120818703121561376d575f80fd5b6137756126d0565b81356001600160401b0381111561378a575f80fd5b820160e0818903121561379b575f80fd5b6137a3612686565b6137ac8261277e565b81526137ba6020830161277e565b60208201526137cb6040830161277e565b60408201526137dc6060830161277e565b60608201526137ed6080830161277e565b608082015260a08201356001600160401b0381111561380a575f80fd5b6138168a8285016127b0565b60a08301525060c08201356001600160401b03811115613834575f80fd5b6138408a8285016127b0565b60c0830152508252506138568760208401612823565b6020820152613869876101008401612891565b6040820152809350505060408401356001600160401b0381111561388b575f80fd5b613897868287016135ed565b9150509250925092565b80356001600160801b0381168114612789575f80fd5b5f805f8385036101008112156138cb575f80fd5b84356138d681612767565b935060208501356138e681612767565b925060c0603f19820112156138f9575f80fd5b506139026126f2565b604085013561391081612767565b8152606085013561392081612884565b6020820152613931608086016138a1565b604082015261394260a086016138a1565b606082015261395360c086016138a1565b608082015261396460e086016138a1565b60a0820152809150509250925092565b5f8060408385031215613985575f80fd5b823561399081612767565b946020939093013593505050565b5f805f606084860312156139b0575f80fd5b8335925060208401356001600160401b038111156139cc575f80fd5b840161012081870312156139de575f80fd5b6139e66126d0565b81356001600160401b038111156139fb575f80fd5b82016101208189031215613a0d575f80fd5b613a15612714565b613a1e8261277e565b8152613a2c6020830161277e565b6020820152613a3d6040830161277e565b6040820152613a4e6060830161277e565b6060820152613a5f6080830161277e565b6080820152613a7060a0830161277e565b60a0820152613a8160c0830161277e565b60c082015260e08201356001600160401b03811115613a9e575f80fd5b613aaa8a8285016127b0565b60e0830152506101008201356001600160401b03811115613ac9575f80fd5b613ad58a8285016127b0565b610100830152508252506138568760208401612823565b5f805f8060808587031215613aff575f80fd5b8435613b0a81612767565b93506020850135613b1a81612767565b9250604085013591506060850135613b3181612884565b939692955090935050565b5f60208284031215613b4c575f80fd5b8151613b5781612767565b9392505050565b5f60208284031215613b6e575f80fd5b8151613b5781612884565b5f6080828403128015613b8a575f80fd5b50604051608081016001600160401b0381118282101715613bad57613bad612672565b6040528251613bbb81612767565b81526020830151613bcb81612767565b60208201526040830151613bde81612767565b60408201526060830151613bf181612767565b60608201529392505050565b634e487b7160e01b5f52601160045260245ffd5b80820180821115613c2457613c24613bfd565b92915050565b5f60208284031215613c3a575f80fd5b815160ff81168114613b57575f80fd5b60ff8181168382160190811115613c2457613c24613bfd565b6001815b6001841115613c9e57808504811115613c8257613c82613bfd565b6001841615613c9057908102905b60019390931c928002613c67565b935093915050565b5f82613cb457506001613c24565b81613cc057505f613c24565b8160018114613cd65760028114613ce057613cfc565b6001915050613c24565b60ff841115613cf157613cf1613bfd565b50506001821b613c24565b5060208310610133831016604e8410600b8410161715613d1f575081810a613c24565b613d2b5f198484613c63565b805f1904821115613d3e57613d3e613bfd565b029392505050565b5f613b5760ff841683613ca6565b8082028115828204841417613c2457613c24613bfd565b5f60208284031215613d7b575f80fd5b5051919050565b5f82613d9c57634e487b7160e01b5f52601260045260245ffd5b500490565b5f8060408385031215613db2575f80fd5b505080516020909101519092909150565b5f5b83811015613ddd578181015183820152602001613dc5565b50505f910152565b602081525f8251806020840152613e03816040850160208701613dc3565b601f01601f19169190910160400192915050565b5f8060408385031215613e28575f80fd5b8251613e3381612884565b6020939093015192949293505050565b6001600160801b038181168382160190811115613c2457613c24613bfd565b5f8251613e73818460208701613dc3565b9190910192915050565b5f8151808452602084019350602083015f5b82811015613eb65781516001600160a01b0316865260209586019590910190600101613e8f565b5093949350505050565b60208152613eda6020820183516001600160a01b03169052565b5f6020830151613ef560408401826001600160a01b03169052565b5060408301516001600160a01b03811660608401525060608301516001600160a01b03811660808401525060808301516001600160a01b03811660a08401525060a08301516001600160a01b03811660c08401525060c083015161018060e0840152613f656101a0840182613e7d565b905060e0840151601f1984830301610100850152613f838282613e7d565b915050610100840151610120840152610120840151613fa761014085018215159052565b506101408401516101608401526101608401516101808401528091505092915050565b634e487b7160e01b5f52603260045260245ffd5b60208152613ff86020820183516001600160a01b03169052565b5f602083015161401360408401826001600160a01b03169052565b5060408301516001600160a01b03811660608401525060608301516001600160a01b038116608084015250608083015161016060a0840152614059610180840182613e7d565b905060a0840151601f198483030160c08501526140768282613e7d565b91505060c084015160e084015260e08401516101008401526101008401516140a361012085018215159052565b50610120840151610140840152610140840151610160840152809150509291505056fea264697066735822122039b858c3fff0290078e6eeb077d7f6b0c5d8933962a0b114d928a35169ee281764736f6c634300081a0033",
  "args_data": "0x0000000000000000000000007c8fef8ea9b1fe46a7689bfb8149341c90431d3800000000000000000000000069c527fc77291722b52649e45c838e41be8bf5d50000000000000000000000007452c558d45f8afc8c83dae62c3f8a5be19c71f60000000000000000000000005ca84c34a381434786738735265b9f3fd814b82400000000000000000000000082af49447d8a07e3bd95bd0d56f35241523fbab1000000000000000000000000a71a021ef66b03e45e0d85590432dfcfa1b7174c",
  "tx_hash": "0xb7c32218b4d06e78a4a4a6a0bd9bfac6765f53cbfeba21d8a1d8b07f6ef3e3b8",
  "args": [
    "0x7C8FeF8eA9b1fE46A7689bfb8149341C90431D38",
    "0x69C527fC77291722b52649E45c838e41be8Bf5d5",
    "0x7452c558d45f8afC8c83dAe62C3f8A5BE19c71f6",
    "0x5Ca84c34a381434786738735265b9f3FD814b824",
    "0x82aF49447D8a07e3bd95BD0d56f35241523fBab1",
    "0xA71A021EF66B03E45E0d85590432DFCfa1b7174C"
  ],
  "data": "0x6101a0604052348015610010575f80fd5b5060405161458938038061458983398101604081905261002f9161029c565b6001600160a01b0380871661018052858116608081905284821660a052908516610120526040805163660d0d6760e01b8152905163660d0d67916004808201926020929091908290030181865afa15801561008c573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906100b0919061031f565b6001600160a01b031660c0816001600160a01b031681525050846001600160a01b0316639c8b2cfb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610105573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610129919061031f565b6001600160a01b031663d7cd39496040518163ffffffff1660e01b8152600401602060405180830381865afa158015610164573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610188919061031f565b6001600160a01b031660e0816001600160a01b031681525050846001600160a01b0316632c2f3c076040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101dd573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610201919061031f565b6001600160a01b03166369d421486040518163ffffffff1660e01b8152600401602060405180830381865afa15801561023c573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610260919061031f565b6001600160a01b03908116610100529182166101405216610160525061034192505050565b6001600160a01b0381168114610299575f80fd5b50565b5f805f805f8060c087890312156102b1575f80fd5b86516102bc81610285565b60208801519096506102cd81610285565b60408801519095506102de81610285565b60608801519094506102ef81610285565b608088015190935061030081610285565b60a088015190925061031181610285565b809150509295509295509295565b5f6020828403121561032f575f80fd5b815161033a81610285565b9392505050565b60805160a05160c05160e05161010051610120516101405161016051610180516140fc61048d5f395f8181610610015281816113f401528181611488015281816114d101528181611840015281816118830152818161193d0152818161198901528181611c990152611ce201525f818161023e01526105bf01525f61069501525f818161066201528181611272015261131801525f8181610564015281816122a8015261235d01525f818161073e01528181611f6b015261201d01525f81816103650152818161095c015281816109d601528181610ab90152610fae01525f81816104e00152610fe001525f818161041a0152818161088d01528181610beb01528181610c6701528181610ce901528181610e2401528181611bc001528181611fa6015281816120540152818161220f015281816122e301528181612394015261257e01526140fc5ff3fe608060405260043610610236575f3560e01c806396b888fa11610129578063c9ac221a116100a8578063ebd3664b1161006d578063ebd3664b146107a7578063f3eab936146107c6578063f931abae146107df578063fabc5d0b146107f3578063fd77d17514610807575f80fd5b8063c9ac221a14610713578063d522f2ee1461072d578063e2a5426014610760578063e3065da714610774578063e4372fe714610793575f80fd5b8063aa579b80116100ee578063aa579b8014610651578063ad5c464814610684578063bae6b633146106b7578063c15e3f2d146106cb578063c4b2b980146106f4575f80fd5b806396b888fa146105995780639710704d146105ae57806397ff6a04146105e15780639f495c15146105ff578063a165daa214610632575f80fd5b80636ed0f620116101b557806380f556051161017a57806380f556051461050257806385bc189f14610521578063907f74141461053f57806390a722771461055357806391cea94e14610586575f80fd5b80636ed0f620146104505780636f0445481461047257806372ccfa60146104915780637dc0d1d0146104b05780637e36c6fc146104cf575f80fd5b806345f3bdcc116101fb57806345f3bdcc1461039f5780634f8632ba146103c45780635131bf8e146103e3578063562a97e5146104095780636a8165481461043c575f80fd5b8063026c35e4146102ba57806309ee789a146102fd578063162b4d0c1461032157806322f3e2d4146103405780633f7cefce14610354575f80fd5b366102b6575f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316346040515f6040518083038185875af1925050503d805f81146102a4576040519150601f19603f3d011682016040523d82523d5f602084013e6102a9565b606091505b50509050806102b457005b005b5f80fd5b3480156102c5575f80fd5b506007546102e090600160801b90046001600160801b031681565b6040516001600160801b0390911681526020015b60405180910390f35b348015610308575f80fd5b50610311610826565b60405190151581526020016102f4565b34801561032c575f80fd5b506006546102e0906001600160801b031681565b34801561034b575f80fd5b506103116109d3565b34801561035f575f80fd5b506103877f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016102f4565b3480156103aa575f80fd5b50600854610387906201000090046001600160a01b031681565b3480156103cf575f80fd5b50600154610387906001600160a01b031681565b3480156103ee575f80fd5b506006546102e090600160801b90046001600160801b031681565b348015610414575f80fd5b506103877f000000000000000000000000000000000000000000000000000000000000000081565b348015610447575f80fd5b506102b4610b9c565b34801561045b575f80fd5b50610464610c9e565b6040519081526020016102f4565b34801561047d575f80fd5b506007546102e0906001600160801b031681565b34801561049c575f80fd5b506102b46104ab36600461372d565b610ce7565b3480156104bb575f80fd5b50600554610387906001600160a01b031681565b3480156104da575f80fd5b506103877f000000000000000000000000000000000000000000000000000000000000000081565b34801561050d575f80fd5b50600354610387906001600160a01b031681565b34801561052c575f80fd5b5060085461031190610100900460ff1681565b34801561054a575f80fd5b50610311610dcb565b34801561055e575f80fd5b506103877f000000000000000000000000000000000000000000000000000000000000000081565b6102b46105943660046138b7565b610e7e565b3480156105a4575f80fd5b5061046460025481565b3480156105b9575f80fd5b506103877f000000000000000000000000000000000000000000000000000000000000000081565b3480156105ec575f80fd5b505f54610387906001600160a01b031681565b34801561060a575f80fd5b506103877f000000000000000000000000000000000000000000000000000000000000000081565b34801561063d575f80fd5b506102b461064c366004613974565b61136b565b34801561065c575f80fd5b506103877f000000000000000000000000000000000000000000000000000000000000000081565b34801561068f575f80fd5b506103877f000000000000000000000000000000000000000000000000000000000000000081565b3480156106c2575f80fd5b50610464611560565b3480156106d6575f80fd5b506106df611593565b604080519283526020830191909152016102f4565b3480156106ff575f80fd5b506102b461070e36600461399e565b505050565b34801561071e575f80fd5b506102b461070e36600461372d565b348015610738575f80fd5b506103877f000000000000000000000000000000000000000000000000000000000000000081565b34801561076b575f80fd5b5061046461177b565b34801561077f575f80fd5b50600454610387906001600160a01b031681565b34801561079e575f80fd5b506104646117ba565b3480156107b2575f80fd5b506102b46107c1366004613aec565b611807565b3480156107d1575f80fd5b506008546103119060ff1681565b3480156107ea575f80fd5b50610464611a73565b3480156107fe575f80fd5b50610464611b8e565b348015610812575f80fd5b506102b461082136600461399e565b611bbe565b5f806040516020016108759060208082526023908201527f455845435554455f5749544844524157414c5f464541545552455f444953414260408201526213115160ea1b606082015260800190565b604051602081830303815290604052805190602001207f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632c2f3c076040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108e7573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061090b9190613b3c565b60405160200161092e9291909182526001600160a01b0316602082015260400190565b60408051808303601f19018152908290528051602090910120633d70e7e560e11b82526004820181905291507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690637ae1cfca90602401602060405180830381865afa1580156109a9573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109cd9190613b5e565b91505090565b5f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166391d4403c604051602001610a33906020808252600c908201526b11115413d4d25517d31254d560a21b604082015260600190565b604051602081830303815290604052805190602001206002546040518363ffffffff1660e01b8152600401610a72929190918252602082015260400190565b602060405180830381865afa158015610a8d573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610ab19190613b5e565b80610b9757507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166391d4403c604051602001610b19906020808252600f908201526e15d2551211149055d05317d31254d5608a1b604082015260600190565b604051602081830303815290604052805190602001206002546040518363ffffffff1660e01b8152600401610b58929190918252602082015260400190565b602060405180830381865afa158015610b73573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610b979190613b5e565b905090565b5f546001600160a01b03163314610bc657604051630da4973960e31b815260040160405180910390fd5b60085460ff1615610c4d57600254604051630c50112160e21b815260048101919091527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906331404484906024015b5f604051808303815f87803b158015610c35575f80fd5b505af1158015610c47573d5f803e3d5ffd5b50505050565b6002546040516303909e2d60e51b815260048101919091527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690637213c5a090602401610c1e565b604051602001610cce906020808252600c908201526b27a92222a92fa5a2a2a822a960a11b604082015260600190565b6040516020818303038152906040528051906020012081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632c2f3c076040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d43573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610d679190613b3c565b6001600160a01b0316336001600160a01b031614610d9857604051636609677b60e11b815260040160405180910390fd5b8151516001600160a01b03163014610dc3576040516308e4775b60e01b815260040160405180910390fd5b61070e611c1a565b5f80604051602001610e0c906020808252818101527f455845435554455f4445504f5349545f464541545552455f44495341424c4544604082015260600190565b604051602081830303815290604052805190602001207f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639c8b2cfb6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108e7573d5f803e3d5ffd5b5f546001600160a01b031615610ea75760405163027d126360e01b815260040160405180910390fd5b6001600160a01b038316610ece576040516369159e9360e01b815260040160405180910390fd5b6008805462010000330275ffffffffffffffffffffffffffffffffffffffff0000199091161790555f80546001600160a01b038581166001600160a01b0319928316811790935560018054918616919092161790556040805163d8dfeb4560e01b8152905163d8dfeb45916004808201926020929091908290030181865afa158015610f5c573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610f809190613b3c565b600380546001600160a01b0319166001600160a01b0392831690811790915560405163714af34b60e01b81527f00000000000000000000000000000000000000000000000000000000000000008316600482015260248101919091525f917f0000000000000000000000000000000000000000000000000000000000000000169063714af34b90604401608060405180830381865afa158015611025573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906110499190613b79565b604083015160808401516001600160801b03918216600160801b9183169182021760065560a0850151600780546fffffffffffffffffffffffffffffffff19169184169182179055929350909161109f91613c11565b11156110be576040516356d7048360e01b815260040160405180910390fd5b6060810151604082015160088054600480546001600160a01b0319166001600160a01b039586169081179091556020870151151560ff19610100959096168214949094029490941661ffff199091161791909117905561111d90611e3a565b6008546004805460405163addd509960e01b81526001600160a01b0391821692810192909252620100009092049091169063addd509990602401602060405180830381865afa158015611172573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906111969190613b3c565b6001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156111d1573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906111f59190613c2a565b6111ff9190613c4a565b61120a90600a613d46565b600780546001600160801b03928316600160801b02921691909117905560085460ff16156112d85761123a610dcb565b15611258576040516358fdc02560e11b815260040160405180910390fd5b60408201516004546112a0916001600160a01b03909116907f0000000000000000000000000000000000000000000000000000000000000000906001600160801b0316611f0b565b600354606080830151604080850151908601516080870151938701516112d0956001600160a01b03169490611f54565b600255610c47565b6112e0610826565b156112fe5760405163844fa17360e01b815260040160405180910390fd5b6040820151600354611346916001600160a01b03909116907f0000000000000000000000000000000000000000000000000000000000000000906001600160801b0316611f0b565b611362826040015183608001518460a001518560600151612291565b60025550505050565b5f546001600160a01b0316331461139557604051630da4973960e31b815260040160405180910390fd5b5f8061139f611593565b90925090505f6113af8284613d54565b600754600354604051630acc462360e31b81526001600160a01b0391821660048201526024810188905260016044820152600160801b9092046001600160801b0316917f000000000000000000000000000000000000000000000000000000000000000090911690635662311890606401602060405180830381865afa15801561143b573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061145f9190613d6b565b6114699190613d54565b6114739190613d82565b6004549091506114ad906001600160a01b03167f0000000000000000000000000000000000000000000000000000000000000000836125ff565b6004805460405162ae511b60e21b81526001600160a01b03918216928101929092527f00000000000000000000000000000000000000000000000000000000000000008116602483018190529087166044830152606482018390525f6084830152906302b9446c9060a40160408051808303815f875af1158015611533573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906115579190613da1565b50505050505050565b604051602001610cce906020808252600f908201526e15d2551211149055d05317d31254d5608a1b604082015260600190565b6008546004805460405163addd509960e01b81526001600160a01b03918216928101929092525f928392620100009091049091169063addd509990602401602060405180830381865afa1580156115ec573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906116109190613b3c565b604080516020810182525f8152905163eeb8a8d360e01b81526001600160a01b03929092169163eeb8a8d39161164891600401613de5565b6040805180830381865afa158015611662573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906116869190613e17565b60085460035460405163addd509960e01b81526001600160a01b0391821660048201529295506201000090910416915063addd509990602401602060405180830381865afa1580156116da573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906116fe9190613b3c565b604080516020810182525f8152905163eeb8a8d360e01b81526001600160a01b03929092169163eeb8a8d39161173691600401613de5565b6040805180830381865afa158015611750573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906117749190613e17565b9293915050565b604051602001610cce906020808252818101527f455845435554455f4445504f5349545f464541545552455f44495341424c4544604082015260600190565b604051602001610cce9060208082526023908201527f455845435554455f5749544844524157414c5f464541545552455f444953414260408201526213115160ea1b606082015260800190565b5f546001600160a01b0316331461183157604051630da4973960e31b815260040160405180910390fd5b6118656001600160a01b0385167f0000000000000000000000000000000000000000000000000000000000000000846125ff565b60405162ae511b60e21b81526001600160a01b0385811660048301527f00000000000000000000000000000000000000000000000000000000000000008116602483018190529085166044830152606482018490525f6084830152906302b9446c9060a40160408051808303815f875af11580156118e5573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906119099190613da1565b50506004545f90611923906001600160a01b03163061263f565b90508015611a1157600454611962906001600160a01b03167f0000000000000000000000000000000000000000000000000000000000000000836125ff565b6004805460015460405162ae511b60e21b81526001600160a01b03928316938101939093527f000000000000000000000000000000000000000000000000000000000000000082166024840181905291166044830152606482018390525f6084830152906302b9446c9060a40160408051808303815f875af11580156119ea573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611a0e9190613da1565b50505b5f546001546040516390e7212760e01b81526001600160a01b0391821660048201529116906390e72127906024015f604051808303815f87803b158015611a56575f80fd5b505af1158015611a68573d5f803e3d5ffd5b505050505050505050565b5f805f611a7e611593565b600854919350915060ff1615611b09576007546006545f916001600160801b03600160801b9091048116918491611ab791879116613d54565b611ac19190613d54565b611acb9190613d82565b600654909150600160801b90046001600160801b03168111611aed5780611b01565b600654600160801b90046001600160801b03165b935050505090565b6007546006545f91600160801b8082046001600160801b039081169386938893611b3893918216920416613e43565b6001600160801b0316611b4b9190613d54565b611b559190613d54565b611b5f9190613d82565b6006549091506001600160801b03168111611b7a5780611b01565b6006546001600160801b0316935050505090565b604051602001610cce906020808252600c908201526b11115413d4d25517d31254d560a21b604082015260600190565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639c8b2cfb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d43573d5f803e3d5ffd5b6003546040516370a0823160e01b81523060048201525f916001600160a01b0316906370a0823190602401602060405180830381865afa158015611c60573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611c849190613d6b565b600354909150611cbe906001600160a01b03167f0000000000000000000000000000000000000000000000000000000000000000836125ff565b6003545f805460405162ae511b60e21b81526001600160a01b0393841660048201527f000000000000000000000000000000000000000000000000000000000000000084166024820181905293909116604482015260648101849052608481018290529091906302b9446c9060a40160408051808303815f875af1158015611d48573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611d6c9190613da1565b5f546001805460405163860ffea160e01b81526001600160a01b0391821660048201526024810192909252604482018490529294509116915063860ffea1906064015f604051808303815f87803b158015611dc5575f80fd5b505af1158015611dd7573d5f803e3d5ffd5b50505f546001546040516390e7212760e01b81526001600160a01b039182166004820152911692506390e7212791506024015f604051808303815f87803b158015611e20575f80fd5b505af1158015611e32573d5f803e3d5ffd5b505050505050565b60408051600481526024810182526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663313ce56760e01b17905290515f91829182916001600160a01b03861691611e949190613e62565b5f60405180830381855afa9150503d805f8114611ecc576040519150601f19603f3d011682016040523d82523d5f602084013e611ed1565b606091505b5091509150818015611ee4575080516020145b611eef576012611f03565b80806020019051810190611f039190613c2a565b949350505050565b81601452806034526f095ea7b30000000000000000000000005f5260205f604460105f875af13d1560015f51141716611f4b57633e3f8f735f526004601cfd5b5f603452505050565b604051637d39aaf160e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526001600160801b038316602483018190525f927f000000000000000000000000000000000000000000000000000000000000000090921691637d39aaf191906044015f604051808303818588803b158015611fea575f80fd5b505af1158015611ffc573d5f803e3d5ffd5b5050604051631cdacd5960e31b81526001600160a01b038a811660048301527f0000000000000000000000000000000000000000000000000000000000000000811660248301526001600160801b03891660448301527f000000000000000000000000000000000000000000000000000000000000000016935063e6d66ac8925060640190505f604051808303815f87803b158015612099575f80fd5b505af11580156120ab573d5f803e3d5ffd5b505f92508291506120b99050565b6040519080825280602002602001820160405280156120e2578160200160208202803683370190505b5090505f604051806101800160405280306001600160a01b03168152602001306001600160a01b031681526020015f6001600160a01b031681526020018a6001600160a01b03168152602001886001600160a01b03168152602001896001600160a01b03168152602001838152602001838152602001866001600160801b031681526020015f15158152602001856001600160801b03168152602001600860029054906101000a90046001600160a01b03166001600160a01b03166324f746976040518163ffffffff1660e01b8152600401602060405180830381865afa1580156121cf573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906121f39190613d6b565b9052604051635b4e956160e01b81529091506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690635b4e956190612244908490600401613ec0565b6020604051808303815f875af1158015612260573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906122849190613d6b565b9998505050505050505050565b604051637d39aaf160e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526001600160801b038316602483018190525f927f000000000000000000000000000000000000000000000000000000000000000090921691637d39aaf191906044015f604051808303818588803b158015612327575f80fd5b505af1158015612339573d5f803e3d5ffd5b5050600354604051631cdacd5960e31b81526001600160a01b0391821660048201527f0000000000000000000000000000000000000000000000000000000000000000821660248201526001600160801b038a1660448201527f0000000000000000000000000000000000000000000000000000000000000000909116935063e6d66ac8925060640190505f604051808303815f87803b1580156123db575f80fd5b505af11580156123ed573d5f803e3d5ffd5b505f9250600191506123fc9050565b604051908082528060200260200182016040528015612425578160200160208202803683370190505b5060035481519192506001600160a01b03169082905f9061244857612448613fca565b6001600160a01b03928316602091820292909201810191909152604080515f80825261018082018352309382018481529282019390935260608101839052600354909316608084015260085460a0840190610100900460ff166124ab57846124ad565b835b8152602001838152602001876001600160801b03168152602001886001600160801b031681526020015f15158152602001866001600160801b03168152602001600860029054906101000a90046001600160a01b03166001600160a01b03166324f746976040518163ffffffff1660e01b8152600401602060405180830381865afa15801561253e573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906125629190613d6b565b905260405163ad23c5a160e01b81529091506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063ad23c5a1906125b3908490600401613fde565b6020604051808303815f875af11580156125cf573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906125f39190613d6b565b98975050505050505050565b81601452806034526fa9059cbb0000000000000000000000005f5260205f604460105f875af13d1560015f51141716611f4b576390b8ec185f526004601cfd5b5f816014526f70a082310000000000000000000000005f5260208060246010865afa601f3d111660205102905092915050565b634e487b7160e01b5f52604160045260245ffd5b60405160e081016001600160401b03811182821017156126a8576126a8612672565b60405290565b604080519081016001600160401b03811182821017156126a8576126a8612672565b604051606081016001600160401b03811182821017156126a8576126a8612672565b60405160c081016001600160401b03811182821017156126a8576126a8612672565b60405161012081016001600160401b03811182821017156126a8576126a8612672565b604051601f8201601f191681016001600160401b038111828210171561275f5761275f612672565b604052919050565b6001600160a01b038116811461277b575f80fd5b50565b803561278981612767565b919050565b5f6001600160401b038211156127a6576127a6612672565b5060051b60200190565b5f82601f8301126127bf575f80fd5b81356127d26127cd8261278e565b612737565b8082825260208201915060208360051b8601019250858311156127f3575f80fd5b602085015b8381101561281957803561280b81612767565b8352602092830192016127f8565b5095945050505050565b5f60e08284031215612833575f80fd5b61283b612686565b823581526020808401359082015260408084013590820152606080840135908201526080808401359082015260a0808401359082015260c0928301359281019290925250919050565b801515811461277b575f80fd5b5f602082840312156128a1575f80fd5b604051602081016001600160401b03811182821017156128c3576128c3612672565b60405290508082356128d481612884565b905292915050565b5f82601f8301126128eb575f80fd5b8135602083015f806001600160401b0384111561290a5761290a612672565b50601f8301601f191660200161291f81612737565b915050828152858383011115612933575f80fd5b828260208301375f92810160200192909252509392505050565b5f82601f83011261295c575f80fd5b813561296a6127cd8261278e565b8082825260208201915060208360051b86010192508583111561298b575f80fd5b602085015b838110156128195780356001600160401b038111156129ad575f80fd5b86016040818903601f190112156129c2575f80fd5b6129ca6126ae565b60208201356001600160401b038111156129e2575f80fd5b6129f18a6020838601016128dc565b82525060408201356001600160401b03811115612a0c575f80fd5b612a1b8a6020838601016127b0565b6020830152508085525050602083019250602081019050612990565b5f60408284031215612a47575f80fd5b612a4f6126ae565b905081356001600160401b03811115612a66575f80fd5b8201601f81018413612a76575f80fd5b8035612a846127cd8261278e565b8082825260208201915060208360051b850101925086831115612aa5575f80fd5b602084015b83811015612b335780356001600160401b03811115612ac7575f80fd5b85016040818a03601f19011215612adc575f80fd5b612ae46126ae565b60208201356001600160401b03811115612afc575f80fd5b612b0b8b6020838601016128dc565b82525060408201359150612b1e82612767565b60208181019290925284529283019201612aaa565b50845250505060208201356001600160401b03811115612b51575f80fd5b612b5d8482850161294d565b60208301525092915050565b5f82601f830112612b78575f80fd5b8135612b866127cd8261278e565b8082825260208201915060208360051b860101925085831115612ba7575f80fd5b602085015b838110156128195780356001600160401b03811115612bc9575f80fd5b86016040818903601f19011215612bde575f80fd5b612be66126ae565b60208201356001600160401b03811115612bfe575f80fd5b612c0d8a6020838601016128dc565b82525060408201356001600160401b03811115612c28575f80fd5b60208184010192505088601f830112612c3f575f80fd5b8135612c4d6127cd8261278e565b8082825260208201915060208360051b86010192508b831115612c6e575f80fd5b6020850194505b82851015612c90578435825260209485019490910190612c75565b8060208501525050508085525050602083019250602081019050612bac565b5f60408284031215612cbf575f80fd5b612cc76126ae565b905081356001600160401b03811115612cde575f80fd5b8201601f81018413612cee575f80fd5b8035612cfc6127cd8261278e565b8082825260208201915060208360051b850101925086831115612d1d575f80fd5b602084015b83811015612da35780356001600160401b03811115612d3f575f80fd5b85016040818a03601f19011215612d54575f80fd5b612d5c6126ae565b60208201356001600160401b03811115612d74575f80fd5b612d838b6020838601016128dc565b825250604091909101356020808301919091529084529283019201612d22565b50845250505060208201356001600160401b03811115612dc1575f80fd5b612b5d84828501612b69565b5f60408284031215612ddd575f80fd5b612de56126ae565b905081356001600160401b03811115612dfc575f80fd5b8201601f81018413612e0c575f80fd5b8035612e1a6127cd8261278e565b8082825260208201915060208360051b850101925086831115612e3b575f80fd5b602084015b83811015612da35780356001600160401b03811115612e5d575f80fd5b85016040818a03601f19011215612e72575f80fd5b612e7a6126ae565b60208201356001600160401b03811115612e92575f80fd5b612ea18b6020838601016128dc565b825250604091909101356020808301919091529084529283019201612e40565b5f82601f830112612ed0575f80fd5b8135612ede6127cd8261278e565b8082825260208201915060208360051b860101925085831115612eff575f80fd5b602085015b838110156128195780356001600160401b03811115612f21575f80fd5b86016040818903601f19011215612f36575f80fd5b612f3e6126ae565b60208201356001600160401b03811115612f56575f80fd5b612f658a6020838601016128dc565b82525060408201356001600160401b03811115612f80575f80fd5b60208184010192505088601f830112612f97575f80fd5b8135612fa56127cd8261278e565b8082825260208201915060208360051b86010192508b831115612fc6575f80fd5b6020850194505b82851015612ff1578435612fe081612884565b825260209485019490910190612fcd565b8060208501525050508085525050602083019250602081019050612f04565b5f60408284031215613020575f80fd5b6130286126ae565b905081356001600160401b0381111561303f575f80fd5b8201601f8101841361304f575f80fd5b803561305d6127cd8261278e565b8082825260208201915060208360051b85010192508683111561307e575f80fd5b602084015b8381101561310c5780356001600160401b038111156130a0575f80fd5b85016040818a03601f190112156130b5575f80fd5b6130bd6126ae565b60208201356001600160401b038111156130d5575f80fd5b6130e48b6020838601016128dc565b825250604082013591506130f782612884565b60208181019290925284529283019201613083565b50845250505060208201356001600160401b0381111561312a575f80fd5b612b5d84828501612ec1565b5f60408284031215613146575f80fd5b61314e6126ae565b905081356001600160401b03811115613165575f80fd5b8201601f81018413613175575f80fd5b80356131836127cd8261278e565b8082825260208201915060208360051b8501019250868311156131a4575f80fd5b602084015b83811015612da35780356001600160401b038111156131c6575f80fd5b85016040818a03601f190112156131db575f80fd5b6131e36126ae565b60208201356001600160401b038111156131fb575f80fd5b61320a8b6020838601016128dc565b8252506040919091013560208083019190915290845292830192016131a9565b5f82601f830112613239575f80fd5b81356132476127cd8261278e565b8082825260208201915060208360051b860101925085831115613268575f80fd5b602085015b838110156128195780356001600160401b0381111561328a575f80fd5b86016040818903601f1901121561329f575f80fd5b6132a76126ae565b60208201356001600160401b038111156132bf575f80fd5b6132ce8a6020838601016128dc565b82525060408201356001600160401b038111156132e9575f80fd5b60208184010192505088601f830112613300575f80fd5b813561330e6127cd8261278e565b8082825260208201915060208360051b86010192508b83111561332f575f80fd5b602085015b8381101561336f5780356001600160401b03811115613351575f80fd5b6133608e6020838a01016128dc565b84525060209283019201613334565b50806020850152505050808552505060208301925060208101905061326d565b5f6040828403121561339f575f80fd5b6133a76126ae565b905081356001600160401b038111156133be575f80fd5b8201601f810184136133ce575f80fd5b80356133dc6127cd8261278e565b8082825260208201915060208360051b8501019250868311156133fd575f80fd5b602084015b838110156134a95780356001600160401b0381111561341f575f80fd5b85016040818a03601f19011215613434575f80fd5b61343c6126ae565b60208201356001600160401b03811115613454575f80fd5b6134638b6020838601016128dc565b82525060408201356001600160401b0381111561347e575f80fd5b61348d8b6020838601016128dc565b6020830152508085525050602083019250602081019050613402565b50845250505060208201356001600160401b038111156134c7575f80fd5b612b5d8482850161322a565b5f604082840312156134e3575f80fd5b6134eb6126ae565b905081356001600160401b03811115613502575f80fd5b8201601f81018413613512575f80fd5b80356135206127cd8261278e565b8082825260208201915060208360051b850101925086831115613541575f80fd5b602084015b838110156134a95780356001600160401b03811115613563575f80fd5b85016040818a03601f19011215613578575f80fd5b6135806126ae565b60208201356001600160401b03811115613598575f80fd5b6135a78b6020838601016128dc565b82525060408201356001600160401b038111156135c2575f80fd5b6135d18b6020838601016128dc565b6020830152508085525050602083019250602081019050613546565b5f60e082840312156135fd575f80fd5b613605612686565b905081356001600160401b0381111561361c575f80fd5b61362884828501612a37565b82525060208201356001600160401b03811115613643575f80fd5b61364f84828501612caf565b60208301525060408201356001600160401b0381111561366d575f80fd5b61367984828501612dcd565b60408301525060608201356001600160401b03811115613697575f80fd5b6136a384828501613010565b60608301525060808201356001600160401b038111156136c1575f80fd5b6136cd84828501613136565b60808301525060a08201356001600160401b038111156136eb575f80fd5b6136f78482850161338f565b60a08301525060c08201356001600160401b03811115613715575f80fd5b613721848285016134d3565b60c08301525092915050565b5f805f6060848603121561373f575f80fd5b8335925060208401356001600160401b0381111561375b575f80fd5b8401610120818703121561376d575f80fd5b6137756126d0565b81356001600160401b0381111561378a575f80fd5b820160e0818903121561379b575f80fd5b6137a3612686565b6137ac8261277e565b81526137ba6020830161277e565b60208201526137cb6040830161277e565b60408201526137dc6060830161277e565b60608201526137ed6080830161277e565b608082015260a08201356001600160401b0381111561380a575f80fd5b6138168a8285016127b0565b60a08301525060c08201356001600160401b03811115613834575f80fd5b6138408a8285016127b0565b60c0830152508252506138568760208401612823565b6020820152613869876101008401612891565b6040820152809350505060408401356001600160401b0381111561388b575f80fd5b613897868287016135ed565b9150509250925092565b80356001600160801b0381168114612789575f80fd5b5f805f8385036101008112156138cb575f80fd5b84356138d681612767565b935060208501356138e681612767565b925060c0603f19820112156138f9575f80fd5b506139026126f2565b604085013561391081612767565b8152606085013561392081612884565b6020820152613931608086016138a1565b604082015261394260a086016138a1565b606082015261395360c086016138a1565b608082015261396460e086016138a1565b60a0820152809150509250925092565b5f8060408385031215613985575f80fd5b823561399081612767565b946020939093013593505050565b5f805f606084860312156139b0575f80fd5b8335925060208401356001600160401b038111156139cc575f80fd5b840161012081870312156139de575f80fd5b6139e66126d0565b81356001600160401b038111156139fb575f80fd5b82016101208189031215613a0d575f80fd5b613a15612714565b613a1e8261277e565b8152613a2c6020830161277e565b6020820152613a3d6040830161277e565b6040820152613a4e6060830161277e565b6060820152613a5f6080830161277e565b6080820152613a7060a0830161277e565b60a0820152613a8160c0830161277e565b60c082015260e08201356001600160401b03811115613a9e575f80fd5b613aaa8a8285016127b0565b60e0830152506101008201356001600160401b03811115613ac9575f80fd5b613ad58a8285016127b0565b610100830152508252506138568760208401612823565b5f805f8060808587031215613aff575f80fd5b8435613b0a81612767565b93506020850135613b1a81612767565b9250604085013591506060850135613b3181612884565b939692955090935050565b5f60208284031215613b4c575f80fd5b8151613b5781612767565b9392505050565b5f60208284031215613b6e575f80fd5b8151613b5781612884565b5f6080828403128015613b8a575f80fd5b50604051608081016001600160401b0381118282101715613bad57613bad612672565b6040528251613bbb81612767565b81526020830151613bcb81612767565b60208201526040830151613bde81612767565b60408201526060830151613bf181612767565b60608201529392505050565b634e487b7160e01b5f52601160045260245ffd5b80820180821115613c2457613c24613bfd565b92915050565b5f60208284031215613c3a575f80fd5b815160ff81168114613b57575f80fd5b60ff8181168382160190811115613c2457613c24613bfd565b6001815b6001841115613c9e57808504811115613c8257613c82613bfd565b6001841615613c9057908102905b60019390931c928002613c67565b935093915050565b5f82613cb457506001613c24565b81613cc057505f613c24565b8160018114613cd65760028114613ce057613cfc565b6001915050613c24565b60ff841115613cf157613cf1613bfd565b50506001821b613c24565b5060208310610133831016604e8410600b8410161715613d1f575081810a613c24565b613d2b5f198484613c63565b805f1904821115613d3e57613d3e613bfd565b029392505050565b5f613b5760ff841683613ca6565b8082028115828204841417613c2457613c24613bfd565b5f60208284031215613d7b575f80fd5b5051919050565b5f82613d9c57634e487b7160e01b5f52601260045260245ffd5b500490565b5f8060408385031215613db2575f80fd5b505080516020909101519092909150565b5f5b83811015613ddd578181015183820152602001613dc5565b50505f910152565b602081525f8251806020840152613e03816040850160208701613dc3565b601f01601f19169190910160400192915050565b5f8060408385031215613e28575f80fd5b8251613e3381612884565b6020939093015192949293505050565b6001600160801b038181168382160190811115613c2457613c24613bfd565b5f8251613e73818460208701613dc3565b9190910192915050565b5f8151808452602084019350602083015f5b82811015613eb65781516001600160a01b0316865260209586019590910190600101613e8f565b5093949350505050565b60208152613eda6020820183516001600160a01b03169052565b5f6020830151613ef560408401826001600160a01b03169052565b5060408301516001600160a01b03811660608401525060608301516001600160a01b03811660808401525060808301516001600160a01b03811660a08401525060a08301516001600160a01b03811660c08401525060c083015161018060e0840152613f656101a0840182613e7d565b905060e0840151601f1984830301610100850152613f838282613e7d565b915050610100840151610120840152610120840151613fa761014085018215159052565b506101408401516101608401526101608401516101808401528091505092915050565b634e487b7160e01b5f52603260045260245ffd5b60208152613ff86020820183516001600160a01b03169052565b5f602083015161401360408401826001600160a01b03169052565b5060408301516001600160a01b03811660608401525060608301516001600160a01b038116608084015250608083015161016060a0840152614059610180840182613e7d565b905060a0840151601f198483030160c08501526140768282613e7d565b91505060c084015160e084015260e08401516101008401526101008401516140a361012085018215159052565b50610120840151610140840152610140840151610160840152809150509291505056fea264697066735822122039b858c3fff0290078e6eeb077d7f6b0c5d8933962a0b114d928a35169ee281764736f6c634300081a00330000000000000000000000007c8fef8ea9b1fe46a7689bfb8149341c90431d3800000000000000000000000069c527fc77291722b52649e45c838e41be8bf5d50000000000000000000000007452c558d45f8afc8c83dae62c3f8a5be19c71f60000000000000000000000005ca84c34a381434786738735265b9f3fd814b82400000000000000000000000082af49447d8a07e3bd95bd0d56f35241523fbab1000000000000000000000000a71a021ef66b03e45e0d85590432dfcfa1b7174c",
  "artifact_path": "GmxV2CauldronOrderAgent.sol",
  "artifact_full_path": "GmxV2CauldronOrderAgent.sol:GmxV2CauldronRouterOrder",
  "standardJsonInput": {
    "language": "Solidity",
    "sources": {
      "src/periphery/GmxV2CauldronOrderAgent.sol": {
        "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.0;\n\nimport {IERC20} from \"@BoringSolidity/interfaces/IERC20.sol\";\nimport {BoringERC20} from \"@BoringSolidity/libraries/BoringERC20.sol\";\nimport {LibClone} from \"@solady/utils/LibClone.sol\";\nimport {SafeTransferLib} from \"@solady/utils/SafeTransferLib.sol\";\nimport {IBentoBoxV1} from \"/interfaces/IBentoBoxV1.sol\";\nimport {ICauldronV4GmxV2} from \"/interfaces/ICauldronV4GmxV2.sol\";\nimport {ICauldronV4} from \"/interfaces/ICauldronV4.sol\";\nimport {OperatableV2} from \"/mixins/OperatableV2.sol\";\nimport {IOracle} from \"/interfaces/IOracle.sol\";\nimport {IGmxV2Deposit, IGmxV2WithdrawalCallbackReceiver, IGmxV2Withdrawal, IGmxV2EventUtils, IGmxV2Market, IGmxDataStore, IGmxV2DepositCallbackReceiver, IGmxReader, IGmxV2DepositHandler, IGmxV2WithdrawalHandler, IGmxV2ExchangeRouter} from \"/interfaces/IGmxV2.sol\";\nimport {IWETH} from \"/interfaces/IWETH.sol\";\n\nstruct GmRouterOrderParams {\n    address inputToken;\n    bool deposit;\n    uint128 inputAmount;\n    uint128 executionFee;\n    uint128 minOutput;\n    uint128 minOutLong; // 0 for deposit\n}\n\ninterface IGmCauldronOrderAgent {\n    function createOrder(address user, GmRouterOrderParams memory params) external payable returns (address order);\n\n    function setOracle(address market, IOracle oracle) external;\n\n    function oracles(address market) external view returns (IOracle);\n\n    function callbackGasLimit() external view returns (uint256);\n\n    function setCallbackGasLimit(uint256 _callbackGasLimit) external;\n}\n\ninterface IGmRouterOrder {\n    function init(address _cauldron, address user, GmRouterOrderParams memory _params) external payable;\n\n    /// @notice cancelling an order\n    function cancelOrder() external;\n\n    function getExchangeRates() external view returns (uint256 shortExchangeRate, uint256 marketExchangeRate);\n\n    /// @notice withdraw from an order that does not end in addition of collateral.\n    function withdrawFromOrder(address token, address to, uint256 amount, bool closeOrder) external;\n\n    /// @notice the value of the order in collateral terms\n    function orderValueInCollateral() external view returns (uint256);\n\n    /// @notice sends a specific value to recipient\n    function sendValueInCollateral(address recipient, uint256 share) external;\n\n    function isActive() external view returns (bool);\n\n    function orderKey() external view returns (bytes32);\n\n    function orderAgent() external view returns (IGmCauldronOrderAgent);\n}\n\ncontract GmxV2CauldronRouterOrder is IGmRouterOrder, IGmxV2DepositCallbackReceiver, IGmxV2WithdrawalCallbackReceiver {\n    using SafeTransferLib for address;\n    using BoringERC20 for IERC20;\n\n    error ErrFinalized();\n    error ErrNotOwner();\n    error ErrAlreadyInitialized();\n    error ErrMinOutTooLarge();\n    error ErrUnauthorized();\n    error ErrWrongUser();\n    error ErrIncorrectInitialization();\n    error ErrExecuteDepositsDisabled();\n    error ErrExecuteWithdrawalsDisabled();\n\n    event LogRefundWETH(address indexed user, uint256 amount);\n\n    bytes32 public constant DEPOSIT_LIST = keccak256(abi.encode(\"DEPOSIT_LIST\"));\n    bytes32 public constant WITHDRAWAL_LIST = keccak256(abi.encode(\"WITHDRAWAL_LIST\"));\n    bytes32 public constant ORDER_KEEPER = keccak256(abi.encode(\"ORDER_KEEPER\"));\n    bytes32 public constant EXECUTE_DEPOSIT_FEATURE_DISABLED = keccak256(abi.encode(\"EXECUTE_DEPOSIT_FEATURE_DISABLED\"));\n    bytes32 public constant EXECUTE_WITHDRAWAL_FEATURE_DISABLED = keccak256(abi.encode(\"EXECUTE_WITHDRAWAL_FEATURE_DISABLED\"));\n\n    IGmxV2ExchangeRouter public immutable GMX_ROUTER;\n    IGmxReader public immutable GMX_READER;\n    IGmxDataStore public immutable DATASTORE;\n    address public immutable DEPOSIT_VAULT;\n    address public immutable WITHDRAWAL_VAULT;\n    address public immutable SYNTHETICS_ROUTER;\n    IWETH public immutable WETH;\n    address public immutable REFUND_TO;\n    IBentoBoxV1 public immutable degenBox;\n\n    address public cauldron;\n    address public user;\n    bytes32 public orderKey;\n    address public market;\n    address public shortToken;\n    IOracle public oracle;\n    uint128 public inputAmount;\n    uint128 public minOut;\n    uint128 public minOutLong;\n    uint128 public oracleDecimalScale;\n\n    bool public depositType;\n    bool public isHomogenousMarket;\n    IGmCauldronOrderAgent public orderAgent;\n\n    modifier onlyCauldron() virtual {\n        if (msg.sender != cauldron) {\n            revert ErrNotOwner();\n        }\n        _;\n    }\n\n    modifier onlyDepositHandler() {\n        if (msg.sender != address(GMX_ROUTER.depositHandler())) {\n            revert ErrUnauthorized();\n        }\n        _;\n    }\n\n    modifier onlyWithdrawalHandler() {\n        if (msg.sender != address(GMX_ROUTER.withdrawalHandler())) {\n            revert ErrUnauthorized();\n        }\n        _;\n    }\n\n    receive() external payable virtual {\n        (bool success, ) = REFUND_TO.call{value: msg.value}(\"\");\n\n        // ignore failures\n        if (!success) {\n            return;\n        }\n    }\n\n    constructor(\n        IBentoBoxV1 _degenBox,\n        IGmxV2ExchangeRouter _gmxRouter,\n        address _syntheticsRouter,\n        IGmxReader _gmxReader,\n        IWETH _weth,\n        address _refundTo\n    ) {\n        degenBox = _degenBox;\n        GMX_ROUTER = _gmxRouter;\n        GMX_READER = _gmxReader;\n        SYNTHETICS_ROUTER = _syntheticsRouter;\n        DATASTORE = IGmxDataStore(_gmxRouter.dataStore());\n        DEPOSIT_VAULT = IGmxV2DepositHandler(_gmxRouter.depositHandler()).depositVault();\n        WITHDRAWAL_VAULT = IGmxV2WithdrawalHandler(_gmxRouter.withdrawalHandler()).withdrawalVault();\n        WETH = _weth;\n        REFUND_TO = _refundTo;\n    }\n\n    function init(address _cauldron, address _user, GmRouterOrderParams memory params) external payable {\n        if (cauldron != address(0)) {\n            revert ErrAlreadyInitialized();\n        }\n\n        if (_cauldron == address(0)) {\n            revert ErrIncorrectInitialization();\n        }\n\n        orderAgent = GmxV2CauldronOrderAgent(msg.sender);\n        cauldron = _cauldron;\n        user = _user;\n\n        market = address(ICauldronV4(_cauldron).collateral());\n        IGmxV2Market.Props memory props = GMX_READER.getMarket(address(DATASTORE), market);\n\n        inputAmount = params.inputAmount;\n        minOut = params.minOutput;\n        minOutLong = params.minOutLong;\n\n        if (uint256(params.minOutput) + uint256(params.minOutLong) > type(uint128).max) {\n            revert ErrMinOutTooLarge();\n        }\n\n        isHomogenousMarket = props.longToken == props.shortToken;\n        shortToken = props.shortToken;\n        depositType = params.deposit;\n\n        oracleDecimalScale = uint128(10 ** (orderAgent.oracles(shortToken).decimals() + IERC20(shortToken).safeDecimals()));\n\n        if (depositType) {\n            if (isDepositExecutionDisabled()) {\n                revert ErrExecuteDepositsDisabled();\n            }\n\n            shortToken.safeApprove(address(SYNTHETICS_ROUTER), params.inputAmount);\n            orderKey = _createDepositOrder(\n                market,\n                props.shortToken,\n                props.longToken,\n                params.inputAmount,\n                params.minOutput,\n                params.executionFee\n            );\n        } else {\n            if (isWithdrawalExecutionDisabled()) {\n                revert ErrExecuteWithdrawalsDisabled();\n            }\n\n            market.safeApprove(address(SYNTHETICS_ROUTER), params.inputAmount);\n            orderKey = _createWithdrawalOrder(params.inputAmount, params.minOutput, params.minOutLong, params.executionFee);\n        }\n    }\n\n    function isDepositExecutionDisabled() public view returns (bool) {\n        bytes32 depositExecutionDisabledKey = keccak256(abi.encode(EXECUTE_DEPOSIT_FEATURE_DISABLED, GMX_ROUTER.depositHandler()));\n        return DATASTORE.getBool(depositExecutionDisabledKey);\n    }\n\n    function isWithdrawalExecutionDisabled() public view returns (bool) {\n        bytes32 withdrawalExecutionDisabledKey = keccak256(abi.encode(EXECUTE_WITHDRAWAL_FEATURE_DISABLED, GMX_ROUTER.withdrawalHandler()));\n        return DATASTORE.getBool(withdrawalExecutionDisabledKey);\n    }\n\n    function cancelOrder() external onlyCauldron {\n        if (depositType) {\n            GMX_ROUTER.cancelDeposit(orderKey);\n        } else {\n            GMX_ROUTER.cancelWithdrawal(orderKey);\n        }\n    }\n\n    function withdrawFromOrder(address token, address to, uint256 amount, bool) external onlyCauldron {\n        token.safeTransfer(address(degenBox), amount);\n        degenBox.deposit(IERC20(token), address(degenBox), to, amount, 0);\n\n        uint256 balance = shortToken.balanceOf(address(this));\n        if (balance > 0) {\n            shortToken.safeTransfer(address(degenBox), balance);\n            degenBox.deposit(IERC20(shortToken), address(degenBox), user, balance, 0);\n        }\n        ICauldronV4GmxV2(cauldron).closeOrder(user);\n    }\n\n    function sendValueInCollateral(address recipient, uint256 shareMarketToken) public onlyCauldron {\n        (uint256 shortExchangeRate, uint256 marketExchangeRate) = getExchangeRates();\n\n        /// @dev For oracleDecimalScale = 1e14:\n        /// (18 decimals + 14 decimals) - (8 decimals + 18 decimals) = 6 decimals\n        ///\n        /// Ex:\n        /// - 100,000 GM token where 1 GM = 0.5 USD each\n        /// - 1 USDC = 0.997 USD\n        /// - 99700000 is the chainlink oracle USDC price in USD with 8 decimals\n        /// - 2e18 is how many GM tokens 1 USD can buy\n        /// - 1e14 is 8 decimals for the chainlink oracle + 6 decimals for USDC\n        /// (100_000e18 * 1e14) / (99700000 *  2e18) = ≈50150.45e6 USDC\n        uint256 amountShortToken = (degenBox.toAmount(IERC20(market), shareMarketToken, true) * oracleDecimalScale) /\n            (shortExchangeRate * marketExchangeRate);\n\n        shortToken.safeTransfer(address(degenBox), amountShortToken);\n        degenBox.deposit(IERC20(shortToken), address(degenBox), recipient, amountShortToken, 0);\n    }\n\n    /// @notice the value of the order in collateral terms\n    function orderValueInCollateral() public view returns (uint256 result) {\n        (uint256 shortExchangeRate, uint256 marketExchangeRate) = getExchangeRates();\n\n        /// @dev short exchangeRate is in USD in native decimals\n        /// marketExchangeRate is in inverse similar to other cauldron oracles 1e36 / (price in 18 decimals)\n        /// Ex:\n        /// - input is 100,000 USDC\n        /// - 1 USDC = 0.997 USD\n        /// - 99700000 is the chainlink oracle USDC price in USD with 8 decimals\n        /// - 2e18 is how many GM tokens 1 USD can buy\n        ///  (100_000e6 * 99700000 * 2e18) / 1e14 = ≈199400e18 GM tokens\n        if (depositType) {\n            uint256 marketTokenFromValue = (inputAmount * shortExchangeRate * marketExchangeRate) / oracleDecimalScale;\n            result = minOut < marketTokenFromValue ? minOut : marketTokenFromValue;\n        } else {\n            uint256 marketTokenFromValue = ((minOut + minOutLong) * shortExchangeRate * marketExchangeRate) / oracleDecimalScale;\n            result = inputAmount < marketTokenFromValue ? inputAmount : marketTokenFromValue;\n        }\n    }\n\n    function getExchangeRates() public view returns (uint256 shortExchangeRate, uint256 marketExchangeRate) {\n        (, shortExchangeRate) = orderAgent.oracles(shortToken).peek(bytes(\"\"));\n        (, marketExchangeRate) = orderAgent.oracles(market).peek(bytes(\"\"));\n    }\n\n    function isActive() public view returns (bool) {\n        return DATASTORE.containsBytes32(DEPOSIT_LIST, orderKey) || DATASTORE.containsBytes32(WITHDRAWAL_LIST, orderKey);\n    }\n\n    function _createDepositOrder(\n        address _gmToken,\n        address _inputToken,\n        address _underlyingToken,\n        uint128 _usdcAmount,\n        uint128 _minGmTokenOutput,\n        uint128 _executionFee\n    ) private returns (bytes32) {\n        GMX_ROUTER.sendWnt{value: _executionFee}(address(DEPOSIT_VAULT), _executionFee);\n        GMX_ROUTER.sendTokens(_inputToken, address(DEPOSIT_VAULT), _usdcAmount);\n\n        address[] memory emptyPath = new address[](0);\n\n        IGmxV2Deposit.CreateDepositParams memory params = IGmxV2Deposit.CreateDepositParams({\n            receiver: address(this),\n            callbackContract: address(this),\n            uiFeeReceiver: address(0),\n            market: _gmToken,\n            initialLongToken: _underlyingToken,\n            initialShortToken: _inputToken,\n            longTokenSwapPath: emptyPath,\n            shortTokenSwapPath: emptyPath,\n            minMarketTokens: _minGmTokenOutput,\n            shouldUnwrapNativeToken: false,\n            executionFee: _executionFee,\n            callbackGasLimit: orderAgent.callbackGasLimit()\n        });\n\n        return GMX_ROUTER.createDeposit(params);\n    }\n\n    function _createWithdrawalOrder(\n        uint128 _inputAmount,\n        uint128 _minUsdcOutput,\n        uint128 _minOutLong,\n        uint128 _executionFee\n    ) private returns (bytes32) {\n        GMX_ROUTER.sendWnt{value: _executionFee}(address(WITHDRAWAL_VAULT), _executionFee);\n        GMX_ROUTER.sendTokens(market, address(WITHDRAWAL_VAULT), _inputAmount);\n\n        address[] memory path = new address[](1);\n        path[0] = market;\n\n        address[] memory emptyPath = new address[](0);\n\n        IGmxV2Withdrawal.CreateWithdrawalParams memory params = IGmxV2Withdrawal.CreateWithdrawalParams({\n            receiver: address(this),\n            callbackContract: address(this),\n            uiFeeReceiver: address(0),\n            market: market,\n            longTokenSwapPath: isHomogenousMarket ? emptyPath : path,\n            shortTokenSwapPath: emptyPath,\n            minLongTokenAmount: _minOutLong,\n            minShortTokenAmount: _minUsdcOutput,\n            shouldUnwrapNativeToken: false,\n            executionFee: _executionFee,\n            callbackGasLimit: orderAgent.callbackGasLimit()\n        });\n\n        return GMX_ROUTER.createWithdrawal(params);\n    }\n\n    function _depositMarketTokensAsCollateral() internal {\n        uint256 received = IERC20(market).balanceOf(address(this));\n        market.safeTransfer(address(degenBox), received);\n        (, uint256 share) = degenBox.deposit(IERC20(market), address(degenBox), cauldron, received, 0);\n        ICauldronV4(cauldron).addCollateral(user, true, share);\n        ICauldronV4GmxV2(cauldron).closeOrder(user);\n    }\n\n    function afterDepositExecution(\n        bytes32 /*key*/,\n        IGmxV2Deposit.Props memory deposit,\n        IGmxV2EventUtils.EventLogData memory /*eventData*/\n    ) external override onlyDepositHandler {\n        // verify that the deposit was from this address\n        if (deposit.addresses.account != address(this)) {\n            revert ErrWrongUser();\n        }\n        _depositMarketTokensAsCollateral();\n    }\n\n    function afterWithdrawalCancellation(\n        bytes32 /*key*/,\n        IGmxV2Withdrawal.Props memory withdrawal,\n        IGmxV2EventUtils.EventLogData memory /*eventData*/\n    ) external override onlyWithdrawalHandler {\n        // verify that the withdrawal was from this address\n        if (withdrawal.addresses.account != address(this)) {\n            revert ErrWrongUser();\n        }\n        _depositMarketTokensAsCollateral();\n    }\n\n    function afterDepositCancellation(\n        bytes32 key,\n        IGmxV2Deposit.Props memory deposit,\n        IGmxV2EventUtils.EventLogData memory eventData\n    ) external override {}\n\n    function afterWithdrawalExecution(\n        bytes32 key,\n        IGmxV2Withdrawal.Props memory withdrawal,\n        IGmxV2EventUtils.EventLogData memory eventData\n    ) external override {}\n}\n\ncontract GmxV2CauldronOrderAgent is IGmCauldronOrderAgent, OperatableV2 {\n    using SafeTransferLib for address;\n\n    event LogSetOracle(address indexed market, IOracle indexed oracle);\n    event LogOrderCreated(address indexed order, address indexed user, GmRouterOrderParams params);\n    event LogCallbackGasLimit(uint256 previous, uint256 current);\n\n    error ErrInvalidParams();\n\n    address public immutable orderImplementation;\n    IBentoBoxV1 public immutable degenBox;\n    mapping(address => IOracle) public oracles;\n\n    uint256 public callbackGasLimit = 1_000_000;\n\n    constructor(IBentoBoxV1 _degenBox, address _orderImplementation, address _owner) OperatableV2(_owner) {\n        degenBox = _degenBox;\n        orderImplementation = _orderImplementation;\n    }\n\n    function setCallbackGasLimit(uint256 _callbackGasLimit) external onlyOwner {\n        emit LogCallbackGasLimit(callbackGasLimit, _callbackGasLimit);\n        callbackGasLimit = _callbackGasLimit;\n    }\n\n    function setOracle(address market, IOracle oracle) external onlyOwner {\n        oracles[market] = oracle;\n        emit LogSetOracle(market, oracle);\n    }\n\n    function createOrder(address user, GmRouterOrderParams memory params) external payable override onlyOperators returns (address order) {\n        order = LibClone.clone(orderImplementation);\n\n        (uint256 amount, ) = degenBox.withdraw(\n            IERC20(params.inputToken),\n            address(this),\n            address(order),\n            0,\n            degenBox.balanceOf(IERC20(params.inputToken), address(this))\n        );\n\n        params.inputAmount = uint128(amount);\n        IGmRouterOrder(order).init{value: msg.value}(msg.sender, user, params);\n\n        emit LogOrderCreated(order, user, params);\n    }\n}\n "
      },
      "lib/BoringSolidity/contracts/interfaces/IERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IERC20 {\n    // transfer and tranferFrom have been removed, because they don't work on all tokens (some aren't ERC20 complaint).\n    // By removing them you can't accidentally use them.\n    // name, symbol and decimals have been removed, because they are optional and sometimes wrongly implemented (MKR).\n    // Use BoringERC20 with `using BoringERC20 for IERC20` and call `safeTransfer`, `safeTransferFrom`, etc instead.\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /// @notice EIP 2612\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n}\n\ninterface IStrictERC20 {\n    // This is the strict ERC20 interface. Don't use this, certainly not if you don't control the ERC20 token you're calling.\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address _owner) external view returns (uint256 balance);\n    function transfer(address _to, uint256 _value) external returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\n    function approve(address _spender, uint256 _value) external returns (bool success);\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /// @notice EIP 2612\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n}\n"
      },
      "lib/BoringSolidity/contracts/libraries/BoringERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport {IERC20} from \"../interfaces/IERC20.sol\";\n\n// solhint-disable avoid-low-level-calls\n\nlibrary BoringERC20 {\n    bytes4 private constant SIG_SYMBOL = 0x95d89b41; // symbol()\n    bytes4 private constant SIG_NAME = 0x06fdde03; // name()\n    bytes4 private constant SIG_DECIMALS = 0x313ce567; // decimals()\n    bytes4 private constant SIG_BALANCE_OF = 0x70a08231; // balanceOf(address)\n    bytes4 private constant SIG_TOTALSUPPLY = 0x18160ddd; // balanceOf(address)\n    bytes4 private constant SIG_TRANSFER = 0xa9059cbb; // transfer(address,uint256)\n    bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd; // transferFrom(address,address,uint256)\n\n    function returnDataToString(bytes memory data) internal pure returns (string memory) {\n        if (data.length >= 64) {\n            return abi.decode(data, (string));\n        } else if (data.length == 32) {\n            uint8 i = 0;\n            while (i < 32 && data[i] != 0) {\n                i++;\n            }\n            bytes memory bytesArray = new bytes(i);\n            for (i = 0; i < 32 && data[i] != 0; i++) {\n                bytesArray[i] = data[i];\n            }\n            return string(bytesArray);\n        } else {\n            return \"???\";\n        }\n    }\n\n    /// @notice Provides a safe ERC20.symbol version which returns '???' as fallback string.\n    /// @param token The address of the ERC-20 token contract.\n    /// @return (string) Token symbol.\n    function safeSymbol(IERC20 token) internal view returns (string memory) {\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_SYMBOL));\n        return success ? returnDataToString(data) : \"???\";\n    }\n\n    /// @notice Provides a safe ERC20.name version which returns '???' as fallback string.\n    /// @param token The address of the ERC-20 token contract.\n    /// @return (string) Token name.\n    function safeName(IERC20 token) internal view returns (string memory) {\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_NAME));\n        return success ? returnDataToString(data) : \"???\";\n    }\n\n    /// @notice Provides a safe ERC20.decimals version which returns '18' as fallback value.\n    /// @param token The address of the ERC-20 token contract.\n    /// @return (uint8) Token decimals.\n    function safeDecimals(IERC20 token) internal view returns (uint8) {\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_DECIMALS));\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\n    }\n\n    /// @notice Provides a gas-optimized balance check to avoid a redundant extcodesize check in addition to the returndatasize check.\n    /// @param token The address of the ERC-20 token.\n    /// @param to The address of the user to check.\n    /// @return amount The token amount.\n    function safeBalanceOf(IERC20 token, address to) internal view returns (uint256 amount) {\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_BALANCE_OF, to));\n        require(success && data.length >= 32, \"BoringERC20: BalanceOf failed\");\n        amount = abi.decode(data, (uint256));\n    }\n\n    /// @notice Provides a gas-optimized totalSupply to avoid a redundant extcodesize check in addition to the returndatasize check.\n    /// @param token The address of the ERC-20 token.\n    /// @return totalSupply The token totalSupply.\n    function safeTotalSupply(IERC20 token) internal view returns (uint256 totalSupply) {\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_TOTALSUPPLY));\n        require(success && data.length >= 32, \"BoringERC20: totalSupply failed\");\n        totalSupply = abi.decode(data, (uint256));\n    }\n\n    /// @notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\n    /// Reverts on a failed transfer.\n    /// @param token The address of the ERC-20 token.\n    /// @param to Transfer tokens to.\n    /// @param amount The token amount.\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 amount\n    ) internal {\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER, to, amount));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"BoringERC20: Transfer failed\");\n    }\n\n    /// @notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\n    /// Reverts on a failed transfer.\n    /// @param token The address of the ERC-20 token.\n    /// @param from Transfer tokens from.\n    /// @param to Transfer tokens to.\n    /// @param amount The token amount.\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 amount\n    ) internal {\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"BoringERC20: TransferFrom failed\");\n    }\n}\n"
      },
      "lib/solady/src/utils/LibClone.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/// @notice Minimal proxy library.\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/LibClone.sol)\n/// @author Minimal proxy by 0age (https://github.com/0age)\n/// @author Clones with immutable args by wighawag, zefram.eth, Saw-mon & Natalie\n/// (https://github.com/Saw-mon-and-Natalie/clones-with-immutable-args)\n/// @author Minimal ERC1967 proxy by jtriley-eth (https://github.com/jtriley-eth/minimum-viable-proxy)\n///\n/// @dev Minimal proxy:\n/// Although the sw0nt pattern saves 5 gas over the ERC1167 pattern during runtime,\n/// it is not supported out-of-the-box on Etherscan. Hence, we choose to use the 0age pattern,\n/// which saves 4 gas over the ERC1167 pattern during runtime, and has the smallest bytecode.\n/// - Automatically verified on Etherscan.\n///\n/// @dev Minimal proxy (PUSH0 variant):\n/// This is a new minimal proxy that uses the PUSH0 opcode introduced during Shanghai.\n/// It is optimized first for minimal runtime gas, then for minimal bytecode.\n/// The PUSH0 clone functions are intentionally postfixed with a jarring \"_PUSH0\" as\n/// many EVM chains may not support the PUSH0 opcode in the early months after Shanghai.\n/// Please use with caution.\n/// - Automatically verified on Etherscan.\n///\n/// @dev Clones with immutable args (CWIA):\n/// The implementation of CWIA here is does NOT append the immutable args into the calldata\n/// passed into delegatecall. It is simply an ERC1167 minimal proxy with the immutable arguments\n/// appended to the back of the runtime bytecode.\n/// - Uses the identity precompile (0x4) to copy args during deployment.\n///\n/// @dev Minimal ERC1967 proxy:\n/// An minimal ERC1967 proxy, intended to be upgraded with UUPS.\n/// This is NOT the same as ERC1967Factory's transparent proxy, which includes admin logic.\n/// - Automatically verified on Etherscan.\n///\n/// @dev Minimal ERC1967 proxy with immutable args:\n/// - Uses the identity precompile (0x4) to copy args during deployment.\n/// - Automatically verified on Etherscan.\n///\n/// @dev ERC1967I proxy:\n/// An variant of the minimal ERC1967 proxy, with a special code path that activates\n/// if `calldatasize() == 1`. This code path skips the delegatecall and directly returns the\n/// `implementation` address. The returned implementation is guaranteed to be valid if the\n/// keccak256 of the proxy's code is equal to `ERC1967I_CODE_HASH`.\n///\n/// @dev Minimal Beacon proxy:\n/// A minimal beacon proxy, intended to be upgraded with an upgradable beacon.\n/// - Automatically verified on Etherscan.\nlibrary LibClone {\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                         CONSTANTS                          */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev The keccak256 of the deployed code for the ERC1967 proxy.\n    bytes32 internal constant ERC1967_CODE_HASH =\n        0xaaa52c8cc8a0e3fd27ce756cc6b4e70c51423e9b597b11f32d3e49f8b1fc890d;\n\n    /// @dev The keccak256 of the deployed code for the ERC1967I proxy.\n    bytes32 internal constant ERC1967I_CODE_HASH =\n        0xce700223c0d4cea4583409accfc45adac4a093b3519998a9cbbe1504dadba6f7;\n\n    /// @dev The keccak256 of the deployed code for the ERC1967 beacon proxy.\n    bytes32 internal constant ERC1967_BEACON_PROXY_CODE_HASH =\n        0x14044459af17bc4f0f5aa2f658cb692add77d1302c29fe2aebab005eea9d1162;\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                       CUSTOM ERRORS                        */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Unable to deploy the clone.\n    error DeploymentFailed();\n\n    /// @dev The salt must start with either the zero address or `by`.\n    error SaltDoesNotStartWith();\n\n    /// @dev The ETH transfer has failed.\n    error ETHTransferFailed();\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                  MINIMAL PROXY OPERATIONS                  */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Deploys a clone of `implementation`.\n    function clone(address implementation) internal returns (address instance) {\n        instance = clone(0, implementation);\n    }\n\n    /// @dev Deploys a clone of `implementation`.\n    /// Deposits `value` ETH during deployment.\n    function clone(uint256 value, address implementation) internal returns (address instance) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            /**\n             * --------------------------------------------------------------------------+\n             * CREATION (9 bytes)                                                        |\n             * --------------------------------------------------------------------------|\n             * Opcode     | Mnemonic          | Stack     | Memory                       |\n             * --------------------------------------------------------------------------|\n             * 60 runSize | PUSH1 runSize     | r         |                              |\n             * 3d         | RETURNDATASIZE    | 0 r       |                              |\n             * 81         | DUP2              | r 0 r     |                              |\n             * 60 offset  | PUSH1 offset      | o r 0 r   |                              |\n             * 3d         | RETURNDATASIZE    | 0 o r 0 r |                              |\n             * 39         | CODECOPY          | 0 r       | [0..runSize): runtime code   |\n             * f3         | RETURN            |           | [0..runSize): runtime code   |\n             * --------------------------------------------------------------------------|\n             * RUNTIME (44 bytes)                                                        |\n             * --------------------------------------------------------------------------|\n             * Opcode  | Mnemonic       | Stack                  | Memory                |\n             * --------------------------------------------------------------------------|\n             *                                                                           |\n             * ::: keep some values in stack ::::::::::::::::::::::::::::::::::::::::::: |\n             * 3d      | RETURNDATASIZE | 0                      |                       |\n             * 3d      | RETURNDATASIZE | 0 0                    |                       |\n             * 3d      | RETURNDATASIZE | 0 0 0                  |                       |\n             * 3d      | RETURNDATASIZE | 0 0 0 0                |                       |\n             *                                                                           |\n             * ::: copy calldata to memory ::::::::::::::::::::::::::::::::::::::::::::: |\n             * 36      | CALLDATASIZE   | cds 0 0 0 0            |                       |\n             * 3d      | RETURNDATASIZE | 0 cds 0 0 0 0          |                       |\n             * 3d      | RETURNDATASIZE | 0 0 cds 0 0 0 0        |                       |\n             * 37      | CALLDATACOPY   | 0 0 0 0                | [0..cds): calldata    |\n             *                                                                           |\n             * ::: delegate call to the implementation contract :::::::::::::::::::::::: |\n             * 36      | CALLDATASIZE   | cds 0 0 0 0            | [0..cds): calldata    |\n             * 3d      | RETURNDATASIZE | 0 cds 0 0 0 0          | [0..cds): calldata    |\n             * 73 addr | PUSH20 addr    | addr 0 cds 0 0 0 0     | [0..cds): calldata    |\n             * 5a      | GAS            | gas addr 0 cds 0 0 0 0 | [0..cds): calldata    |\n             * f4      | DELEGATECALL   | success 0 0            | [0..cds): calldata    |\n             *                                                                           |\n             * ::: copy return data to memory :::::::::::::::::::::::::::::::::::::::::: |\n             * 3d      | RETURNDATASIZE | rds success 0 0        | [0..cds): calldata    |\n             * 3d      | RETURNDATASIZE | rds rds success 0 0    | [0..cds): calldata    |\n             * 93      | SWAP4          | 0 rds success 0 rds    | [0..cds): calldata    |\n             * 80      | DUP1           | 0 0 rds success 0 rds  | [0..cds): calldata    |\n             * 3e      | RETURNDATACOPY | success 0 rds          | [0..rds): returndata  |\n             *                                                                           |\n             * 60 0x2a | PUSH1 0x2a     | 0x2a success 0 rds     | [0..rds): returndata  |\n             * 57      | JUMPI          | 0 rds                  | [0..rds): returndata  |\n             *                                                                           |\n             * ::: revert :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: |\n             * fd      | REVERT         |                        | [0..rds): returndata  |\n             *                                                                           |\n             * ::: return :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: |\n             * 5b      | JUMPDEST       | 0 rds                  | [0..rds): returndata  |\n             * f3      | RETURN         |                        | [0..rds): returndata  |\n             * --------------------------------------------------------------------------+\n             */\n            mstore(0x21, 0x5af43d3d93803e602a57fd5bf3)\n            mstore(0x14, implementation)\n            mstore(0x00, 0x602c3d8160093d39f33d3d3d3d363d3d37363d73)\n            instance := create(value, 0x0c, 0x35)\n            if iszero(instance) {\n                mstore(0x00, 0x30116425) // `DeploymentFailed()`.\n                revert(0x1c, 0x04)\n            }\n            mstore(0x21, 0) // Restore the overwritten part of the free memory pointer.\n        }\n    }\n\n    /// @dev Deploys a deterministic clone of `implementation` with `salt`.\n    function cloneDeterministic(address implementation, bytes32 salt)\n        internal\n        returns (address instance)\n    {\n        instance = cloneDeterministic(0, implementation, salt);\n    }\n\n    /// @dev Deploys a deterministic clone of `implementation` with `salt`.\n    /// Deposits `value` ETH during deployment.\n    function cloneDeterministic(uint256 value, address implementation, bytes32 salt)\n        internal\n        returns (address instance)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x21, 0x5af43d3d93803e602a57fd5bf3)\n            mstore(0x14, implementation)\n            mstore(0x00, 0x602c3d8160093d39f33d3d3d3d363d3d37363d73)\n            instance := create2(value, 0x0c, 0x35, salt)\n            if iszero(instance) {\n                mstore(0x00, 0x30116425) // `DeploymentFailed()`.\n                revert(0x1c, 0x04)\n            }\n            mstore(0x21, 0) // Restore the overwritten part of the free memory pointer.\n        }\n    }\n\n    /// @dev Returns the initialization code of the clone of `implementation`.\n    function initCode(address implementation) internal pure returns (bytes memory c) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            c := mload(0x40)\n            mstore(add(c, 0x40), 0x5af43d3d93803e602a57fd5bf30000000000000000000000)\n            mstore(add(c, 0x28), implementation)\n            mstore(add(c, 0x14), 0x602c3d8160093d39f33d3d3d3d363d3d37363d73)\n            mstore(c, 0x35) // Store the length.\n            mstore(0x40, add(c, 0x60)) // Allocate memory.\n        }\n    }\n\n    /// @dev Returns the initialization code hash of the clone of `implementation`.\n    /// Used for mining vanity addresses with create2crunch.\n    function initCodeHash(address implementation) internal pure returns (bytes32 hash) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x21, 0x5af43d3d93803e602a57fd5bf3)\n            mstore(0x14, implementation)\n            mstore(0x00, 0x602c3d8160093d39f33d3d3d3d363d3d37363d73)\n            hash := keccak256(0x0c, 0x35)\n            mstore(0x21, 0) // Restore the overwritten part of the free memory pointer.\n        }\n    }\n\n    /// @dev Returns the address of the deterministic clone of `implementation`,\n    /// with `salt` by `deployer`.\n    /// Note: The returned result has dirty upper 96 bits. Please clean if used in assembly.\n    function predictDeterministicAddress(address implementation, bytes32 salt, address deployer)\n        internal\n        pure\n        returns (address predicted)\n    {\n        bytes32 hash = initCodeHash(implementation);\n        predicted = predictDeterministicAddress(hash, salt, deployer);\n    }\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*          MINIMAL PROXY OPERATIONS (PUSH0 VARIANT)          */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Deploys a PUSH0 clone of `implementation`.\n    function clone_PUSH0(address implementation) internal returns (address instance) {\n        instance = clone_PUSH0(0, implementation);\n    }\n\n    /// @dev Deploys a PUSH0 clone of `implementation`.\n    /// Deposits `value` ETH during deployment.\n    function clone_PUSH0(uint256 value, address implementation)\n        internal\n        returns (address instance)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            /**\n             * --------------------------------------------------------------------------+\n             * CREATION (9 bytes)                                                        |\n             * --------------------------------------------------------------------------|\n             * Opcode     | Mnemonic          | Stack     | Memory                       |\n             * --------------------------------------------------------------------------|\n             * 60 runSize | PUSH1 runSize     | r         |                              |\n             * 5f         | PUSH0             | 0 r       |                              |\n             * 81         | DUP2              | r 0 r     |                              |\n             * 60 offset  | PUSH1 offset      | o r 0 r   |                              |\n             * 5f         | PUSH0             | 0 o r 0 r |                              |\n             * 39         | CODECOPY          | 0 r       | [0..runSize): runtime code   |\n             * f3         | RETURN            |           | [0..runSize): runtime code   |\n             * --------------------------------------------------------------------------|\n             * RUNTIME (45 bytes)                                                        |\n             * --------------------------------------------------------------------------|\n             * Opcode  | Mnemonic       | Stack                  | Memory                |\n             * --------------------------------------------------------------------------|\n             *                                                                           |\n             * ::: keep some values in stack ::::::::::::::::::::::::::::::::::::::::::: |\n             * 5f      | PUSH0          | 0                      |                       |\n             * 5f      | PUSH0          | 0 0                    |                       |\n             *                                                                           |\n             * ::: copy calldata to memory ::::::::::::::::::::::::::::::::::::::::::::: |\n             * 36      | CALLDATASIZE   | cds 0 0                |                       |\n             * 5f      | PUSH0          | 0 cds 0 0              |                       |\n             * 5f      | PUSH0          | 0 0 cds 0 0            |                       |\n             * 37      | CALLDATACOPY   | 0 0                    | [0..cds): calldata    |\n             *                                                                           |\n             * ::: delegate call to the implementation contract :::::::::::::::::::::::: |\n             * 36      | CALLDATASIZE   | cds 0 0                | [0..cds): calldata    |\n             * 5f      | PUSH0          | 0 cds 0 0              | [0..cds): calldata    |\n             * 73 addr | PUSH20 addr    | addr 0 cds 0 0         | [0..cds): calldata    |\n             * 5a      | GAS            | gas addr 0 cds 0 0     | [0..cds): calldata    |\n             * f4      | DELEGATECALL   | success                | [0..cds): calldata    |\n             *                                                                           |\n             * ::: copy return data to memory :::::::::::::::::::::::::::::::::::::::::: |\n             * 3d      | RETURNDATASIZE | rds success            | [0..cds): calldata    |\n             * 5f      | PUSH0          | 0 rds success          | [0..cds): calldata    |\n             * 5f      | PUSH0          | 0 0 rds success        | [0..cds): calldata    |\n             * 3e      | RETURNDATACOPY | success                | [0..rds): returndata  |\n             *                                                                           |\n             * 60 0x29 | PUSH1 0x29     | 0x29 success           | [0..rds): returndata  |\n             * 57      | JUMPI          |                        | [0..rds): returndata  |\n             *                                                                           |\n             * ::: revert :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: |\n             * 3d      | RETURNDATASIZE | rds                    | [0..rds): returndata  |\n             * 5f      | PUSH0          | 0 rds                  | [0..rds): returndata  |\n             * fd      | REVERT         |                        | [0..rds): returndata  |\n             *                                                                           |\n             * ::: return :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: |\n             * 5b      | JUMPDEST       |                        | [0..rds): returndata  |\n             * 3d      | RETURNDATASIZE | rds                    | [0..rds): returndata  |\n             * 5f      | PUSH0          | 0 rds                  | [0..rds): returndata  |\n             * f3      | RETURN         |                        | [0..rds): returndata  |\n             * --------------------------------------------------------------------------+\n             */\n            mstore(0x24, 0x5af43d5f5f3e6029573d5ffd5b3d5ff3) // 16\n            mstore(0x14, implementation) // 20\n            mstore(0x00, 0x602d5f8160095f39f35f5f365f5f37365f73) // 9 + 9\n            instance := create(value, 0x0e, 0x36)\n            if iszero(instance) {\n                mstore(0x00, 0x30116425) // `DeploymentFailed()`.\n                revert(0x1c, 0x04)\n            }\n            mstore(0x24, 0) // Restore the overwritten part of the free memory pointer.\n        }\n    }\n\n    /// @dev Deploys a deterministic PUSH0 clone of `implementation` with `salt`.\n    function cloneDeterministic_PUSH0(address implementation, bytes32 salt)\n        internal\n        returns (address instance)\n    {\n        instance = cloneDeterministic_PUSH0(0, implementation, salt);\n    }\n\n    /// @dev Deploys a deterministic PUSH0 clone of `implementation` with `salt`.\n    /// Deposits `value` ETH during deployment.\n    function cloneDeterministic_PUSH0(uint256 value, address implementation, bytes32 salt)\n        internal\n        returns (address instance)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x24, 0x5af43d5f5f3e6029573d5ffd5b3d5ff3) // 16\n            mstore(0x14, implementation) // 20\n            mstore(0x00, 0x602d5f8160095f39f35f5f365f5f37365f73) // 9 + 9\n            instance := create2(value, 0x0e, 0x36, salt)\n            if iszero(instance) {\n                mstore(0x00, 0x30116425) // `DeploymentFailed()`.\n                revert(0x1c, 0x04)\n            }\n            mstore(0x24, 0) // Restore the overwritten part of the free memory pointer.\n        }\n    }\n\n    /// @dev Returns the initialization code of the PUSH0 clone of `implementation`.\n    function initCode_PUSH0(address implementation) internal pure returns (bytes memory c) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            c := mload(0x40)\n            mstore(add(c, 0x40), 0x5af43d5f5f3e6029573d5ffd5b3d5ff300000000000000000000) // 16\n            mstore(add(c, 0x26), implementation) // 20\n            mstore(add(c, 0x12), 0x602d5f8160095f39f35f5f365f5f37365f73) // 9 + 9\n            mstore(c, 0x36) // Store the length.\n            mstore(0x40, add(c, 0x60)) // Allocate memory.\n        }\n    }\n\n    /// @dev Returns the initialization code hash of the PUSH0 clone of `implementation`.\n    /// Used for mining vanity addresses with create2crunch.\n    function initCodeHash_PUSH0(address implementation) internal pure returns (bytes32 hash) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x24, 0x5af43d5f5f3e6029573d5ffd5b3d5ff3) // 16\n            mstore(0x14, implementation) // 20\n            mstore(0x00, 0x602d5f8160095f39f35f5f365f5f37365f73) // 9 + 9\n            hash := keccak256(0x0e, 0x36)\n            mstore(0x24, 0) // Restore the overwritten part of the free memory pointer.\n        }\n    }\n\n    /// @dev Returns the address of the deterministic PUSH0 clone of `implementation`,\n    /// with `salt` by `deployer`.\n    /// Note: The returned result has dirty upper 96 bits. Please clean if used in assembly.\n    function predictDeterministicAddress_PUSH0(\n        address implementation,\n        bytes32 salt,\n        address deployer\n    ) internal pure returns (address predicted) {\n        bytes32 hash = initCodeHash_PUSH0(implementation);\n        predicted = predictDeterministicAddress(hash, salt, deployer);\n    }\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*           CLONES WITH IMMUTABLE ARGS OPERATIONS            */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Deploys a clone of `implementation` with immutable arguments encoded in `args`.\n    function clone(address implementation, bytes memory args) internal returns (address instance) {\n        instance = clone(0, implementation, args);\n    }\n\n    /// @dev Deploys a clone of `implementation` with immutable arguments encoded in `args`.\n    /// Deposits `value` ETH during deployment.\n    function clone(uint256 value, address implementation, bytes memory args)\n        internal\n        returns (address instance)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            /**\n             * ---------------------------------------------------------------------------+\n             * CREATION (10 bytes)                                                        |\n             * ---------------------------------------------------------------------------|\n             * Opcode     | Mnemonic          | Stack     | Memory                        |\n             * ---------------------------------------------------------------------------|\n             * 61 runSize | PUSH2 runSize     | r         |                               |\n             * 3d         | RETURNDATASIZE    | 0 r       |                               |\n             * 81         | DUP2              | r 0 r     |                               |\n             * 60 offset  | PUSH1 offset      | o r 0 r   |                               |\n             * 3d         | RETURNDATASIZE    | 0 o r 0 r |                               |\n             * 39         | CODECOPY          | 0 r       | [0..runSize): runtime code    |\n             * f3         | RETURN            |           | [0..runSize): runtime code    |\n             * ---------------------------------------------------------------------------|\n             * RUNTIME (45 bytes + extraLength)                                           |\n             * ---------------------------------------------------------------------------|\n             * Opcode   | Mnemonic       | Stack                  | Memory                |\n             * ---------------------------------------------------------------------------|\n             *                                                                            |\n             * ::: copy calldata to memory :::::::::::::::::::::::::::::::::::::::::::::: |\n             * 36       | CALLDATASIZE   | cds                    |                       |\n             * 3d       | RETURNDATASIZE | 0 cds                  |                       |\n             * 3d       | RETURNDATASIZE | 0 0 cds                |                       |\n             * 37       | CALLDATACOPY   |                        | [0..cds): calldata    |\n             *                                                                            |\n             * ::: delegate call to the implementation contract ::::::::::::::::::::::::: |\n             * 3d       | RETURNDATASIZE | 0                      | [0..cds): calldata    |\n             * 3d       | RETURNDATASIZE | 0 0                    | [0..cds): calldata    |\n             * 3d       | RETURNDATASIZE | 0 0 0                  | [0..cds): calldata    |\n             * 36       | CALLDATASIZE   | cds 0 0 0              | [0..cds): calldata    |\n             * 3d       | RETURNDATASIZE | 0 cds 0 0 0 0          | [0..cds): calldata    |\n             * 73 addr  | PUSH20 addr    | addr 0 cds 0 0 0 0     | [0..cds): calldata    |\n             * 5a       | GAS            | gas addr 0 cds 0 0 0 0 | [0..cds): calldata    |\n             * f4       | DELEGATECALL   | success 0 0            | [0..cds): calldata    |\n             *                                                                            |\n             * ::: copy return data to memory ::::::::::::::::::::::::::::::::::::::::::: |\n             * 3d       | RETURNDATASIZE | rds success 0          | [0..cds): calldata    |\n             * 82       | DUP3           | 0 rds success 0         | [0..cds): calldata   |\n             * 80       | DUP1           | 0 0 rds success 0      | [0..cds): calldata    |\n             * 3e       | RETURNDATACOPY | success 0              | [0..rds): returndata  |\n             * 90       | SWAP1          | 0 success              | [0..rds): returndata  |\n             * 3d       | RETURNDATASIZE | rds 0 success          | [0..rds): returndata  |\n             * 91       | SWAP2          | success 0 rds          | [0..rds): returndata  |\n             *                                                                            |\n             * 60 0x2b  | PUSH1 0x2b     | 0x2b success 0 rds     | [0..rds): returndata  |\n             * 57       | JUMPI          | 0 rds                  | [0..rds): returndata  |\n             *                                                                            |\n             * ::: revert ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: |\n             * fd       | REVERT         |                        | [0..rds): returndata  |\n             *                                                                            |\n             * ::: return ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: |\n             * 5b       | JUMPDEST       | 0 rds                  | [0..rds): returndata  |\n             * f3       | RETURN         |                        | [0..rds): returndata  |\n             * ---------------------------------------------------------------------------+\n             */\n            let m := mload(0x40)\n            let n := mload(args)\n            pop(staticcall(gas(), 4, add(args, 0x20), n, add(m, 0x43), n))\n            mstore(add(m, 0x23), 0x5af43d82803e903d91602b57fd5bf3)\n            mstore(add(m, 0x14), implementation)\n            mstore(m, add(0xfe61002d3d81600a3d39f3363d3d373d3d3d363d73, shl(0x88, n)))\n            // Do a out-of-gas revert if `n` is too big. 0xffff - 0x2d = 0xffd2.\n            // The actual EVM limit may be smaller and may change over time.\n            instance := create(value, add(m, add(0x0b, lt(n, 0xffd3))), add(n, 0x37))\n            if iszero(instance) {\n                mstore(0x00, 0x30116425) // `DeploymentFailed()`.\n                revert(0x1c, 0x04)\n            }\n        }\n    }\n\n    /// @dev Deploys a deterministic clone of `implementation`\n    /// with immutable arguments encoded in `args` and `salt`.\n    function cloneDeterministic(address implementation, bytes memory args, bytes32 salt)\n        internal\n        returns (address instance)\n    {\n        instance = cloneDeterministic(0, implementation, args, salt);\n    }\n\n    /// @dev Deploys a deterministic clone of `implementation`\n    /// with immutable arguments encoded in `args` and `salt`.\n    function cloneDeterministic(\n        uint256 value,\n        address implementation,\n        bytes memory args,\n        bytes32 salt\n    ) internal returns (address instance) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let m := mload(0x40)\n            let n := mload(args)\n            pop(staticcall(gas(), 4, add(args, 0x20), n, add(m, 0x43), n))\n            mstore(add(m, 0x23), 0x5af43d82803e903d91602b57fd5bf3)\n            mstore(add(m, 0x14), implementation)\n            mstore(m, add(0xfe61002d3d81600a3d39f3363d3d373d3d3d363d73, shl(0x88, n)))\n            // Do a out-of-gas revert if `n` is too big. 0xffff - 0x2d = 0xffd2.\n            // The actual EVM limit may be smaller and may change over time.\n            instance := create2(value, add(m, add(0x0b, lt(n, 0xffd3))), add(n, 0x37), salt)\n            if iszero(instance) {\n                mstore(0x00, 0x30116425) // `DeploymentFailed()`.\n                revert(0x1c, 0x04)\n            }\n        }\n    }\n\n    /// @dev Returns the initialization code hash of the clone of `implementation`\n    /// using immutable arguments encoded in `args`.\n    function initCode(address implementation, bytes memory args)\n        internal\n        pure\n        returns (bytes memory c)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            c := mload(0x40)\n            let n := mload(args)\n            // Do a out-of-gas revert if `n` is too big. 0xffff - 0x2d = 0xffd2.\n            // The actual EVM limit may be smaller and may change over time.\n            returndatacopy(returndatasize(), returndatasize(), gt(n, 0xffd2))\n            for { let i := 0 } lt(i, n) { i := add(i, 0x20) } {\n                mstore(add(add(c, 0x57), i), mload(add(add(args, 0x20), i)))\n            }\n            mstore(add(c, 0x37), 0x5af43d82803e903d91602b57fd5bf3)\n            mstore(add(c, 0x28), implementation)\n            mstore(add(c, 0x14), add(0x61002d3d81600a3d39f3363d3d373d3d3d363d73, shl(0x88, n)))\n            mstore(c, add(0x37, n)) // Store the length.\n            mstore(add(c, add(n, 0x57)), 0) // Zeroize the slot after the bytes.\n            mstore(0x40, add(c, add(n, 0x77))) // Allocate memory.\n        }\n    }\n\n    /// @dev Returns the initialization code hash of the clone of `implementation`\n    /// using immutable arguments encoded in `args`.\n    /// Used for mining vanity addresses with create2crunch.\n    function initCodeHash(address implementation, bytes memory args)\n        internal\n        pure\n        returns (bytes32 hash)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let m := mload(0x40)\n            let n := mload(args)\n            // Do a out-of-gas revert if `n` is too big. 0xffff - 0x2d = 0xffd2.\n            // The actual EVM limit may be smaller and may change over time.\n            returndatacopy(returndatasize(), returndatasize(), gt(n, 0xffd2))\n            for { let i := 0 } lt(i, n) { i := add(i, 0x20) } {\n                mstore(add(add(m, 0x43), i), mload(add(add(args, 0x20), i)))\n            }\n            mstore(add(m, 0x23), 0x5af43d82803e903d91602b57fd5bf3)\n            mstore(add(m, 0x14), implementation)\n            mstore(m, add(0x61002d3d81600a3d39f3363d3d373d3d3d363d73, shl(0x88, n)))\n            hash := keccak256(add(m, 0x0c), add(n, 0x37))\n        }\n    }\n\n    /// @dev Returns the address of the deterministic clone of\n    /// `implementation` using immutable arguments encoded in `args`, with `salt`, by `deployer`.\n    /// Note: The returned result has dirty upper 96 bits. Please clean if used in assembly.\n    function predictDeterministicAddress(\n        address implementation,\n        bytes memory data,\n        bytes32 salt,\n        address deployer\n    ) internal pure returns (address predicted) {\n        bytes32 hash = initCodeHash(implementation, data);\n        predicted = predictDeterministicAddress(hash, salt, deployer);\n    }\n\n    /// @dev Equivalent to `argsOnClone(instance, 0, 2 ** 256 - 1)`.\n    function argsOnClone(address instance) internal view returns (bytes memory args) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            args := mload(0x40)\n            let l := extcodesize(instance)\n            mstore(args, sub(l, 0x2d)) // Store the length.\n            extcodecopy(instance, add(args, 0x20), 0x2d, l)\n            mstore(0x40, add(add(args, 0x40), l)) // Allocate memory.\n        }\n    }\n\n    /// @dev Equivalent to `argsOnClone(instance, start, 2 ** 256 - 1)`.\n    function argsOnClone(address instance, uint256 start)\n        internal\n        view\n        returns (bytes memory args)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            args := mload(0x40)\n            let n := sub(extcodesize(instance), 0x2d)\n            n := mul(sub(n, start), lt(start, n))\n            extcodecopy(instance, args, add(start, 0x0d), add(0x40, n))\n            mstore(args, n) // Store the length.\n            mstore(0x40, add(args, add(0x40, n))) // Allocate memory.\n        }\n    }\n\n    /// @dev Returns the a slice of the immutable arguments on `instance` from `start` to `end`.\n    /// `start` and `end` will be clamped to the range `[0, args.length]`.\n    /// The `instance` MUST be deployed via the clone with immutable args functions in this library.\n    /// Otherwise, the behavior is undefined.\n    function argsOnClone(address instance, uint256 start, uint256 end)\n        internal\n        view\n        returns (bytes memory args)\n    {\n        if (end < start) return args;\n        /// @solidity memory-safe-assembly\n        assembly {\n            args := mload(0x40)\n            let d := and(0xffff, sub(end, start))\n            extcodecopy(instance, add(args, 0x20), add(start, 0x2d), d)\n            if iszero(and(0xff, mload(add(args, d)))) {\n                let n := sub(extcodesize(instance), 0x2d)\n                d := mul(gt(n, start), sub(d, mul(gt(end, n), sub(end, n))))\n            }\n            mstore(args, d) // Store the length.\n            mstore(add(add(args, 0x20), d), 0) // Zeroize the slot after the bytes.\n            mstore(0x40, add(add(args, 0x40), d)) // Allocate memory.\n        }\n    }\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*              MINIMAL ERC1967 PROXY OPERATIONS              */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    // Note: The ERC1967 proxy here is intended to be upgraded with UUPS.\n    // This is NOT the same as ERC1967Factory's transparent proxy, which includes admin logic.\n\n    /// @dev Deploys a minimal ERC1967 proxy with `implementation`.\n    function deployERC1967(address implementation) internal returns (address instance) {\n        instance = deployERC1967(0, implementation);\n    }\n\n    /// @dev Deploys a minimal ERC1967 proxy with `implementation`.\n    /// Deposits `value` ETH during deployment.\n    function deployERC1967(uint256 value, address implementation)\n        internal\n        returns (address instance)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            /**\n             * ---------------------------------------------------------------------------------+\n             * CREATION (34 bytes)                                                              |\n             * ---------------------------------------------------------------------------------|\n             * Opcode     | Mnemonic       | Stack            | Memory                          |\n             * ---------------------------------------------------------------------------------|\n             * 60 runSize | PUSH1 runSize  | r                |                                 |\n             * 3d         | RETURNDATASIZE | 0 r              |                                 |\n             * 81         | DUP2           | r 0 r            |                                 |\n             * 60 offset  | PUSH1 offset   | o r 0 r          |                                 |\n             * 3d         | RETURNDATASIZE | 0 o r 0 r        |                                 |\n             * 39         | CODECOPY       | 0 r              | [0..runSize): runtime code      |\n             * 73 impl    | PUSH20 impl    | impl 0 r         | [0..runSize): runtime code      |\n             * 60 slotPos | PUSH1 slotPos  | slotPos impl 0 r | [0..runSize): runtime code      |\n             * 51         | MLOAD          | slot impl 0 r    | [0..runSize): runtime code      |\n             * 55         | SSTORE         | 0 r              | [0..runSize): runtime code      |\n             * f3         | RETURN         |                  | [0..runSize): runtime code      |\n             * ---------------------------------------------------------------------------------|\n             * RUNTIME (61 bytes)                                                               |\n             * ---------------------------------------------------------------------------------|\n             * Opcode     | Mnemonic       | Stack            | Memory                          |\n             * ---------------------------------------------------------------------------------|\n             *                                                                                  |\n             * ::: copy calldata to memory :::::::::::::::::::::::::::::::::::::::::::::::::::: |\n             * 36         | CALLDATASIZE   | cds              |                                 |\n             * 3d         | RETURNDATASIZE | 0 cds            |                                 |\n             * 3d         | RETURNDATASIZE | 0 0 cds          |                                 |\n             * 37         | CALLDATACOPY   |                  | [0..calldatasize): calldata     |\n             *                                                                                  |\n             * ::: delegatecall to implementation ::::::::::::::::::::::::::::::::::::::::::::: |\n             * 3d         | RETURNDATASIZE | 0                |                                 |\n             * 3d         | RETURNDATASIZE | 0 0              |                                 |\n             * 36         | CALLDATASIZE   | cds 0 0          | [0..calldatasize): calldata     |\n             * 3d         | RETURNDATASIZE | 0 cds 0 0        | [0..calldatasize): calldata     |\n             * 7f slot    | PUSH32 slot    | s 0 cds 0 0      | [0..calldatasize): calldata     |\n             * 54         | SLOAD          | i 0 cds 0 0      | [0..calldatasize): calldata     |\n             * 5a         | GAS            | g i 0 cds 0 0    | [0..calldatasize): calldata     |\n             * f4         | DELEGATECALL   | succ             | [0..calldatasize): calldata     |\n             *                                                                                  |\n             * ::: copy returndata to memory :::::::::::::::::::::::::::::::::::::::::::::::::: |\n             * 3d         | RETURNDATASIZE | rds succ         | [0..calldatasize): calldata     |\n             * 60 0x00    | PUSH1 0x00     | 0 rds succ       | [0..calldatasize): calldata     |\n             * 80         | DUP1           | 0 0 rds succ     | [0..calldatasize): calldata     |\n             * 3e         | RETURNDATACOPY | succ             | [0..returndatasize): returndata |\n             *                                                                                  |\n             * ::: branch on delegatecall status :::::::::::::::::::::::::::::::::::::::::::::: |\n             * 60 0x38    | PUSH1 0x38     | dest succ        | [0..returndatasize): returndata |\n             * 57         | JUMPI          |                  | [0..returndatasize): returndata |\n             *                                                                                  |\n             * ::: delegatecall failed, revert :::::::::::::::::::::::::::::::::::::::::::::::: |\n             * 3d         | RETURNDATASIZE | rds              | [0..returndatasize): returndata |\n             * 60 0x00    | PUSH1 0x00     | 0 rds            | [0..returndatasize): returndata |\n             * fd         | REVERT         |                  | [0..returndatasize): returndata |\n             *                                                                                  |\n             * ::: delegatecall succeeded, return ::::::::::::::::::::::::::::::::::::::::::::: |\n             * 5b         | JUMPDEST       |                  | [0..returndatasize): returndata |\n             * 3d         | RETURNDATASIZE | rds              | [0..returndatasize): returndata |\n             * 60 0x00    | PUSH1 0x00     | 0 rds            | [0..returndatasize): returndata |\n             * f3         | RETURN         |                  | [0..returndatasize): returndata |\n             * ---------------------------------------------------------------------------------+\n             */\n            let m := mload(0x40) // Cache the free memory pointer.\n            mstore(0x60, 0xcc3735a920a3ca505d382bbc545af43d6000803e6038573d6000fd5b3d6000f3)\n            mstore(0x40, 0x5155f3363d3d373d3d363d7f360894a13ba1a3210667c828492db98dca3e2076)\n            mstore(0x20, 0x6009)\n            mstore(0x1e, implementation)\n            mstore(0x0a, 0x603d3d8160223d3973)\n            instance := create(value, 0x21, 0x5f)\n            if iszero(instance) {\n                mstore(0x00, 0x30116425) // `DeploymentFailed()`.\n                revert(0x1c, 0x04)\n            }\n            mstore(0x40, m) // Restore the free memory pointer.\n            mstore(0x60, 0) // Restore the zero slot.\n        }\n    }\n\n    /// @dev Deploys a deterministic minimal ERC1967 proxy with `implementation` and `salt`.\n    function deployDeterministicERC1967(address implementation, bytes32 salt)\n        internal\n        returns (address instance)\n    {\n        instance = deployDeterministicERC1967(0, implementation, salt);\n    }\n\n    /// @dev Deploys a deterministic minimal ERC1967 proxy with `implementation` and `salt`.\n    /// Deposits `value` ETH during deployment.\n    function deployDeterministicERC1967(uint256 value, address implementation, bytes32 salt)\n        internal\n        returns (address instance)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let m := mload(0x40) // Cache the free memory pointer.\n            mstore(0x60, 0xcc3735a920a3ca505d382bbc545af43d6000803e6038573d6000fd5b3d6000f3)\n            mstore(0x40, 0x5155f3363d3d373d3d363d7f360894a13ba1a3210667c828492db98dca3e2076)\n            mstore(0x20, 0x6009)\n            mstore(0x1e, implementation)\n            mstore(0x0a, 0x603d3d8160223d3973)\n            instance := create2(value, 0x21, 0x5f, salt)\n            if iszero(instance) {\n                mstore(0x00, 0x30116425) // `DeploymentFailed()`.\n                revert(0x1c, 0x04)\n            }\n            mstore(0x40, m) // Restore the free memory pointer.\n            mstore(0x60, 0) // Restore the zero slot.\n        }\n    }\n\n    /// @dev Creates a deterministic minimal ERC1967 proxy with `implementation` and `salt`.\n    /// Note: This method is intended for use in ERC4337 factories,\n    /// which are expected to NOT revert if the proxy is already deployed.\n    function createDeterministicERC1967(address implementation, bytes32 salt)\n        internal\n        returns (bool alreadyDeployed, address instance)\n    {\n        return createDeterministicERC1967(0, implementation, salt);\n    }\n\n    /// @dev Creates a deterministic minimal ERC1967 proxy with `implementation` and `salt`.\n    /// Deposits `value` ETH during deployment.\n    /// Note: This method is intended for use in ERC4337 factories,\n    /// which are expected to NOT revert if the proxy is already deployed.\n    function createDeterministicERC1967(uint256 value, address implementation, bytes32 salt)\n        internal\n        returns (bool alreadyDeployed, address instance)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let m := mload(0x40) // Cache the free memory pointer.\n            mstore(0x60, 0xcc3735a920a3ca505d382bbc545af43d6000803e6038573d6000fd5b3d6000f3)\n            mstore(0x40, 0x5155f3363d3d373d3d363d7f360894a13ba1a3210667c828492db98dca3e2076)\n            mstore(0x20, 0x6009)\n            mstore(0x1e, implementation)\n            mstore(0x0a, 0x603d3d8160223d3973)\n            // Compute and store the bytecode hash.\n            mstore(add(m, 0x35), keccak256(0x21, 0x5f))\n            mstore(m, shl(88, address()))\n            mstore8(m, 0xff) // Write the prefix.\n            mstore(add(m, 0x15), salt)\n            instance := keccak256(m, 0x55)\n            for {} 1 {} {\n                if iszero(extcodesize(instance)) {\n                    instance := create2(value, 0x21, 0x5f, salt)\n                    if iszero(instance) {\n                        mstore(0x00, 0x30116425) // `DeploymentFailed()`.\n                        revert(0x1c, 0x04)\n                    }\n                    break\n                }\n                alreadyDeployed := 1\n                if iszero(value) { break }\n                if iszero(call(gas(), instance, value, codesize(), 0x00, codesize(), 0x00)) {\n                    mstore(0x00, 0xb12d13eb) // `ETHTransferFailed()`.\n                    revert(0x1c, 0x04)\n                }\n                break\n            }\n            mstore(0x40, m) // Restore the free memory pointer.\n            mstore(0x60, 0) // Restore the zero slot.\n        }\n    }\n\n    /// @dev Returns the initialization code of the minimal ERC1967 proxy of `implementation`.\n    function initCodeERC1967(address implementation) internal pure returns (bytes memory c) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            c := mload(0x40)\n            mstore(add(c, 0x60), 0x3735a920a3ca505d382bbc545af43d6000803e6038573d6000fd5b3d6000f300)\n            mstore(add(c, 0x40), 0x55f3363d3d373d3d363d7f360894a13ba1a3210667c828492db98dca3e2076cc)\n            mstore(add(c, 0x20), or(shl(24, implementation), 0x600951))\n            mstore(add(c, 0x09), 0x603d3d8160223d3973)\n            mstore(c, 0x5f) // Store the length.\n            mstore(0x40, add(c, 0x80)) // Allocate memory.\n        }\n    }\n\n    /// @dev Returns the initialization code hash of the minimal ERC1967 proxy of `implementation`.\n    /// Used for mining vanity addresses with create2crunch.\n    function initCodeHashERC1967(address implementation) internal pure returns (bytes32 hash) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let m := mload(0x40) // Cache the free memory pointer.\n            mstore(0x60, 0xcc3735a920a3ca505d382bbc545af43d6000803e6038573d6000fd5b3d6000f3)\n            mstore(0x40, 0x5155f3363d3d373d3d363d7f360894a13ba1a3210667c828492db98dca3e2076)\n            mstore(0x20, 0x6009)\n            mstore(0x1e, implementation)\n            mstore(0x0a, 0x603d3d8160223d3973)\n            hash := keccak256(0x21, 0x5f)\n            mstore(0x40, m) // Restore the free memory pointer.\n            mstore(0x60, 0) // Restore the zero slot.\n        }\n    }\n\n    /// @dev Returns the address of the deterministic ERC1967 proxy of `implementation`,\n    /// with `salt` by `deployer`.\n    /// Note: The returned result has dirty upper 96 bits. Please clean if used in assembly.\n    function predictDeterministicAddressERC1967(\n        address implementation,\n        bytes32 salt,\n        address deployer\n    ) internal pure returns (address predicted) {\n        bytes32 hash = initCodeHashERC1967(implementation);\n        predicted = predictDeterministicAddress(hash, salt, deployer);\n    }\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*    MINIMAL ERC1967 PROXY WITH IMMUTABLE ARGS OPERATIONS    */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Deploys a minimal ERC1967 proxy with `implementation` and `args`.\n    function deployERC1967(address implementation, bytes memory args)\n        internal\n        returns (address instance)\n    {\n        instance = deployERC1967(0, implementation, args);\n    }\n\n    /// @dev Deploys a minimal ERC1967 proxy with `implementation` and `args`.\n    /// Deposits `value` ETH during deployment.\n    function deployERC1967(uint256 value, address implementation, bytes memory args)\n        internal\n        returns (address instance)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let m := mload(0x40)\n            let n := mload(args)\n            pop(staticcall(gas(), 4, add(args, 0x20), n, add(m, 0x60), n))\n            mstore(add(m, 0x40), 0xcc3735a920a3ca505d382bbc545af43d6000803e6038573d6000fd5b3d6000f3)\n            mstore(add(m, 0x20), 0x5155f3363d3d373d3d363d7f360894a13ba1a3210667c828492db98dca3e2076)\n            mstore(0x20, 0x6009)\n            mstore(0x1e, implementation)\n            // Do a out-of-gas revert if `n` is too big. 0xffff - 0x3d = 0xffc2.\n            // The actual EVM limit may be smaller and may change over time.\n            mstore(add(0x0a, gt(n, 0xffc2)), add(0xfe61003d3d8160233d3973, shl(56, n)))\n            mstore(m, mload(0x20))\n            instance := create(value, m, add(n, 0x60))\n            if iszero(instance) {\n                mstore(0x00, 0x30116425) // `DeploymentFailed()`.\n                revert(0x1c, 0x04)\n            }\n        }\n    }\n\n    /// @dev Deploys a deterministic minimal ERC1967 proxy with `implementation`, `args` and `salt`.\n    function deployDeterministicERC1967(address implementation, bytes memory args, bytes32 salt)\n        internal\n        returns (address instance)\n    {\n        instance = deployDeterministicERC1967(0, implementation, args, salt);\n    }\n\n    /// @dev Deploys a deterministic minimal ERC1967 proxy with `implementation`, `args` and `salt`.\n    /// Deposits `value` ETH during deployment.\n    function deployDeterministicERC1967(\n        uint256 value,\n        address implementation,\n        bytes memory args,\n        bytes32 salt\n    ) internal returns (address instance) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let m := mload(0x40)\n            let n := mload(args)\n            pop(staticcall(gas(), 4, add(args, 0x20), n, add(m, 0x60), n))\n            mstore(add(m, 0x40), 0xcc3735a920a3ca505d382bbc545af43d6000803e6038573d6000fd5b3d6000f3)\n            mstore(add(m, 0x20), 0x5155f3363d3d373d3d363d7f360894a13ba1a3210667c828492db98dca3e2076)\n            mstore(0x20, 0x6009)\n            mstore(0x1e, implementation)\n            // Do a out-of-gas revert if `n` is too big. 0xffff - 0x3d = 0xffc2.\n            // The actual EVM limit may be smaller and may change over time.\n            mstore(add(0x0a, gt(n, 0xffc2)), add(0xfe61003d3d8160233d3973, shl(56, n)))\n            mstore(m, mload(0x20))\n            instance := create2(value, m, add(n, 0x60), salt)\n            if iszero(instance) {\n                mstore(0x00, 0x30116425) // `DeploymentFailed()`.\n                revert(0x1c, 0x04)\n            }\n        }\n    }\n\n    /// @dev Creates a deterministic minimal ERC1967 proxy with `implementation`, `args` and `salt`.\n    /// Note: This method is intended for use in ERC4337 factories,\n    /// which are expected to NOT revert if the proxy is already deployed.\n    function createDeterministicERC1967(address implementation, bytes memory args, bytes32 salt)\n        internal\n        returns (bool alreadyDeployed, address instance)\n    {\n        return createDeterministicERC1967(0, implementation, args, salt);\n    }\n\n    /// @dev Creates a deterministic minimal ERC1967 proxy with `implementation`, `args` and `salt`.\n    /// Deposits `value` ETH during deployment.\n    /// Note: This method is intended for use in ERC4337 factories,\n    /// which are expected to NOT revert if the proxy is already deployed.\n    function createDeterministicERC1967(\n        uint256 value,\n        address implementation,\n        bytes memory args,\n        bytes32 salt\n    ) internal returns (bool alreadyDeployed, address instance) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let m := mload(0x40)\n            let n := mload(args)\n            pop(staticcall(gas(), 4, add(args, 0x20), n, add(m, 0x60), n))\n            mstore(add(m, 0x40), 0xcc3735a920a3ca505d382bbc545af43d6000803e6038573d6000fd5b3d6000f3)\n            mstore(add(m, 0x20), 0x5155f3363d3d373d3d363d7f360894a13ba1a3210667c828492db98dca3e2076)\n            mstore(0x20, 0x6009)\n            mstore(0x1e, implementation)\n            // Do a out-of-gas revert if `n` is too big. 0xffff - 0x3d = 0xffc2.\n            // The actual EVM limit may be smaller and may change over time.\n            mstore(add(0x0a, gt(n, 0xffc2)), add(0xfe61003d3d8160233d3973, shl(56, n)))\n            mstore(m, mload(0x20))\n            // Compute and store the bytecode hash.\n            mstore8(0x00, 0xff) // Write the prefix.\n            mstore(0x35, keccak256(m, add(n, 0x60)))\n            mstore(0x01, shl(96, address()))\n            mstore(0x15, salt)\n            instance := keccak256(0x00, 0x55)\n            for {} 1 {} {\n                if iszero(extcodesize(instance)) {\n                    instance := create2(value, m, add(n, 0x60), salt)\n                    if iszero(instance) {\n                        mstore(0x00, 0x30116425) // `DeploymentFailed()`.\n                        revert(0x1c, 0x04)\n                    }\n                    break\n                }\n                alreadyDeployed := 1\n                if iszero(value) { break }\n                if iszero(call(gas(), instance, value, codesize(), 0x00, codesize(), 0x00)) {\n                    mstore(0x00, 0xb12d13eb) // `ETHTransferFailed()`.\n                    revert(0x1c, 0x04)\n                }\n                break\n            }\n            mstore(0x40, m) // Restore the free memory pointer.\n        }\n    }\n\n    /// @dev Returns the initialization code of the minimal ERC1967 proxy of `implementation` and `args`.\n    function initCodeERC1967(address implementation, bytes memory args)\n        internal\n        pure\n        returns (bytes memory c)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            c := mload(0x40)\n            let n := mload(args)\n            // Do a out-of-gas revert if `n` is too big. 0xffff - 0x3d = 0xffc2.\n            // The actual EVM limit may be smaller and may change over time.\n            returndatacopy(returndatasize(), returndatasize(), gt(n, 0xffc2))\n            for { let i := 0 } lt(i, n) { i := add(i, 0x20) } {\n                mstore(add(add(c, 0x80), i), mload(add(add(args, 0x20), i)))\n            }\n            mstore(add(c, 0x60), 0xcc3735a920a3ca505d382bbc545af43d6000803e6038573d6000fd5b3d6000f3)\n            mstore(add(c, 0x40), 0x5155f3363d3d373d3d363d7f360894a13ba1a3210667c828492db98dca3e2076)\n            mstore(add(c, 0x20), 0x6009)\n            mstore(add(c, 0x1e), implementation)\n            mstore(add(c, 0x0a), add(0x61003d3d8160233d3973, shl(56, n)))\n            mstore(c, add(n, 0x60)) // Store the length.\n            mstore(add(c, add(n, 0x80)), 0) // Zeroize the slot after the bytes.\n            mstore(0x40, add(c, add(n, 0xa0))) // Allocate memory.\n        }\n    }\n\n    /// @dev Returns the initialization code hash of the minimal ERC1967 proxy of `implementation` and `args`.\n    /// Used for mining vanity addresses with create2crunch.\n    function initCodeHashERC1967(address implementation, bytes memory args)\n        internal\n        pure\n        returns (bytes32 hash)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let m := mload(0x40)\n            let n := mload(args)\n            // Do a out-of-gas revert if `n` is too big. 0xffff - 0x3d = 0xffc2.\n            // The actual EVM limit may be smaller and may change over time.\n            returndatacopy(returndatasize(), returndatasize(), gt(n, 0xffc2))\n            for { let i := 0 } lt(i, n) { i := add(i, 0x20) } {\n                mstore(add(add(m, 0x60), i), mload(add(add(args, 0x20), i)))\n            }\n            mstore(add(m, 0x40), 0xcc3735a920a3ca505d382bbc545af43d6000803e6038573d6000fd5b3d6000f3)\n            mstore(add(m, 0x20), 0x5155f3363d3d373d3d363d7f360894a13ba1a3210667c828492db98dca3e2076)\n            mstore(0x20, 0x6009)\n            mstore(0x1e, implementation)\n            mstore(0x0a, add(0x61003d3d8160233d3973, shl(56, n)))\n            mstore(m, mload(0x20))\n            hash := keccak256(m, add(n, 0x60))\n        }\n    }\n\n    /// @dev Returns the address of the deterministic ERC1967 proxy of `implementation`, `args`,\n    /// with `salt` by `deployer`.\n    /// Note: The returned result has dirty upper 96 bits. Please clean if used in assembly.\n    function predictDeterministicAddressERC1967(\n        address implementation,\n        bytes memory args,\n        bytes32 salt,\n        address deployer\n    ) internal pure returns (address predicted) {\n        bytes32 hash = initCodeHashERC1967(implementation, args);\n        predicted = predictDeterministicAddress(hash, salt, deployer);\n    }\n\n    /// @dev Equivalent to `argsOnERC1967(instance, start, 2 ** 256 - 1)`.\n    function argsOnERC1967(address instance) internal view returns (bytes memory args) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            args := mload(0x40)\n            let l := extcodesize(instance)\n            mstore(args, sub(l, 0x3d)) // Store the length.\n            extcodecopy(instance, add(args, 0x20), 0x3d, l)\n            mstore(0x40, add(add(args, 0x40), l)) // Allocate memory.\n        }\n    }\n\n    /// @dev Equivalent to `argsOnERC1967(instance, start, 2 ** 256 - 1)`.\n    function argsOnERC1967(address instance, uint256 start)\n        internal\n        view\n        returns (bytes memory args)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            args := mload(0x40)\n            let n := sub(extcodesize(instance), 0x3d)\n            n := mul(sub(n, start), lt(start, n))\n            extcodecopy(instance, args, add(start, 0x1d), add(0x40, n))\n            mstore(args, n) // Store the length.\n            mstore(0x40, add(args, add(0x40, n))) // Allocate memory.\n        }\n    }\n\n    /// @dev Returns the a slice of the immutable arguments on `instance` from `start` to `end`.\n    /// `start` and `end` will be clamped to the range `[0, args.length]`.\n    /// The `instance` MUST be deployed via the ERC1967 with immutable args functions in this library.\n    /// Otherwise, the behavior is undefined.\n    function argsOnERC1967(address instance, uint256 start, uint256 end)\n        internal\n        view\n        returns (bytes memory args)\n    {\n        if (end < start) return args;\n        /// @solidity memory-safe-assembly\n        assembly {\n            args := mload(0x40)\n            let d := and(0xffff, sub(end, start))\n            extcodecopy(instance, add(args, 0x20), add(start, 0x3d), d)\n            if iszero(and(0xff, mload(add(args, d)))) {\n                let n := sub(extcodesize(instance), 0x3d)\n                d := mul(gt(n, start), sub(d, mul(gt(end, n), sub(end, n))))\n            }\n            mstore(args, d) // Store the length.\n            mstore(add(add(args, 0x20), d), 0) // Zeroize the slot after the bytes.\n            mstore(0x40, add(add(args, 0x40), d)) // Allocate memory.\n        }\n    }\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                 ERC1967I PROXY OPERATIONS                  */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    // Note: This proxy has a special code path that activates if `calldatasize() == 1`.\n    // This code path skips the delegatecall and directly returns the `implementation` address.\n    // The returned implementation is guaranteed to be valid if the keccak256 of the\n    // proxy's code is equal to `ERC1967I_CODE_HASH`.\n\n    /// @dev Deploys a minimal ERC1967I proxy with `implementation`.\n    function deployERC1967I(address implementation) internal returns (address instance) {\n        instance = deployERC1967I(0, implementation);\n    }\n\n    /// @dev Deploys a ERC1967I proxy with `implementation`.\n    /// Deposits `value` ETH during deployment.\n    function deployERC1967I(uint256 value, address implementation)\n        internal\n        returns (address instance)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            /**\n             * ---------------------------------------------------------------------------------+\n             * CREATION (34 bytes)                                                              |\n             * ---------------------------------------------------------------------------------|\n             * Opcode     | Mnemonic       | Stack            | Memory                          |\n             * ---------------------------------------------------------------------------------|\n             * 60 runSize | PUSH1 runSize  | r                |                                 |\n             * 3d         | RETURNDATASIZE | 0 r              |                                 |\n             * 81         | DUP2           | r 0 r            |                                 |\n             * 60 offset  | PUSH1 offset   | o r 0 r          |                                 |\n             * 3d         | RETURNDATASIZE | 0 o r 0 r        |                                 |\n             * 39         | CODECOPY       | 0 r              | [0..runSize): runtime code      |\n             * 73 impl    | PUSH20 impl    | impl 0 r         | [0..runSize): runtime code      |\n             * 60 slotPos | PUSH1 slotPos  | slotPos impl 0 r | [0..runSize): runtime code      |\n             * 51         | MLOAD          | slot impl 0 r    | [0..runSize): runtime code      |\n             * 55         | SSTORE         | 0 r              | [0..runSize): runtime code      |\n             * f3         | RETURN         |                  | [0..runSize): runtime code      |\n             * ---------------------------------------------------------------------------------|\n             * RUNTIME (82 bytes)                                                               |\n             * ---------------------------------------------------------------------------------|\n             * Opcode     | Mnemonic       | Stack            | Memory                          |\n             * ---------------------------------------------------------------------------------|\n             *                                                                                  |\n             * ::: check calldatasize ::::::::::::::::::::::::::::::::::::::::::::::::::::::::: |\n             * 36         | CALLDATASIZE   | cds              |                                 |\n             * 58         | PC             | 1 cds            |                                 |\n             * 14         | EQ             | eqs              |                                 |\n             * 60 0x43    | PUSH1 0x43     | dest eqs         |                                 |\n             * 57         | JUMPI          |                  |                                 |\n             *                                                                                  |\n             * ::: copy calldata to memory :::::::::::::::::::::::::::::::::::::::::::::::::::: |\n             * 36         | CALLDATASIZE   | cds              |                                 |\n             * 3d         | RETURNDATASIZE | 0 cds            |                                 |\n             * 3d         | RETURNDATASIZE | 0 0 cds          |                                 |\n             * 37         | CALLDATACOPY   |                  | [0..calldatasize): calldata     |\n             *                                                                                  |\n             * ::: delegatecall to implementation ::::::::::::::::::::::::::::::::::::::::::::: |\n             * 3d         | RETURNDATASIZE | 0                |                                 |\n             * 3d         | RETURNDATASIZE | 0 0              |                                 |\n             * 36         | CALLDATASIZE   | cds 0 0          | [0..calldatasize): calldata     |\n             * 3d         | RETURNDATASIZE | 0 cds 0 0        | [0..calldatasize): calldata     |\n             * 7f slot    | PUSH32 slot    | s 0 cds 0 0      | [0..calldatasize): calldata     |\n             * 54         | SLOAD          | i 0 cds 0 0      | [0..calldatasize): calldata     |\n             * 5a         | GAS            | g i 0 cds 0 0    | [0..calldatasize): calldata     |\n             * f4         | DELEGATECALL   | succ             | [0..calldatasize): calldata     |\n             *                                                                                  |\n             * ::: copy returndata to memory :::::::::::::::::::::::::::::::::::::::::::::::::: |\n             * 3d         | RETURNDATASIZE | rds succ         | [0..calldatasize): calldata     |\n             * 60 0x00    | PUSH1 0x00     | 0 rds succ       | [0..calldatasize): calldata     |\n             * 80         | DUP1           | 0 0 rds succ     | [0..calldatasize): calldata     |\n             * 3e         | RETURNDATACOPY | succ             | [0..returndatasize): returndata |\n             *                                                                                  |\n             * ::: branch on delegatecall status :::::::::::::::::::::::::::::::::::::::::::::: |\n             * 60 0x3E    | PUSH1 0x3E     | dest succ        | [0..returndatasize): returndata |\n             * 57         | JUMPI          |                  | [0..returndatasize): returndata |\n             *                                                                                  |\n             * ::: delegatecall failed, revert :::::::::::::::::::::::::::::::::::::::::::::::: |\n             * 3d         | RETURNDATASIZE | rds              | [0..returndatasize): returndata |\n             * 60 0x00    | PUSH1 0x00     | 0 rds            | [0..returndatasize): returndata |\n             * fd         | REVERT         |                  | [0..returndatasize): returndata |\n             *                                                                                  |\n             * ::: delegatecall succeeded, return ::::::::::::::::::::::::::::::::::::::::::::: |\n             * 5b         | JUMPDEST       |                  | [0..returndatasize): returndata |\n             * 3d         | RETURNDATASIZE | rds              | [0..returndatasize): returndata |\n             * 60 0x00    | PUSH1 0x00     | 0 rds            | [0..returndatasize): returndata |\n             * f3         | RETURN         |                  | [0..returndatasize): returndata |\n             *                                                                                  |\n             * ::: implementation , return :::::::::::::::::::::::::::::::::::::::::::::::::::: |\n             * 5b         | JUMPDEST       |                  |                                 |\n             * 60 0x20    | PUSH1 0x20     | 32               |                                 |\n             * 60 0x0F    | PUSH1 0x0F     | o 32             |                                 |\n             * 3d         | RETURNDATASIZE | 0 o 32           |                                 |\n             * 39         | CODECOPY       |                  | [0..32): implementation slot    |\n             * 3d         | RETURNDATASIZE | 0                | [0..32): implementation slot    |\n             * 51         | MLOAD          | slot             | [0..32): implementation slot    |\n             * 54         | SLOAD          | impl             | [0..32): implementation slot    |\n             * 3d         | RETURNDATASIZE | 0 impl           | [0..32): implementation slot    |\n             * 52         | MSTORE         |                  | [0..32): implementation address |\n             * 59         | MSIZE          | 32               | [0..32): implementation address |\n             * 3d         | RETURNDATASIZE | 0 32             | [0..32): implementation address |\n             * f3         | RETURN         |                  | [0..32): implementation address |\n             * ---------------------------------------------------------------------------------+\n             */\n            let m := mload(0x40) // Cache the free memory pointer.\n            mstore(0x60, 0x3d6000803e603e573d6000fd5b3d6000f35b6020600f3d393d51543d52593df3)\n            mstore(0x40, 0xa13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc545af4)\n            mstore(0x20, 0x600f5155f3365814604357363d3d373d3d363d7f360894)\n            mstore(0x09, or(shl(160, 0x60523d8160223d3973), shr(96, shl(96, implementation))))\n            instance := create(value, 0x0c, 0x74)\n            if iszero(instance) {\n                mstore(0x00, 0x30116425) // `DeploymentFailed()`.\n                revert(0x1c, 0x04)\n            }\n            mstore(0x40, m) // Restore the free memory pointer.\n            mstore(0x60, 0) // Restore the zero slot.\n        }\n    }\n\n    /// @dev Deploys a deterministic ERC1967I proxy with `implementation` and `salt`.\n    function deployDeterministicERC1967I(address implementation, bytes32 salt)\n        internal\n        returns (address instance)\n    {\n        instance = deployDeterministicERC1967I(0, implementation, salt);\n    }\n\n    /// @dev Deploys a deterministic ERC1967I proxy with `implementation` and `salt`.\n    /// Deposits `value` ETH during deployment.\n    function deployDeterministicERC1967I(uint256 value, address implementation, bytes32 salt)\n        internal\n        returns (address instance)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let m := mload(0x40) // Cache the free memory pointer.\n            mstore(0x60, 0x3d6000803e603e573d6000fd5b3d6000f35b6020600f3d393d51543d52593df3)\n            mstore(0x40, 0xa13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc545af4)\n            mstore(0x20, 0x600f5155f3365814604357363d3d373d3d363d7f360894)\n            mstore(0x09, or(shl(160, 0x60523d8160223d3973), shr(96, shl(96, implementation))))\n            instance := create2(value, 0x0c, 0x74, salt)\n            if iszero(instance) {\n                mstore(0x00, 0x30116425) // `DeploymentFailed()`.\n                revert(0x1c, 0x04)\n            }\n            mstore(0x40, m) // Restore the free memory pointer.\n            mstore(0x60, 0) // Restore the zero slot.\n        }\n    }\n\n    /// @dev Creates a deterministic ERC1967I proxy with `implementation` and `salt`.\n    /// Note: This method is intended for use in ERC4337 factories,\n    /// which are expected to NOT revert if the proxy is already deployed.\n    function createDeterministicERC1967I(address implementation, bytes32 salt)\n        internal\n        returns (bool alreadyDeployed, address instance)\n    {\n        return createDeterministicERC1967I(0, implementation, salt);\n    }\n\n    /// @dev Creates a deterministic ERC1967I proxy with `implementation` and `salt`.\n    /// Deposits `value` ETH during deployment.\n    /// Note: This method is intended for use in ERC4337 factories,\n    /// which are expected to NOT revert if the proxy is already deployed.\n    function createDeterministicERC1967I(uint256 value, address implementation, bytes32 salt)\n        internal\n        returns (bool alreadyDeployed, address instance)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let m := mload(0x40) // Cache the free memory pointer.\n            mstore(0x60, 0x3d6000803e603e573d6000fd5b3d6000f35b6020600f3d393d51543d52593df3)\n            mstore(0x40, 0xa13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc545af4)\n            mstore(0x20, 0x600f5155f3365814604357363d3d373d3d363d7f360894)\n            mstore(0x09, or(shl(160, 0x60523d8160223d3973), shr(96, shl(96, implementation))))\n            // Compute and store the bytecode hash.\n            mstore(add(m, 0x35), keccak256(0x0c, 0x74))\n            mstore(m, shl(88, address()))\n            mstore8(m, 0xff) // Write the prefix.\n            mstore(add(m, 0x15), salt)\n            instance := keccak256(m, 0x55)\n            for {} 1 {} {\n                if iszero(extcodesize(instance)) {\n                    instance := create2(value, 0x0c, 0x74, salt)\n                    if iszero(instance) {\n                        mstore(0x00, 0x30116425) // `DeploymentFailed()`.\n                        revert(0x1c, 0x04)\n                    }\n                    break\n                }\n                alreadyDeployed := 1\n                if iszero(value) { break }\n                if iszero(call(gas(), instance, value, codesize(), 0x00, codesize(), 0x00)) {\n                    mstore(0x00, 0xb12d13eb) // `ETHTransferFailed()`.\n                    revert(0x1c, 0x04)\n                }\n                break\n            }\n            mstore(0x40, m) // Restore the free memory pointer.\n            mstore(0x60, 0) // Restore the zero slot.\n        }\n    }\n\n    /// @dev Returns the initialization code of the minimal ERC1967 proxy of `implementation`.\n    function initCodeERC1967I(address implementation) internal pure returns (bytes memory c) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            c := mload(0x40)\n            mstore(add(c, 0x74), 0x3d6000803e603e573d6000fd5b3d6000f35b6020600f3d393d51543d52593df3)\n            mstore(add(c, 0x54), 0xa13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc545af4)\n            mstore(add(c, 0x34), 0x600f5155f3365814604357363d3d373d3d363d7f360894)\n            mstore(add(c, 0x1d), implementation)\n            mstore(add(c, 0x09), 0x60523d8160223d3973)\n            mstore(add(c, 0x94), 0)\n            mstore(c, 0x74) // Store the length.\n            mstore(0x40, add(c, 0xa0)) // Allocate memory.\n        }\n    }\n\n    /// @dev Returns the initialization code hash of the minimal ERC1967 proxy of `implementation`.\n    /// Used for mining vanity addresses with create2crunch.\n    function initCodeHashERC1967I(address implementation) internal pure returns (bytes32 hash) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let m := mload(0x40) // Cache the free memory pointer.\n            mstore(0x60, 0x3d6000803e603e573d6000fd5b3d6000f35b6020600f3d393d51543d52593df3)\n            mstore(0x40, 0xa13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc545af4)\n            mstore(0x20, 0x600f5155f3365814604357363d3d373d3d363d7f360894)\n            mstore(0x09, or(shl(160, 0x60523d8160223d3973), shr(96, shl(96, implementation))))\n            hash := keccak256(0x0c, 0x74)\n            mstore(0x40, m) // Restore the free memory pointer.\n            mstore(0x60, 0) // Restore the zero slot.\n        }\n    }\n\n    /// @dev Returns the address of the deterministic ERC1967I proxy of `implementation`,\n    /// with `salt` by `deployer`.\n    /// Note: The returned result has dirty upper 96 bits. Please clean if used in assembly.\n    function predictDeterministicAddressERC1967I(\n        address implementation,\n        bytes32 salt,\n        address deployer\n    ) internal pure returns (address predicted) {\n        bytes32 hash = initCodeHashERC1967I(implementation);\n        predicted = predictDeterministicAddress(hash, salt, deployer);\n    }\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*            CONSTANT ERC1967 BOOTSTRAP OPERATIONS           */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    // Note: This enables an ERC1967 proxy to be deployed at a deterministic address\n    // independent of the implementation:\n    // ```\n    //     address bootstrap = LibClone.constantERC1967Bootstrap();\n    //     address instance = LibClone.deployDeterministicERC1967(0, bootstrap, salt);\n    //     LibClone.bootstrapConstantERC1967(bootstrap, implementation);\n    // ```\n\n    /// @dev Deploys the constant ERC1967 bootstrap if it has not been deployed.\n    function constantERC1967Bootstrap() internal returns (address bootstrap) {\n        bootstrap = constantERC1967BootstrapAddress();\n        /// @solidity memory-safe-assembly\n        assembly {\n            if iszero(extcodesize(bootstrap)) {\n                mstore(0x20, 0x0894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc55)\n                mstore(0x00, 0x60258060093d393df358357f36)\n                if iszero(create2(0, 0x13, 0x2e, 0)) {\n                    mstore(0x00, 0x30116425) // `DeploymentFailed()`.\n                    revert(0x1c, 0x04)\n                }\n            }\n        }\n    }\n\n    /// @dev Returns the implementation address of the ERC1967 bootstrap for this contract.\n    function constantERC1967BootstrapAddress() internal view returns (address bootstrap) {\n        bytes32 hash = 0xfe1a42b9c571a6a8c083c94ac67b9cfd74e2582923426aa3b762e3431d717cd1;\n        bootstrap = predictDeterministicAddress(hash, bytes32(0), address(this));\n    }\n\n    /// @dev Replaces the implementation at `instance`.\n    function bootstrapERC1967(address instance, address implementation) internal {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, shr(96, shl(96, implementation)))\n            if iszero(call(gas(), instance, 0, 0x00, 0x20, codesize(), 0x00)) {\n                mstore(0x00, 0x30116425) // `DeploymentFailed()`.\n                revert(0x1c, 0x04)\n            }\n        }\n    }\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*          MINIMAL ERC1967 BEACON PROXY OPERATIONS           */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    // Note: If you use this proxy, you MUST make sure that the beacon is a\n    // valid ERC1967 beacon. This means that the beacon must always return a valid\n    // address upon a staticcall to `implementation()`, given sufficient gas.\n    // For performance, the deployment operations and the proxy assumes that the\n    // beacon is always valid and will NOT validate it.\n\n    /// @dev Deploys a minimal ERC1967 beacon proxy.\n    function deployERC1967BeaconProxy(address beacon) internal returns (address instance) {\n        instance = deployERC1967BeaconProxy(0, beacon);\n    }\n\n    /// @dev Deploys a minimal ERC1967 beacon proxy.\n    /// Deposits `value` ETH during deployment.\n    function deployERC1967BeaconProxy(uint256 value, address beacon)\n        internal\n        returns (address instance)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            /**\n             * ---------------------------------------------------------------------------------+\n             * CREATION (34 bytes)                                                              |\n             * ---------------------------------------------------------------------------------|\n             * Opcode     | Mnemonic       | Stack            | Memory                          |\n             * ---------------------------------------------------------------------------------|\n             * 60 runSize | PUSH1 runSize  | r                |                                 |\n             * 3d         | RETURNDATASIZE | 0 r              |                                 |\n             * 81         | DUP2           | r 0 r            |                                 |\n             * 60 offset  | PUSH1 offset   | o r 0 r          |                                 |\n             * 3d         | RETURNDATASIZE | 0 o r 0 r        |                                 |\n             * 39         | CODECOPY       | 0 r              | [0..runSize): runtime code      |\n             * 73 beac    | PUSH20 beac    | beac 0 r         | [0..runSize): runtime code      |\n             * 60 slotPos | PUSH1 slotPos  | slotPos beac 0 r | [0..runSize): runtime code      |\n             * 51         | MLOAD          | slot beac 0 r    | [0..runSize): runtime code      |\n             * 55         | SSTORE         | 0 r              | [0..runSize): runtime code      |\n             * f3         | RETURN         |                  | [0..runSize): runtime code      |\n             * ---------------------------------------------------------------------------------|\n             * RUNTIME (82 bytes)                                                               |\n             * ---------------------------------------------------------------------------------|\n             * Opcode     | Mnemonic       | Stack            | Memory                          |\n             * ---------------------------------------------------------------------------------|\n             *                                                                                  |\n             * ::: copy calldata to memory :::::::::::::::::::::::::::::::::::::::::::::::::::: |\n             * 36         | CALLDATASIZE   | cds              |                                 |\n             * 3d         | RETURNDATASIZE | 0 cds            |                                 |\n             * 3d         | RETURNDATASIZE | 0 0 cds          |                                 |\n             * 37         | CALLDATACOPY   |                  | [0..calldatasize): calldata     |\n             *                                                                                  |\n             * ::: delegatecall to implementation ::::::::::::::::::::::::::::::::::::::::::::: |\n             * 3d         | RETURNDATASIZE | 0                |                                 |\n             * 3d         | RETURNDATASIZE | 0 0              |                                 |\n             * 36         | CALLDATASIZE   | cds 0 0          | [0..calldatasize): calldata     |\n             * 3d         | RETURNDATASIZE | 0 cds 0 0        | [0..calldatasize): calldata     |\n             *                                                                                  |\n             * ~~~~~~~ beacon staticcall sub procedure ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ |\n             * 60 0x20       | PUSH1 0x20       | 32                          |                 |\n             * 36            | CALLDATASIZE     | cds 32                      |                 |\n             * 60 0x04       | PUSH1 0x04       | 4 cds 32                    |                 |\n             * 36            | CALLDATASIZE     | cds 4 cds 32                |                 |\n             * 63 0x5c60da1b | PUSH4 0x5c60da1b | 0x5c60da1b cds 4 cds 32     |                 |\n             * 60 0xe0       | PUSH1 0xe0       | 224 0x5c60da1b cds 4 cds 32 |                 |\n             * 1b            | SHL              | sel cds 4 cds 32            |                 |\n             * 36            | CALLDATASIZE     | cds sel cds 4 cds 32        |                 |\n             * 52            | MSTORE           | cds 4 cds 32                | sel             |\n             * 7f slot       | PUSH32 slot      | s cds 4 cds 32              | sel             |\n             * 54            | SLOAD            | beac cds 4 cds 32           | sel             |\n             * 5a            | GAS              | g beac cds 4 cds 32         | sel             |\n             * fa            | STATICCALL       | succ                        | impl            |\n             * 50            | POP              |                             | impl            |\n             * 36            | CALLDATASIZE     | cds                         | impl            |\n             * 51            | MLOAD            | impl                        | impl            |\n             * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ |\n             * 5a         | GAS            | g impl 0 cds 0 0 | [0..calldatasize): calldata     |\n             * f4         | DELEGATECALL   | succ             | [0..calldatasize): calldata     |\n             *                                                                                  |\n             * ::: copy returndata to memory :::::::::::::::::::::::::::::::::::::::::::::::::: |\n             * 3d         | RETURNDATASIZE | rds succ         | [0..calldatasize): calldata     |\n             * 60 0x00    | PUSH1 0x00     | 0 rds succ       | [0..calldatasize): calldata     |\n             * 80         | DUP1           | 0 0 rds succ     | [0..calldatasize): calldata     |\n             * 3e         | RETURNDATACOPY | succ             | [0..returndatasize): returndata |\n             *                                                                                  |\n             * ::: branch on delegatecall status :::::::::::::::::::::::::::::::::::::::::::::: |\n             * 60 0x4d    | PUSH1 0x4d     | dest succ        | [0..returndatasize): returndata |\n             * 57         | JUMPI          |                  | [0..returndatasize): returndata |\n             *                                                                                  |\n             * ::: delegatecall failed, revert :::::::::::::::::::::::::::::::::::::::::::::::: |\n             * 3d         | RETURNDATASIZE | rds              | [0..returndatasize): returndata |\n             * 60 0x00    | PUSH1 0x00     | 0 rds            | [0..returndatasize): returndata |\n             * fd         | REVERT         |                  | [0..returndatasize): returndata |\n             *                                                                                  |\n             * ::: delegatecall succeeded, return ::::::::::::::::::::::::::::::::::::::::::::: |\n             * 5b         | JUMPDEST       |                  | [0..returndatasize): returndata |\n             * 3d         | RETURNDATASIZE | rds              | [0..returndatasize): returndata |\n             * 60 0x00    | PUSH1 0x00     | 0 rds            | [0..returndatasize): returndata |\n             * f3         | RETURN         |                  | [0..returndatasize): returndata |\n             * ---------------------------------------------------------------------------------+\n             */\n            let m := mload(0x40) // Cache the free memory pointer.\n            mstore(0x60, 0xb3582b35133d50545afa5036515af43d6000803e604d573d6000fd5b3d6000f3)\n            mstore(0x40, 0x1b60e01b36527fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6c)\n            mstore(0x20, 0x60195155f3363d3d373d3d363d602036600436635c60da)\n            mstore(0x09, or(shl(160, 0x60523d8160223d3973), shr(96, shl(96, beacon))))\n            instance := create(value, 0x0c, 0x74)\n            if iszero(instance) {\n                mstore(0x00, 0x30116425) // `DeploymentFailed()`.\n                revert(0x1c, 0x04)\n            }\n            mstore(0x40, m) // Restore the free memory pointer.\n            mstore(0x60, 0) // Restore the zero slot.\n        }\n    }\n\n    /// @dev Deploys a deterministic minimal ERC1967 beacon proxy with `salt`.\n    function deployDeterministicERC1967BeaconProxy(address beacon, bytes32 salt)\n        internal\n        returns (address instance)\n    {\n        instance = deployDeterministicERC1967BeaconProxy(0, beacon, salt);\n    }\n\n    /// @dev Deploys a deterministic minimal ERC1967 beacon proxy with `salt`.\n    /// Deposits `value` ETH during deployment.\n    function deployDeterministicERC1967BeaconProxy(uint256 value, address beacon, bytes32 salt)\n        internal\n        returns (address instance)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let m := mload(0x40) // Cache the free memory pointer.\n            mstore(0x60, 0xb3582b35133d50545afa5036515af43d6000803e604d573d6000fd5b3d6000f3)\n            mstore(0x40, 0x1b60e01b36527fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6c)\n            mstore(0x20, 0x60195155f3363d3d373d3d363d602036600436635c60da)\n            mstore(0x09, or(shl(160, 0x60523d8160223d3973), shr(96, shl(96, beacon))))\n            instance := create2(value, 0x0c, 0x74, salt)\n            if iszero(instance) {\n                mstore(0x00, 0x30116425) // `DeploymentFailed()`.\n                revert(0x1c, 0x04)\n            }\n            mstore(0x40, m) // Restore the free memory pointer.\n            mstore(0x60, 0) // Restore the zero slot.\n        }\n    }\n\n    /// @dev Creates a deterministic minimal ERC1967 beacon proxy with `salt`.\n    /// Note: This method is intended for use in ERC4337 factories,\n    /// which are expected to NOT revert if the proxy is already deployed.\n    function createDeterministicERC1967BeaconProxy(address beacon, bytes32 salt)\n        internal\n        returns (bool alreadyDeployed, address instance)\n    {\n        return createDeterministicERC1967BeaconProxy(0, beacon, salt);\n    }\n\n    /// @dev Creates a deterministic minimal ERC1967 beacon proxy with `salt`.\n    /// Deposits `value` ETH during deployment.\n    /// Note: This method is intended for use in ERC4337 factories,\n    /// which are expected to NOT revert if the proxy is already deployed.\n    function createDeterministicERC1967BeaconProxy(uint256 value, address beacon, bytes32 salt)\n        internal\n        returns (bool alreadyDeployed, address instance)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let m := mload(0x40) // Cache the free memory pointer.\n            mstore(0x60, 0xb3582b35133d50545afa5036515af43d6000803e604d573d6000fd5b3d6000f3)\n            mstore(0x40, 0x1b60e01b36527fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6c)\n            mstore(0x20, 0x60195155f3363d3d373d3d363d602036600436635c60da)\n            mstore(0x09, or(shl(160, 0x60523d8160223d3973), shr(96, shl(96, beacon))))\n            // Compute and store the bytecode hash.\n            mstore(add(m, 0x35), keccak256(0x0c, 0x74))\n            mstore(m, shl(88, address()))\n            mstore8(m, 0xff) // Write the prefix.\n            mstore(add(m, 0x15), salt)\n            instance := keccak256(m, 0x55)\n            for {} 1 {} {\n                if iszero(extcodesize(instance)) {\n                    instance := create2(value, 0x0c, 0x74, salt)\n                    if iszero(instance) {\n                        mstore(0x00, 0x30116425) // `DeploymentFailed()`.\n                        revert(0x1c, 0x04)\n                    }\n                    break\n                }\n                alreadyDeployed := 1\n                if iszero(value) { break }\n                if iszero(call(gas(), instance, value, codesize(), 0x00, codesize(), 0x00)) {\n                    mstore(0x00, 0xb12d13eb) // `ETHTransferFailed()`.\n                    revert(0x1c, 0x04)\n                }\n                break\n            }\n            mstore(0x40, m) // Restore the free memory pointer.\n            mstore(0x60, 0) // Restore the zero slot.\n        }\n    }\n\n    /// @dev Returns the initialization code of the minimal ERC1967 beacon proxy.\n    function initCodeERC1967BeaconProxy(address beacon) internal pure returns (bytes memory c) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            c := mload(0x40)\n            mstore(add(c, 0x74), 0xb3582b35133d50545afa5036515af43d6000803e604d573d6000fd5b3d6000f3)\n            mstore(add(c, 0x54), 0x1b60e01b36527fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6c)\n            mstore(add(c, 0x34), 0x60195155f3363d3d373d3d363d602036600436635c60da)\n            mstore(add(c, 0x1d), beacon)\n            mstore(add(c, 0x09), 0x60523d8160223d3973)\n            mstore(add(c, 0x94), 0)\n            mstore(c, 0x74) // Store the length.\n            mstore(0x40, add(c, 0xa0)) // Allocate memory.\n        }\n    }\n\n    /// @dev Returns the initialization code hash of the minimal ERC1967 beacon proxy.\n    /// Used for mining vanity addresses with create2crunch.\n    function initCodeHashERC1967BeaconProxy(address beacon) internal pure returns (bytes32 hash) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let m := mload(0x40) // Cache the free memory pointer.\n            mstore(0x60, 0xb3582b35133d50545afa5036515af43d6000803e604d573d6000fd5b3d6000f3)\n            mstore(0x40, 0x1b60e01b36527fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6c)\n            mstore(0x20, 0x60195155f3363d3d373d3d363d602036600436635c60da)\n            mstore(0x09, or(shl(160, 0x60523d8160223d3973), shr(96, shl(96, beacon))))\n            hash := keccak256(0x0c, 0x74)\n            mstore(0x40, m) // Restore the free memory pointer.\n            mstore(0x60, 0) // Restore the zero slot.\n        }\n    }\n\n    /// @dev Returns the address of the deterministic ERC1967 beacon proxy,\n    /// with `salt` by `deployer`.\n    /// Note: The returned result has dirty upper 96 bits. Please clean if used in assembly.\n    function predictDeterministicAddressERC1967BeaconProxy(\n        address beacon,\n        bytes32 salt,\n        address deployer\n    ) internal pure returns (address predicted) {\n        bytes32 hash = initCodeHashERC1967BeaconProxy(beacon);\n        predicted = predictDeterministicAddress(hash, salt, deployer);\n    }\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                      OTHER OPERATIONS                      */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Returns the address when a contract with initialization code hash,\n    /// `hash`, is deployed with `salt`, by `deployer`.\n    /// Note: The returned result has dirty upper 96 bits. Please clean if used in assembly.\n    function predictDeterministicAddress(bytes32 hash, bytes32 salt, address deployer)\n        internal\n        pure\n        returns (address predicted)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Compute and store the bytecode hash.\n            mstore8(0x00, 0xff) // Write the prefix.\n            mstore(0x35, hash)\n            mstore(0x01, shl(96, deployer))\n            mstore(0x15, salt)\n            predicted := keccak256(0x00, 0x55)\n            mstore(0x35, 0) // Restore the overwritten part of the free memory pointer.\n        }\n    }\n\n    /// @dev Requires that `salt` starts with either the zero address or `by`.\n    function checkStartsWith(bytes32 salt, address by) internal pure {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // If the salt does not start with the zero address or `by`.\n            if iszero(or(iszero(shr(96, salt)), eq(shr(96, shl(96, by)), shr(96, salt)))) {\n                mstore(0x00, 0x0c4549ef) // `SaltDoesNotStartWith()`.\n                revert(0x1c, 0x04)\n            }\n        }\n    }\n}\n"
      },
      "lib/solady/src/utils/SafeTransferLib.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/SafeTransferLib.sol)\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeTransferLib.sol)\n/// @author Permit2 operations from (https://github.com/Uniswap/permit2/blob/main/src/libraries/Permit2Lib.sol)\n///\n/// @dev Note:\n/// - For ETH transfers, please use `forceSafeTransferETH` for DoS protection.\n/// - For ERC20s, this implementation won't check that a token has code,\n///   responsibility is delegated to the caller.\nlibrary SafeTransferLib {\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                       CUSTOM ERRORS                        */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev The ETH transfer has failed.\n    error ETHTransferFailed();\n\n    /// @dev The ERC20 `transferFrom` has failed.\n    error TransferFromFailed();\n\n    /// @dev The ERC20 `transfer` has failed.\n    error TransferFailed();\n\n    /// @dev The ERC20 `approve` has failed.\n    error ApproveFailed();\n\n    /// @dev The Permit2 operation has failed.\n    error Permit2Failed();\n\n    /// @dev The Permit2 amount must be less than `2**160 - 1`.\n    error Permit2AmountOverflow();\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                         CONSTANTS                          */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Suggested gas stipend for contract receiving ETH that disallows any storage writes.\n    uint256 internal constant GAS_STIPEND_NO_STORAGE_WRITES = 2300;\n\n    /// @dev Suggested gas stipend for contract receiving ETH to perform a few\n    /// storage reads and writes, but low enough to prevent griefing.\n    uint256 internal constant GAS_STIPEND_NO_GRIEF = 100000;\n\n    /// @dev The unique EIP-712 domain domain separator for the DAI token contract.\n    bytes32 internal constant DAI_DOMAIN_SEPARATOR =\n        0xdbb8cf42e1ecb028be3f3dbc922e1d878b963f411dc388ced501601c60f7c6f7;\n\n    /// @dev The address for the WETH9 contract on Ethereum mainnet.\n    address internal constant WETH9 = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n\n    /// @dev The canonical Permit2 address.\n    /// [Github](https://github.com/Uniswap/permit2)\n    /// [Etherscan](https://etherscan.io/address/0x000000000022D473030F116dDEE9F6B43aC78BA3)\n    address internal constant PERMIT2 = 0x000000000022D473030F116dDEE9F6B43aC78BA3;\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                       ETH OPERATIONS                       */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    // If the ETH transfer MUST succeed with a reasonable gas budget, use the force variants.\n    //\n    // The regular variants:\n    // - Forwards all remaining gas to the target.\n    // - Reverts if the target reverts.\n    // - Reverts if the current contract has insufficient balance.\n    //\n    // The force variants:\n    // - Forwards with an optional gas stipend\n    //   (defaults to `GAS_STIPEND_NO_GRIEF`, which is sufficient for most cases).\n    // - If the target reverts, or if the gas stipend is exhausted,\n    //   creates a temporary contract to force send the ETH via `SELFDESTRUCT`.\n    //   Future compatible with `SENDALL`: https://eips.ethereum.org/EIPS/eip-4758.\n    // - Reverts if the current contract has insufficient balance.\n    //\n    // The try variants:\n    // - Forwards with a mandatory gas stipend.\n    // - Instead of reverting, returns whether the transfer succeeded.\n\n    /// @dev Sends `amount` (in wei) ETH to `to`.\n    function safeTransferETH(address to, uint256 amount) internal {\n        /// @solidity memory-safe-assembly\n        assembly {\n            if iszero(call(gas(), to, amount, codesize(), 0x00, codesize(), 0x00)) {\n                mstore(0x00, 0xb12d13eb) // `ETHTransferFailed()`.\n                revert(0x1c, 0x04)\n            }\n        }\n    }\n\n    /// @dev Sends all the ETH in the current contract to `to`.\n    function safeTransferAllETH(address to) internal {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Transfer all the ETH and check if it succeeded or not.\n            if iszero(call(gas(), to, selfbalance(), codesize(), 0x00, codesize(), 0x00)) {\n                mstore(0x00, 0xb12d13eb) // `ETHTransferFailed()`.\n                revert(0x1c, 0x04)\n            }\n        }\n    }\n\n    /// @dev Force sends `amount` (in wei) ETH to `to`, with a `gasStipend`.\n    function forceSafeTransferETH(address to, uint256 amount, uint256 gasStipend) internal {\n        /// @solidity memory-safe-assembly\n        assembly {\n            if lt(selfbalance(), amount) {\n                mstore(0x00, 0xb12d13eb) // `ETHTransferFailed()`.\n                revert(0x1c, 0x04)\n            }\n            if iszero(call(gasStipend, to, amount, codesize(), 0x00, codesize(), 0x00)) {\n                mstore(0x00, to) // Store the address in scratch space.\n                mstore8(0x0b, 0x73) // Opcode `PUSH20`.\n                mstore8(0x20, 0xff) // Opcode `SELFDESTRUCT`.\n                if iszero(create(amount, 0x0b, 0x16)) { revert(codesize(), codesize()) } // For gas estimation.\n            }\n        }\n    }\n\n    /// @dev Force sends all the ETH in the current contract to `to`, with a `gasStipend`.\n    function forceSafeTransferAllETH(address to, uint256 gasStipend) internal {\n        /// @solidity memory-safe-assembly\n        assembly {\n            if iszero(call(gasStipend, to, selfbalance(), codesize(), 0x00, codesize(), 0x00)) {\n                mstore(0x00, to) // Store the address in scratch space.\n                mstore8(0x0b, 0x73) // Opcode `PUSH20`.\n                mstore8(0x20, 0xff) // Opcode `SELFDESTRUCT`.\n                if iszero(create(selfbalance(), 0x0b, 0x16)) { revert(codesize(), codesize()) } // For gas estimation.\n            }\n        }\n    }\n\n    /// @dev Force sends `amount` (in wei) ETH to `to`, with `GAS_STIPEND_NO_GRIEF`.\n    function forceSafeTransferETH(address to, uint256 amount) internal {\n        /// @solidity memory-safe-assembly\n        assembly {\n            if lt(selfbalance(), amount) {\n                mstore(0x00, 0xb12d13eb) // `ETHTransferFailed()`.\n                revert(0x1c, 0x04)\n            }\n            if iszero(call(GAS_STIPEND_NO_GRIEF, to, amount, codesize(), 0x00, codesize(), 0x00)) {\n                mstore(0x00, to) // Store the address in scratch space.\n                mstore8(0x0b, 0x73) // Opcode `PUSH20`.\n                mstore8(0x20, 0xff) // Opcode `SELFDESTRUCT`.\n                if iszero(create(amount, 0x0b, 0x16)) { revert(codesize(), codesize()) } // For gas estimation.\n            }\n        }\n    }\n\n    /// @dev Force sends all the ETH in the current contract to `to`, with `GAS_STIPEND_NO_GRIEF`.\n    function forceSafeTransferAllETH(address to) internal {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // forgefmt: disable-next-item\n            if iszero(call(GAS_STIPEND_NO_GRIEF, to, selfbalance(), codesize(), 0x00, codesize(), 0x00)) {\n                mstore(0x00, to) // Store the address in scratch space.\n                mstore8(0x0b, 0x73) // Opcode `PUSH20`.\n                mstore8(0x20, 0xff) // Opcode `SELFDESTRUCT`.\n                if iszero(create(selfbalance(), 0x0b, 0x16)) { revert(codesize(), codesize()) } // For gas estimation.\n            }\n        }\n    }\n\n    /// @dev Sends `amount` (in wei) ETH to `to`, with a `gasStipend`.\n    function trySafeTransferETH(address to, uint256 amount, uint256 gasStipend)\n        internal\n        returns (bool success)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            success := call(gasStipend, to, amount, codesize(), 0x00, codesize(), 0x00)\n        }\n    }\n\n    /// @dev Sends all the ETH in the current contract to `to`, with a `gasStipend`.\n    function trySafeTransferAllETH(address to, uint256 gasStipend)\n        internal\n        returns (bool success)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            success := call(gasStipend, to, selfbalance(), codesize(), 0x00, codesize(), 0x00)\n        }\n    }\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                      ERC20 OPERATIONS                      */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Sends `amount` of ERC20 `token` from `from` to `to`.\n    /// Reverts upon failure.\n    ///\n    /// The `from` account must have at least `amount` approved for\n    /// the current contract to manage.\n    function safeTransferFrom(address token, address from, address to, uint256 amount) internal {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let m := mload(0x40) // Cache the free memory pointer.\n            mstore(0x60, amount) // Store the `amount` argument.\n            mstore(0x40, to) // Store the `to` argument.\n            mstore(0x2c, shl(96, from)) // Store the `from` argument.\n            mstore(0x0c, 0x23b872dd000000000000000000000000) // `transferFrom(address,address,uint256)`.\n            // Perform the transfer, reverting upon failure.\n            if iszero(\n                and( // The arguments of `and` are evaluated from right to left.\n                    or(eq(mload(0x00), 1), iszero(returndatasize())), // Returned 1 or nothing.\n                    call(gas(), token, 0, 0x1c, 0x64, 0x00, 0x20)\n                )\n            ) {\n                mstore(0x00, 0x7939f424) // `TransferFromFailed()`.\n                revert(0x1c, 0x04)\n            }\n            mstore(0x60, 0) // Restore the zero slot to zero.\n            mstore(0x40, m) // Restore the free memory pointer.\n        }\n    }\n\n    /// @dev Sends `amount` of ERC20 `token` from `from` to `to`.\n    ///\n    /// The `from` account must have at least `amount` approved for the current contract to manage.\n    function trySafeTransferFrom(address token, address from, address to, uint256 amount)\n        internal\n        returns (bool success)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let m := mload(0x40) // Cache the free memory pointer.\n            mstore(0x60, amount) // Store the `amount` argument.\n            mstore(0x40, to) // Store the `to` argument.\n            mstore(0x2c, shl(96, from)) // Store the `from` argument.\n            mstore(0x0c, 0x23b872dd000000000000000000000000) // `transferFrom(address,address,uint256)`.\n            success :=\n                and( // The arguments of `and` are evaluated from right to left.\n                    or(eq(mload(0x00), 1), iszero(returndatasize())), // Returned 1 or nothing.\n                    call(gas(), token, 0, 0x1c, 0x64, 0x00, 0x20)\n                )\n            mstore(0x60, 0) // Restore the zero slot to zero.\n            mstore(0x40, m) // Restore the free memory pointer.\n        }\n    }\n\n    /// @dev Sends all of ERC20 `token` from `from` to `to`.\n    /// Reverts upon failure.\n    ///\n    /// The `from` account must have their entire balance approved for the current contract to manage.\n    function safeTransferAllFrom(address token, address from, address to)\n        internal\n        returns (uint256 amount)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let m := mload(0x40) // Cache the free memory pointer.\n            mstore(0x40, to) // Store the `to` argument.\n            mstore(0x2c, shl(96, from)) // Store the `from` argument.\n            mstore(0x0c, 0x70a08231000000000000000000000000) // `balanceOf(address)`.\n            // Read the balance, reverting upon failure.\n            if iszero(\n                and( // The arguments of `and` are evaluated from right to left.\n                    gt(returndatasize(), 0x1f), // At least 32 bytes returned.\n                    staticcall(gas(), token, 0x1c, 0x24, 0x60, 0x20)\n                )\n            ) {\n                mstore(0x00, 0x7939f424) // `TransferFromFailed()`.\n                revert(0x1c, 0x04)\n            }\n            mstore(0x00, 0x23b872dd) // `transferFrom(address,address,uint256)`.\n            amount := mload(0x60) // The `amount` is already at 0x60. We'll need to return it.\n            // Perform the transfer, reverting upon failure.\n            if iszero(\n                and( // The arguments of `and` are evaluated from right to left.\n                    or(eq(mload(0x00), 1), iszero(returndatasize())), // Returned 1 or nothing.\n                    call(gas(), token, 0, 0x1c, 0x64, 0x00, 0x20)\n                )\n            ) {\n                mstore(0x00, 0x7939f424) // `TransferFromFailed()`.\n                revert(0x1c, 0x04)\n            }\n            mstore(0x60, 0) // Restore the zero slot to zero.\n            mstore(0x40, m) // Restore the free memory pointer.\n        }\n    }\n\n    /// @dev Sends `amount` of ERC20 `token` from the current contract to `to`.\n    /// Reverts upon failure.\n    function safeTransfer(address token, address to, uint256 amount) internal {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x14, to) // Store the `to` argument.\n            mstore(0x34, amount) // Store the `amount` argument.\n            mstore(0x00, 0xa9059cbb000000000000000000000000) // `transfer(address,uint256)`.\n            // Perform the transfer, reverting upon failure.\n            if iszero(\n                and( // The arguments of `and` are evaluated from right to left.\n                    or(eq(mload(0x00), 1), iszero(returndatasize())), // Returned 1 or nothing.\n                    call(gas(), token, 0, 0x10, 0x44, 0x00, 0x20)\n                )\n            ) {\n                mstore(0x00, 0x90b8ec18) // `TransferFailed()`.\n                revert(0x1c, 0x04)\n            }\n            mstore(0x34, 0) // Restore the part of the free memory pointer that was overwritten.\n        }\n    }\n\n    /// @dev Sends all of ERC20 `token` from the current contract to `to`.\n    /// Reverts upon failure.\n    function safeTransferAll(address token, address to) internal returns (uint256 amount) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, 0x70a08231) // Store the function selector of `balanceOf(address)`.\n            mstore(0x20, address()) // Store the address of the current contract.\n            // Read the balance, reverting upon failure.\n            if iszero(\n                and( // The arguments of `and` are evaluated from right to left.\n                    gt(returndatasize(), 0x1f), // At least 32 bytes returned.\n                    staticcall(gas(), token, 0x1c, 0x24, 0x34, 0x20)\n                )\n            ) {\n                mstore(0x00, 0x90b8ec18) // `TransferFailed()`.\n                revert(0x1c, 0x04)\n            }\n            mstore(0x14, to) // Store the `to` argument.\n            amount := mload(0x34) // The `amount` is already at 0x34. We'll need to return it.\n            mstore(0x00, 0xa9059cbb000000000000000000000000) // `transfer(address,uint256)`.\n            // Perform the transfer, reverting upon failure.\n            if iszero(\n                and( // The arguments of `and` are evaluated from right to left.\n                    or(eq(mload(0x00), 1), iszero(returndatasize())), // Returned 1 or nothing.\n                    call(gas(), token, 0, 0x10, 0x44, 0x00, 0x20)\n                )\n            ) {\n                mstore(0x00, 0x90b8ec18) // `TransferFailed()`.\n                revert(0x1c, 0x04)\n            }\n            mstore(0x34, 0) // Restore the part of the free memory pointer that was overwritten.\n        }\n    }\n\n    /// @dev Sets `amount` of ERC20 `token` for `to` to manage on behalf of the current contract.\n    /// Reverts upon failure.\n    function safeApprove(address token, address to, uint256 amount) internal {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x14, to) // Store the `to` argument.\n            mstore(0x34, amount) // Store the `amount` argument.\n            mstore(0x00, 0x095ea7b3000000000000000000000000) // `approve(address,uint256)`.\n            // Perform the approval, reverting upon failure.\n            if iszero(\n                and( // The arguments of `and` are evaluated from right to left.\n                    or(eq(mload(0x00), 1), iszero(returndatasize())), // Returned 1 or nothing.\n                    call(gas(), token, 0, 0x10, 0x44, 0x00, 0x20)\n                )\n            ) {\n                mstore(0x00, 0x3e3f8f73) // `ApproveFailed()`.\n                revert(0x1c, 0x04)\n            }\n            mstore(0x34, 0) // Restore the part of the free memory pointer that was overwritten.\n        }\n    }\n\n    /// @dev Sets `amount` of ERC20 `token` for `to` to manage on behalf of the current contract.\n    /// If the initial attempt to approve fails, attempts to reset the approved amount to zero,\n    /// then retries the approval again (some tokens, e.g. USDT, requires this).\n    /// Reverts upon failure.\n    function safeApproveWithRetry(address token, address to, uint256 amount) internal {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x14, to) // Store the `to` argument.\n            mstore(0x34, amount) // Store the `amount` argument.\n            mstore(0x00, 0x095ea7b3000000000000000000000000) // `approve(address,uint256)`.\n            // Perform the approval, retrying upon failure.\n            if iszero(\n                and( // The arguments of `and` are evaluated from right to left.\n                    or(eq(mload(0x00), 1), iszero(returndatasize())), // Returned 1 or nothing.\n                    call(gas(), token, 0, 0x10, 0x44, 0x00, 0x20)\n                )\n            ) {\n                mstore(0x34, 0) // Store 0 for the `amount`.\n                mstore(0x00, 0x095ea7b3000000000000000000000000) // `approve(address,uint256)`.\n                pop(call(gas(), token, 0, 0x10, 0x44, codesize(), 0x00)) // Reset the approval.\n                mstore(0x34, amount) // Store back the original `amount`.\n                // Retry the approval, reverting upon failure.\n                if iszero(\n                    and(\n                        or(eq(mload(0x00), 1), iszero(returndatasize())), // Returned 1 or nothing.\n                        call(gas(), token, 0, 0x10, 0x44, 0x00, 0x20)\n                    )\n                ) {\n                    mstore(0x00, 0x3e3f8f73) // `ApproveFailed()`.\n                    revert(0x1c, 0x04)\n                }\n            }\n            mstore(0x34, 0) // Restore the part of the free memory pointer that was overwritten.\n        }\n    }\n\n    /// @dev Returns the amount of ERC20 `token` owned by `account`.\n    /// Returns zero if the `token` does not exist.\n    function balanceOf(address token, address account) internal view returns (uint256 amount) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x14, account) // Store the `account` argument.\n            mstore(0x00, 0x70a08231000000000000000000000000) // `balanceOf(address)`.\n            amount :=\n                mul( // The arguments of `mul` are evaluated from right to left.\n                    mload(0x20),\n                    and( // The arguments of `and` are evaluated from right to left.\n                        gt(returndatasize(), 0x1f), // At least 32 bytes returned.\n                        staticcall(gas(), token, 0x10, 0x24, 0x20, 0x20)\n                    )\n                )\n        }\n    }\n\n    /// @dev Sends `amount` of ERC20 `token` from `from` to `to`.\n    /// If the initial attempt fails, try to use Permit2 to transfer the token.\n    /// Reverts upon failure.\n    ///\n    /// The `from` account must have at least `amount` approved for the current contract to manage.\n    function safeTransferFrom2(address token, address from, address to, uint256 amount) internal {\n        if (!trySafeTransferFrom(token, from, to, amount)) {\n            permit2TransferFrom(token, from, to, amount);\n        }\n    }\n\n    /// @dev Sends `amount` of ERC20 `token` from `from` to `to` via Permit2.\n    /// Reverts upon failure.\n    function permit2TransferFrom(address token, address from, address to, uint256 amount)\n        internal\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let m := mload(0x40)\n            mstore(add(m, 0x74), shr(96, shl(96, token)))\n            mstore(add(m, 0x54), amount)\n            mstore(add(m, 0x34), to)\n            mstore(add(m, 0x20), shl(96, from))\n            // `transferFrom(address,address,uint160,address)`.\n            mstore(m, 0x36c78516000000000000000000000000)\n            let p := PERMIT2\n            let exists := eq(chainid(), 1)\n            if iszero(exists) { exists := iszero(iszero(extcodesize(p))) }\n            if iszero(and(call(gas(), p, 0, add(m, 0x10), 0x84, codesize(), 0x00), exists)) {\n                mstore(0x00, 0x7939f4248757f0fd) // `TransferFromFailed()` or `Permit2AmountOverflow()`.\n                revert(add(0x18, shl(2, iszero(iszero(shr(160, amount))))), 0x04)\n            }\n        }\n    }\n\n    /// @dev Permit a user to spend a given amount of\n    /// another user's tokens via native EIP-2612 permit if possible, falling\n    /// back to Permit2 if native permit fails or is not implemented on the token.\n    function permit2(\n        address token,\n        address owner,\n        address spender,\n        uint256 amount,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        bool success;\n        /// @solidity memory-safe-assembly\n        assembly {\n            for {} shl(96, xor(token, WETH9)) {} {\n                mstore(0x00, 0x3644e515) // `DOMAIN_SEPARATOR()`.\n                if iszero(\n                    and( // The arguments of `and` are evaluated from right to left.\n                        lt(iszero(mload(0x00)), eq(returndatasize(), 0x20)), // Returns 1 non-zero word.\n                        // Gas stipend to limit gas burn for tokens that don't refund gas when\n                        // an non-existing function is called. 5K should be enough for a SLOAD.\n                        staticcall(5000, token, 0x1c, 0x04, 0x00, 0x20)\n                    )\n                ) { break }\n                // After here, we can be sure that token is a contract.\n                let m := mload(0x40)\n                mstore(add(m, 0x34), spender)\n                mstore(add(m, 0x20), shl(96, owner))\n                mstore(add(m, 0x74), deadline)\n                if eq(mload(0x00), DAI_DOMAIN_SEPARATOR) {\n                    mstore(0x14, owner)\n                    mstore(0x00, 0x7ecebe00000000000000000000000000) // `nonces(address)`.\n                    mstore(add(m, 0x94), staticcall(gas(), token, 0x10, 0x24, add(m, 0x54), 0x20))\n                    mstore(m, 0x8fcbaf0c000000000000000000000000) // `IDAIPermit.permit`.\n                    // `nonces` is already at `add(m, 0x54)`.\n                    // `1` is already stored at `add(m, 0x94)`.\n                    mstore(add(m, 0xb4), and(0xff, v))\n                    mstore(add(m, 0xd4), r)\n                    mstore(add(m, 0xf4), s)\n                    success := call(gas(), token, 0, add(m, 0x10), 0x104, codesize(), 0x00)\n                    break\n                }\n                mstore(m, 0xd505accf000000000000000000000000) // `IERC20Permit.permit`.\n                mstore(add(m, 0x54), amount)\n                mstore(add(m, 0x94), and(0xff, v))\n                mstore(add(m, 0xb4), r)\n                mstore(add(m, 0xd4), s)\n                success := call(gas(), token, 0, add(m, 0x10), 0xe4, codesize(), 0x00)\n                break\n            }\n        }\n        if (!success) simplePermit2(token, owner, spender, amount, deadline, v, r, s);\n    }\n\n    /// @dev Simple permit on the Permit2 contract.\n    function simplePermit2(\n        address token,\n        address owner,\n        address spender,\n        uint256 amount,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let m := mload(0x40)\n            mstore(m, 0x927da105) // `allowance(address,address,address)`.\n            {\n                let addressMask := shr(96, not(0))\n                mstore(add(m, 0x20), and(addressMask, owner))\n                mstore(add(m, 0x40), and(addressMask, token))\n                mstore(add(m, 0x60), and(addressMask, spender))\n                mstore(add(m, 0xc0), and(addressMask, spender))\n            }\n            let p := mul(PERMIT2, iszero(shr(160, amount)))\n            if iszero(\n                and( // The arguments of `and` are evaluated from right to left.\n                    gt(returndatasize(), 0x5f), // Returns 3 words: `amount`, `expiration`, `nonce`.\n                    staticcall(gas(), p, add(m, 0x1c), 0x64, add(m, 0x60), 0x60)\n                )\n            ) {\n                mstore(0x00, 0x6b836e6b8757f0fd) // `Permit2Failed()` or `Permit2AmountOverflow()`.\n                revert(add(0x18, shl(2, iszero(p))), 0x04)\n            }\n            mstore(m, 0x2b67b570) // `Permit2.permit` (PermitSingle variant).\n            // `owner` is already `add(m, 0x20)`.\n            // `token` is already at `add(m, 0x40)`.\n            mstore(add(m, 0x60), amount)\n            mstore(add(m, 0x80), 0xffffffffffff) // `expiration = type(uint48).max`.\n            // `nonce` is already at `add(m, 0xa0)`.\n            // `spender` is already at `add(m, 0xc0)`.\n            mstore(add(m, 0xe0), deadline)\n            mstore(add(m, 0x100), 0x100) // `signature` offset.\n            mstore(add(m, 0x120), 0x41) // `signature` length.\n            mstore(add(m, 0x140), r)\n            mstore(add(m, 0x160), s)\n            mstore(add(m, 0x180), shl(248, v))\n            if iszero(call(gas(), p, 0, add(m, 0x1c), 0x184, codesize(), 0x00)) {\n                mstore(0x00, 0x6b836e6b) // `Permit2Failed()`.\n                revert(0x1c, 0x04)\n            }\n        }\n    }\n}\n"
      },
      "src/interfaces/IBentoBoxV1.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\nimport {IERC20} from \"@BoringSolidity/interfaces/IERC20.sol\";\nimport {Rebase} from \"@BoringSolidity/libraries/BoringRebase.sol\";\nimport {IStrategy} from \"/interfaces/IStrategy.sol\";\n\ninterface IFlashBorrower {\n    /// @notice The flashloan callback. `amount` + `fee` needs to repayed to msg.sender before this call returns.\n    /// @param sender The address of the invoker of this flashloan.\n    /// @param token The address of the token that is loaned.\n    /// @param amount of the `token` that is loaned.\n    /// @param fee The fee that needs to be paid on top for this loan. Needs to be the same as `token`.\n    /// @param data Additional data that was passed to the flashloan function.\n    function onFlashLoan(\n        address sender,\n        IERC20 token,\n        uint256 amount,\n        uint256 fee,\n        bytes calldata data\n    ) external;\n}\n\ninterface IBatchFlashBorrower {\n    /// @notice The callback for batched flashloans. Every amount + fee needs to repayed to msg.sender before this call returns.\n    /// @param sender The address of the invoker of this flashloan.\n    /// @param tokens Array of addresses for ERC-20 tokens that is loaned.\n    /// @param amounts A one-to-one map to `tokens` that is loaned.\n    /// @param fees A one-to-one map to `tokens` that needs to be paid on top for each loan. Needs to be the same token.\n    /// @param data Additional data that was passed to the flashloan function.\n    function onBatchFlashLoan(\n        address sender,\n        IERC20[] calldata tokens,\n        uint256[] calldata amounts,\n        uint256[] calldata fees,\n        bytes calldata data\n    ) external;\n}\n\ninterface IBentoBoxV1 {\n    function balanceOf(IERC20, address) external view returns (uint256);\n\n    function batch(bytes[] calldata calls, bool revertOnFail) external payable returns (bool[] memory successes, bytes[] memory results);\n\n    function batchFlashLoan(\n        IBatchFlashBorrower borrower,\n        address[] calldata receivers,\n        IERC20[] calldata tokens,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n\n    function claimOwnership() external;\n\n    function flashLoan(\n        IFlashBorrower borrower,\n        address receiver,\n        IERC20 token,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    function deploy(\n        address masterContract,\n        bytes calldata data,\n        bool useCreate2\n    ) external payable returns (address);\n\n    function deposit(\n        IERC20 token_,\n        address from,\n        address to,\n        uint256 amount,\n        uint256 share\n    ) external payable returns (uint256 amountOut, uint256 shareOut);\n\n    function harvest(\n        IERC20 token,\n        bool balance,\n        uint256 maxChangeAmount\n    ) external;\n\n    function masterContractApproved(address, address) external view returns (bool);\n\n    function masterContractOf(address) external view returns (address);\n\n    function nonces(address) external view returns (uint256);\n\n    function owner() external view returns (address);\n\n    function pendingOwner() external view returns (address);\n\n    function pendingStrategy(IERC20) external view returns (IStrategy);\n\n    function permitToken(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 amount,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    function registerProtocol() external;\n\n    function setMasterContractApproval(\n        address user,\n        address masterContract,\n        bool approved,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    function setStrategy(IERC20 token, IStrategy newStrategy) external;\n\n    function setStrategyTargetPercentage(IERC20 token, uint64 targetPercentage_) external;\n\n    function strategy(IERC20) external view returns (IStrategy);\n\n    function strategyData(IERC20)\n        external\n        view\n        returns (\n            uint64 strategyStartDate,\n            uint64 targetPercentage,\n            uint128 balance\n        );\n\n    function toAmount(\n        IERC20 token,\n        uint256 share,\n        bool roundUp\n    ) external view returns (uint256 amount);\n\n    function toShare(\n        IERC20 token,\n        uint256 amount,\n        bool roundUp\n    ) external view returns (uint256 share);\n\n    function totals(IERC20) external view returns (Rebase memory totals_);\n\n    function transfer(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 share\n    ) external;\n\n    function transferMultiple(\n        IERC20 token,\n        address from,\n        address[] calldata tos,\n        uint256[] calldata shares\n    ) external;\n\n    function transferOwnership(\n        address newOwner,\n        bool direct,\n        bool renounce\n    ) external;\n\n    function whitelistMasterContract(address masterContract, bool approved) external;\n\n    function whitelistedMasterContracts(address) external view returns (bool);\n\n    function withdraw(\n        IERC20 token_,\n        address from,\n        address to,\n        uint256 amount,\n        uint256 share\n    ) external returns (uint256 amountOut, uint256 shareOut);\n}\n"
      },
      "src/interfaces/ICauldronV4GmxV2.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\nimport {ICauldronV4} from \"/interfaces/ICauldronV4.sol\";\nimport {IGmCauldronOrderAgent, IGmRouterOrder} from \"/periphery/GmxV2CauldronOrderAgent.sol\";\n\ninterface ICauldronV4GmxV2 is ICauldronV4 {\n    function closeOrder(address user) external;\n\n    function orders(address user) external view returns (IGmRouterOrder);\n\n    function orderAgent() external view returns (IGmCauldronOrderAgent);\n}\n"
      },
      "src/interfaces/ICauldronV4.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\nimport {ICauldronV3} from \"/interfaces/ICauldronV3.sol\";\n\ninterface ICauldronV4 is ICauldronV3 {\n    function setBlacklistedCallee(address callee, bool blacklisted) external;\n\n    function blacklistedCallees(address callee) external view returns (bool);\n\n    function isSolvent(address user) external view returns (bool);\n}\n"
      },
      "src/mixins/OperatableV2.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\nimport {Owned} from \"@solmate/auth/Owned.sol\";\n\n/// @title OperatableV2\n/// @notice OperatableV2 is a contract that allows operator management.\n/// The difference with OperatableV1 apart from using solmate `Owned` vs `BoringOwnable` is that\n/// the constructor is taking in the owner except of using msg.sender.\n/// This allows ensuring that the owner is right one.\n/// For example, when deploying from a CREATE2 factory, the msg.sender would the factory address\n/// which is usually not what we want.\ncontract OperatableV2 is Owned {\n    event OperatorChanged(address indexed, bool);\n    error NotAllowedOperator();\n\n    mapping(address => bool) public operators;\n\n    constructor(address _owner) Owned(_owner) {}\n\n    modifier onlyOperators() {\n        if (!operators[msg.sender] && msg.sender != owner) {\n            revert NotAllowedOperator();\n        }\n        _;\n    }\n\n    function setOperator(address operator, bool status) external onlyOwner {\n        operators[operator] = status;\n        emit OperatorChanged(operator, status);\n    }\n}\n"
      },
      "src/interfaces/IOracle.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\ninterface IOracle {\n    function decimals() external view returns (uint8);\n\n    function get(bytes calldata data) external returns (bool success, uint256 rate);\n\n    function peek(bytes calldata data) external view returns (bool success, uint256 rate);\n\n    function peekSpot(bytes calldata data) external view returns (uint256 rate);\n\n    function symbol(bytes calldata data) external view returns (string memory);\n\n    function name(bytes calldata data) external view returns (string memory);\n}\n"
      },
      "src/interfaces/IGmxV2.sol": {
        "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity >=0.8.0;\n\n// @title Deposit\n// @dev Struct for deposits\ninterface IGmxV2Deposit {\n    /** @dev CreateDepositParams struct used in createDeposit to avoid stack\n     * too deep errors\n     *\n     * @param receiver the address to send the market tokens to\n     * @param callbackContract the callback contract\n     * @param uiFeeReceiver the ui fee receiver\n     * @param market the market to deposit into\n     * @param minMarketTokens the minimum acceptable number of liquidity tokens\n     * @param shouldUnwrapNativeToken whether to unwrap the native token when\n     * sending funds back to the user in case the deposit gets cancelled\n     * @param executionFee the execution fee for keepers\n     * @param callbackGasLimit the gas limit for the callbackContract\n     */\n    struct CreateDepositParams {\n        address receiver;\n        address callbackContract;\n        address uiFeeReceiver;\n        address market;\n        address initialLongToken;\n        address initialShortToken;\n        address[] longTokenSwapPath;\n        address[] shortTokenSwapPath;\n        uint256 minMarketTokens;\n        bool shouldUnwrapNativeToken;\n        uint256 executionFee;\n        uint256 callbackGasLimit;\n    }\n\n    // @dev there is a limit on the number of fields a struct can have when being passed\n    // or returned as a memory variable which can cause \"Stack too deep\" errors\n    // use sub-structs to avoid this issue\n    // @param addresses address values\n    // @param numbers number values\n    // @param flags boolean values\n    struct Props {\n        Addresses addresses;\n        Numbers numbers;\n        Flags flags;\n    }\n\n    // @param account the account depositing liquidity\n    // @param receiver the address to send the liquidity tokens to\n    // @param callbackContract the callback contract\n    // @param uiFeeReceiver the ui fee receiver\n    // @param market the market to deposit to\n    struct Addresses {\n        address account;\n        address receiver;\n        address callbackContract;\n        address uiFeeReceiver;\n        address market;\n        address initialLongToken;\n        address initialShortToken;\n        address[] longTokenSwapPath;\n        address[] shortTokenSwapPath;\n    }\n\n    // @param initialLongTokenAmount the amount of long tokens to deposit\n    // @param initialShortTokenAmount the amount of short tokens to deposit\n    // @param minMarketTokens the minimum acceptable number of liquidity tokens\n    // @param updatedAtBlock the block that the deposit was last updated at\n    // sending funds back to the user in case the deposit gets cancelled\n    // @param executionFee the execution fee for keepers\n    // @param callbackGasLimit the gas limit for the callbackContract\n    struct Numbers {\n        uint256 initialLongTokenAmount;\n        uint256 initialShortTokenAmount;\n        uint256 minMarketTokens;\n        uint256 updatedAtBlock;\n        uint256 updatedAtTime;\n        uint256 executionFee;\n        uint256 callbackGasLimit;\n    }\n\n    // @param shouldUnwrapNativeToken whether to unwrap the native token when\n    struct Flags {\n        bool shouldUnwrapNativeToken;\n    }\n}\n\ninterface IGmxV2Withdrawal {\n    /**\n     * @param receiver The address that will receive the withdrawal tokens.\n     * @param callbackContract The contract that will be called back.\n     * @param market The market on which the withdrawal will be executed.\n     * @param minLongTokenAmount The minimum amount of long tokens that must be withdrawn.\n     * @param minShortTokenAmount The minimum amount of short tokens that must be withdrawn.\n     * @param shouldUnwrapNativeToken Whether the native token should be unwrapped when executing the withdrawal.\n     * @param executionFee The execution fee for the withdrawal.\n     * @param callbackGasLimit The gas limit for calling the callback contract.\n     */\n    struct CreateWithdrawalParams {\n        address receiver;\n        address callbackContract;\n        address uiFeeReceiver;\n        address market;\n        address[] longTokenSwapPath;\n        address[] shortTokenSwapPath;\n        uint256 minLongTokenAmount;\n        uint256 minShortTokenAmount;\n        bool shouldUnwrapNativeToken;\n        uint256 executionFee;\n        uint256 callbackGasLimit;\n    }\n\n    // @dev there is a limit on the number of fields a struct can have when being passed\n    // or returned as a memory variable which can cause \"Stack too deep\" errors\n    // use sub-structs to avoid this issue\n    // @param addresses address values\n    // @param numbers number values\n    // @param flags boolean values\n    struct Props {\n        Addresses addresses;\n        Numbers numbers;\n        Flags flags;\n    }\n\n    // @param account The account to withdraw for.\n    // @param receiver The address that will receive the withdrawn tokens.\n    // @param callbackContract The contract that will be called back.\n    // @param uiFeeReceiver The ui fee receiver.\n    // @param market The market on which the withdrawal will be executed.\n    struct Addresses {\n        address account;\n        address receiver;\n        address callbackContract;\n        address uiFeeReceiver;\n        address market;\n        address[] longTokenSwapPath;\n        address[] shortTokenSwapPath;\n    }\n\n    // @param marketTokenAmount The amount of market tokens that will be withdrawn.\n    // @param minLongTokenAmount The minimum amount of long tokens that must be withdrawn.\n    // @param minShortTokenAmount The minimum amount of short tokens that must be withdrawn.\n    // @param updatedAtBlock The block at which the withdrawal was last updated.\n    // @param executionFee The execution fee for the withdrawal.\n    // @param callbackGasLimit The gas limit for calling the callback contract.\n    struct Numbers {\n        uint256 marketTokenAmount;\n        uint256 minLongTokenAmount;\n        uint256 minShortTokenAmount;\n        uint256 updatedAtBlock;\n        uint256 updatedAtTime;\n        uint256 executionFee;\n        uint256 callbackGasLimit;\n    }\n\n    // @param shouldUnwrapNativeToken whether to unwrap the native token when\n    struct Flags {\n        bool shouldUnwrapNativeToken;\n    }\n}\n\ninterface IGmxV2EventUtils {\n    struct EmitPositionDecreaseParams {\n        bytes32 key;\n        address account;\n        address market;\n        address collateralToken;\n        bool isLong;\n    }\n\n    struct EventLogData {\n        AddressItems addressItems;\n        UintItems uintItems;\n        IntItems intItems;\n        BoolItems boolItems;\n        Bytes32Items bytes32Items;\n        BytesItems bytesItems;\n        StringItems stringItems;\n    }\n\n    struct AddressItems {\n        AddressKeyValue[] items;\n        AddressArrayKeyValue[] arrayItems;\n    }\n\n    struct UintItems {\n        UintKeyValue[] items;\n        UintArrayKeyValue[] arrayItems;\n    }\n\n    struct IntItems {\n        IntKeyValue[] items;\n        IntArrayKeyValue[] arrayItems;\n    }\n\n    struct BoolItems {\n        BoolKeyValue[] items;\n        BoolArrayKeyValue[] arrayItems;\n    }\n\n    struct Bytes32Items {\n        Bytes32KeyValue[] items;\n        Bytes32ArrayKeyValue[] arrayItems;\n    }\n\n    struct BytesItems {\n        BytesKeyValue[] items;\n        BytesArrayKeyValue[] arrayItems;\n    }\n\n    struct StringItems {\n        StringKeyValue[] items;\n        StringArrayKeyValue[] arrayItems;\n    }\n\n    struct AddressKeyValue {\n        string key;\n        address value;\n    }\n\n    struct AddressArrayKeyValue {\n        string key;\n        address[] value;\n    }\n\n    struct UintKeyValue {\n        string key;\n        uint256 value;\n    }\n\n    struct UintArrayKeyValue {\n        string key;\n        uint256[] value;\n    }\n\n    struct IntKeyValue {\n        string key;\n        int256 value;\n    }\n\n    struct IntArrayKeyValue {\n        string key;\n        int256[] value;\n    }\n\n    struct BoolKeyValue {\n        string key;\n        bool value;\n    }\n\n    struct BoolArrayKeyValue {\n        string key;\n        bool[] value;\n    }\n\n    struct Bytes32KeyValue {\n        string key;\n        bytes32 value;\n    }\n\n    struct Bytes32ArrayKeyValue {\n        string key;\n        bytes32[] value;\n    }\n\n    struct BytesKeyValue {\n        string key;\n        bytes value;\n    }\n\n    struct BytesArrayKeyValue {\n        string key;\n        bytes[] value;\n    }\n\n    struct StringKeyValue {\n        string key;\n        string value;\n    }\n\n    struct StringArrayKeyValue {\n        string key;\n        string[] value;\n    }\n}\n\ninterface IGmxV2Market {\n    // @param marketToken address of the market token for the market\n    // @param indexToken address of the index token for the market\n    // @param longToken address of the long token for the market\n    // @param shortToken address of the short token for the market\n    // @param data for any additional data\n    struct Props {\n        address marketToken;\n        address indexToken;\n        address longToken;\n        address shortToken;\n    }\n}\n\n// @title Price\n// @dev Struct for prices\ninterface IGmxV2Price {\n    // @param min the min price\n    // @param max the max price\n    struct Props {\n        uint256 min;\n        uint256 max;\n    }\n}\n\n// @title MarketPoolInfo\ninterface IGmxV2MarketPoolValueInfo {\n    // @dev struct to avoid stack too deep errors for the getPoolValue call\n    // @param value the pool value\n    // @param longTokenAmount the amount of long token in the pool\n    // @param shortTokenAmount the amount of short token in the pool\n    // @param longTokenUsd the USD value of the long tokens in the pool\n    // @param shortTokenUsd the USD value of the short tokens in the pool\n    // @param totalBorrowingFees the total pending borrowing fees for the market\n    // @param borrowingFeePoolFactor the pool factor for borrowing fees\n    // @param impactPoolAmount the amount of tokens in the impact pool\n    // @param longPnl the pending pnl of long positions\n    // @param shortPnl the pending pnl of short positions\n    // @param netPnl the net pnl of long and short positions\n    struct Props {\n        int256 poolValue;\n        int256 longPnl;\n        int256 shortPnl;\n        int256 netPnl;\n        uint256 longTokenAmount;\n        uint256 shortTokenAmount;\n        uint256 longTokenUsd;\n        uint256 shortTokenUsd;\n        uint256 totalBorrowingFees;\n        uint256 borrowingFeePoolFactor;\n        uint256 impactPoolAmount;\n    }\n}\n\n// @title IDepositCallbackReceiver\n// @dev interface for a deposit callback contract\ninterface IGmxV2DepositCallbackReceiver {\n    // @dev called after a deposit execution\n    // @param key the key of the deposit\n    // @param deposit the deposit that was executed\n    function afterDepositExecution(\n        bytes32 key,\n        IGmxV2Deposit.Props memory deposit,\n        IGmxV2EventUtils.EventLogData memory eventData\n    ) external;\n\n    // @dev called after a deposit cancellation\n    // @param key the key of the deposit\n    // @param deposit the deposit that was cancelled\n    function afterDepositCancellation(\n        bytes32 key,\n        IGmxV2Deposit.Props memory deposit,\n        IGmxV2EventUtils.EventLogData memory eventData\n    ) external;\n}\n\n// @title IWithdrawalCallbackReceiver\n// @dev interface for a withdrawal callback contract\ninterface IGmxV2WithdrawalCallbackReceiver {\n    // @dev called after a withdrawal execution\n    // @param key the key of the withdrawal\n    // @param withdrawal the withdrawal that was executed\n    function afterWithdrawalExecution(\n        bytes32 key,\n        IGmxV2Withdrawal.Props memory withdrawal,\n        IGmxV2EventUtils.EventLogData memory eventData\n    ) external;\n\n    // @dev called after a withdrawal cancellation\n    // @param key the key of the withdrawal\n    // @param withdrawal the withdrawal that was cancelled\n    function afterWithdrawalCancellation(\n        bytes32 key,\n        IGmxV2Withdrawal.Props memory withdrawal,\n        IGmxV2EventUtils.EventLogData memory eventData\n    ) external;\n}\n\ninterface IGmxDataStore {\n    function containsBytes32(bytes32 setKey, bytes32 value) external view returns (bool);\n\n    function roleStore() external view returns (IGmxRoleStore);\n\n    function getBool(bytes32 key) external view returns (bool);\n}\n\ninterface IGmxRoleStore {\n    function hasRole(address account, bytes32 roleKey) external view returns (bool);\n}\n\ninterface IGmxReader {\n    function getMarket(address dataStore, address key) external view returns (IGmxV2Market.Props memory);\n\n    // @dev get the market token's price\n    // @param dataStore DataStore\n    // @param market the market to check\n    // @param longTokenPrice the price of the long token\n    // @param shortTokenPrice the price of the short token\n    // @param indexTokenPrice the price of the index token\n    // @param maximize whether to maximize or minimize the market token price\n    // @return returns (the market token's price, MarketPoolValueInfo.Props)\n    function getMarketTokenPrice(\n        address dataStore,\n        IGmxV2Market.Props memory market,\n        IGmxV2Price.Props memory indexTokenPrice,\n        IGmxV2Price.Props memory longTokenPrice,\n        IGmxV2Price.Props memory shortTokenPrice,\n        bytes32 pnlFactorType,\n        bool maximize\n    ) external view returns (int256, IGmxV2MarketPoolValueInfo.Props memory);\n}\n\ninterface IGmxV2ExchangeRouter {\n    function dataStore() external view returns (address);\n\n    function sendWnt(address receiver, uint256 amount) external payable;\n\n    function sendTokens(address token, address receiver, uint256 amount) external payable;\n\n    function depositHandler() external view returns (address);\n\n    function withdrawalHandler() external view returns (address);\n\n    function createDeposit(IGmxV2Deposit.CreateDepositParams calldata params) external payable returns (bytes32);\n\n    function createWithdrawal(IGmxV2Withdrawal.CreateWithdrawalParams calldata params) external payable returns (bytes32);\n\n    function cancelWithdrawal(bytes32 key) external payable;\n\n    function cancelDeposit(bytes32 key) external payable;\n}\n\ninterface IGmxV2DepositHandler {\n    function depositVault() external view returns (address);\n\n    function dataStore() external view returns (address);\n}\n\ninterface IGmxV2WithdrawalHandler {\n    function withdrawalVault() external view returns (address);\n}\n"
      },
      "src/interfaces/IWETH.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\nimport {IERC20} from \"@BoringSolidity/interfaces/IERC20.sol\";\n\ninterface IWETH is IERC20 {\n    function deposit() external payable;\n\n    function withdraw(uint256) external;\n}\n\ninterface IWETHAlike is IWETH {}\n"
      },
      "lib/BoringSolidity/contracts/libraries/BoringRebase.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport {BoringMath, BoringMath128} from \"./BoringMath.sol\";\n\nstruct Rebase {\n    uint128 elastic;\n    uint128 base;\n}\n\n/// @notice A rebasing library using overflow-/underflow-safe math.\nlibrary RebaseLibrary {\n    using BoringMath for uint256;\n    using BoringMath128 for uint128;\n\n    /// @notice Calculates the base value in relationship to `elastic` and `total`.\n    function toBase(\n        Rebase memory total,\n        uint256 elastic,\n        bool roundUp\n    ) internal pure returns (uint256 base) {\n        if (total.elastic == 0) {\n            base = elastic;\n        } else {\n            base = (elastic * total.base) / total.elastic;\n            if (roundUp && (base * total.elastic) / total.base < elastic) {\n                base++;\n            }\n        }\n    }\n\n    /// @notice Calculates the elastic value in relationship to `base` and `total`.\n    function toElastic(\n        Rebase memory total,\n        uint256 base,\n        bool roundUp\n    ) internal pure returns (uint256 elastic) {\n        if (total.base == 0) {\n            elastic = base;\n        } else {\n            elastic = (base * total.elastic) / total.base;\n            if (roundUp && (elastic * total.base) / total.elastic < base) {\n                elastic++;\n            }\n        }\n    }\n\n    /// @notice Add `elastic` to `total` and doubles `total.base`.\n    /// @return (Rebase) The new total.\n    /// @return base in relationship to `elastic`.\n    function add(\n        Rebase memory total,\n        uint256 elastic,\n        bool roundUp\n    ) internal pure returns (Rebase memory, uint256 base) {\n        base = toBase(total, elastic, roundUp);\n        total.elastic += elastic.to128();\n        total.base += base.to128();\n        return (total, base);\n    }\n\n    /// @notice Sub `base` from `total` and update `total.elastic`.\n    /// @return (Rebase) The new total.\n    /// @return elastic in relationship to `base`.\n    function sub(\n        Rebase memory total,\n        uint256 base,\n        bool roundUp\n    ) internal pure returns (Rebase memory, uint256 elastic) {\n        elastic = toElastic(total, base, roundUp);\n        total.elastic -= elastic.to128();\n        total.base -= base.to128();\n        return (total, elastic);\n    }\n\n    /// @notice Add `elastic` and `base` to `total`.\n    function add(\n        Rebase memory total,\n        uint256 elastic,\n        uint256 base\n    ) internal pure returns (Rebase memory) {\n        total.elastic += elastic.to128();\n        total.base += base.to128();\n        return total;\n    }\n\n    /// @notice Subtract `elastic` and `base` to `total`.\n    function sub(\n        Rebase memory total,\n        uint256 elastic,\n        uint256 base\n    ) internal pure returns (Rebase memory) {\n        total.elastic -= elastic.to128();\n        total.base -= base.to128();\n        return total;\n    }\n\n    /// @notice Add `elastic` to `total` and update storage.\n    /// @return newElastic Returns updated `elastic`.\n    function addElastic(Rebase storage total, uint256 elastic) internal returns (uint256 newElastic) {\n        newElastic = total.elastic += elastic.to128();\n    }\n\n    /// @notice Subtract `elastic` from `total` and update storage.\n    /// @return newElastic Returns updated `elastic`.\n    function subElastic(Rebase storage total, uint256 elastic) internal returns (uint256 newElastic) {\n        newElastic = total.elastic -= elastic.to128();\n    }\n}\n"
      },
      "src/interfaces/IStrategy.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\ninterface IStrategy {\n    function skim(uint256 amount) external;\n\n    function harvest(uint256 balance, address sender) external returns (int256 amountAdded);\n\n    function withdraw(uint256 amount) external returns (uint256 actualAmount);\n\n    function exit(uint256 balance) external returns (int256 amountAdded);\n}\n"
      },
      "src/interfaces/ICauldronV3.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\nimport {ICauldronV2} from \"/interfaces/ICauldronV2.sol\";\n\ninterface ICauldronV3 is ICauldronV2 {\n    function borrowLimit() external view returns (uint128 total, uint128 borrowPartPerAddres);\n\n    function changeInterestRate(uint64 newInterestRate) external;\n\n    function changeBorrowLimit(uint128 newBorrowLimit, uint128 perAddressPart) external;\n\n    function liquidate(\n        address[] calldata users,\n        uint256[] calldata maxBorrowParts,\n        address to,\n        address swapper,\n        bytes calldata swapperData\n    ) external;\n}\n"
      },
      "lib/solmate/src/auth/Owned.sol": {
        "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\n/// @notice Simple single owner authorization mixin.\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/auth/Owned.sol)\nabstract contract Owned {\n    /*//////////////////////////////////////////////////////////////\n                                 EVENTS\n    //////////////////////////////////////////////////////////////*/\n\n    event OwnershipTransferred(address indexed user, address indexed newOwner);\n\n    /*//////////////////////////////////////////////////////////////\n                            OWNERSHIP STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    address public owner;\n\n    modifier onlyOwner() virtual {\n        require(msg.sender == owner, \"UNAUTHORIZED\");\n\n        _;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                               CONSTRUCTOR\n    //////////////////////////////////////////////////////////////*/\n\n    constructor(address _owner) {\n        owner = _owner;\n\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                             OWNERSHIP LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        owner = newOwner;\n\n        emit OwnershipTransferred(msg.sender, newOwner);\n    }\n}\n"
      },
      "lib/BoringSolidity/contracts/libraries/BoringMath.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\nlibrary BoringMath {\n    error ErrOverflow();\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    function to32(uint256 a) internal pure returns (uint32) {\n        if (a > type(uint32).max) {\n            revert ErrOverflow();\n        }\n        return uint32(a);\n    }\n\n    function to40(uint256 a) internal pure returns (uint40) {\n        if (a > type(uint40).max) {\n            revert ErrOverflow();\n        }\n        return uint40(a);\n    }\n\n    function to64(uint256 a) internal pure returns (uint64) {\n        if (a > type(uint64).max) {\n            revert ErrOverflow();\n        }\n        return uint64(a);\n    }\n\n    function to112(uint256 a) internal pure returns (uint112) {\n        if (a > type(uint112).max) {\n            revert ErrOverflow();\n        }\n        return uint112(a);\n    }\n\n    function to128(uint256 a) internal pure returns (uint128) {\n        if (a > type(uint128).max) {\n            revert ErrOverflow();\n        }\n        return uint128(a);\n    }\n\n    function to208(uint256 a) internal pure returns (uint208) {\n        if (a > type(uint208).max) {\n            revert ErrOverflow();\n        }\n        return uint208(a);\n    }\n\n    function to216(uint256 a) internal pure returns (uint216) {\n        if (a > type(uint216).max) {\n            revert ErrOverflow();\n        }\n        return uint216(a);\n    }\n\n    function to224(uint256 a) internal pure returns (uint224) {\n        if (a > type(uint224).max) {\n            revert ErrOverflow();\n        }\n        return uint224(a);\n    }\n}\n\nlibrary BoringMath32 {\n    function add(uint32 a, uint32 b) internal pure returns (uint32) {\n        return a + b;\n    }\n\n    function sub(uint32 a, uint32 b) internal pure returns (uint32) {\n        return a - b;\n    }\n\n    function mul(uint32 a, uint32 b) internal pure returns (uint32) {\n        return a * b;\n    }\n\n    function div(uint32 a, uint32 b) internal pure returns (uint32) {\n        return a / b;\n    }\n}\n\nlibrary BoringMath64 {\n    function add(uint64 a, uint64 b) internal pure returns (uint64) {\n        return a + b;\n    }\n\n    function sub(uint64 a, uint64 b) internal pure returns (uint64) {\n        return a - b;\n    }\n\n    function mul(uint64 a, uint64 b) internal pure returns (uint64) {\n        return a * b;\n    }\n\n    function div(uint64 a, uint64 b) internal pure returns (uint64) {\n        return a / b;\n    }\n}\n\nlibrary BoringMath112 {\n    function add(uint112 a, uint112 b) internal pure returns (uint112) {\n        return a + b;\n    }\n\n    function sub(uint112 a, uint112 b) internal pure returns (uint112) {\n        return a - b;\n    }\n\n    function mul(uint112 a, uint112 b) internal pure returns (uint112) {\n        return a * b;\n    }\n\n    function div(uint112 a, uint112 b) internal pure returns (uint112) {\n        return a / b;\n    }\n}\n\nlibrary BoringMath128 {\n    function add(uint128 a, uint128 b) internal pure returns (uint128) {\n        return a + b;\n    }\n\n    function sub(uint128 a, uint128 b) internal pure returns (uint128) {\n        return a - b;\n    }\n\n    function mul(uint128 a, uint128 b) internal pure returns (uint128) {\n        return a * b;\n    }\n\n    function div(uint128 a, uint128 b) internal pure returns (uint128) {\n        return a / b;\n    }\n}\n\nlibrary BoringMath224 {\n    function add(uint224 a, uint224 b) internal pure returns (uint224) {\n        return a + b;\n    }\n\n    function sub(uint224 a, uint224 b) internal pure returns (uint224) {\n        return a - b;\n    }\n\n    function mul(uint224 a, uint224 b) internal pure returns (uint224) {\n        return a * b;\n    }\n\n    function div(uint224 a, uint224 b) internal pure returns (uint224) {\n        return a / b;\n    }\n}\n"
      },
      "src/interfaces/ICauldronV2.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\nimport {IERC20} from \"@BoringSolidity/interfaces/IERC20.sol\";\nimport {Rebase} from \"@BoringSolidity/libraries/BoringRebase.sol\";\nimport {IOracle} from \"/interfaces/IOracle.sol\";\n\ninterface ICauldronV2 {\n    function oracle() external view returns (IOracle);\n\n    function oracleData() external view returns (bytes memory);\n\n    function accrueInfo() external view returns (uint64, uint128, uint64);\n\n    function BORROW_OPENING_FEE() external view returns (uint256);\n\n    function COLLATERIZATION_RATE() external view returns (uint256);\n\n    function LIQUIDATION_MULTIPLIER() external view returns (uint256);\n\n    function totalCollateralShare() external view returns (uint256);\n\n    function bentoBox() external view returns (address);\n\n    function feeTo() external view returns (address);\n\n    function masterContract() external view returns (ICauldronV2);\n\n    function collateral() external view returns (IERC20);\n\n    function setFeeTo(address newFeeTo) external;\n\n    function accrue() external;\n\n    function totalBorrow() external view returns (Rebase memory);\n\n    function userBorrowPart(address account) external view returns (uint256);\n\n    function userCollateralShare(address account) external view returns (uint256);\n\n    function withdrawFees() external;\n\n    function cook(\n        uint8[] calldata actions,\n        uint256[] calldata values,\n        bytes[] calldata datas\n    ) external payable returns (uint256 value1, uint256 value2);\n\n    function addCollateral(address to, bool skim, uint256 share) external;\n\n    function removeCollateral(address to, uint256 share) external;\n\n    function borrow(address to, uint256 amount) external returns (uint256 part, uint256 share);\n\n    function repay(address to, bool skim, uint256 part) external returns (uint256 amount);\n\n    function reduceSupply(uint256 amount) external;\n\n    function magicInternetMoney() external view returns (IERC20);\n\n    function liquidate(address[] calldata users, uint256[] calldata maxBorrowParts, address to, address swapper) external;\n\n    function updateExchangeRate() external returns (bool updated, uint256 rate);\n\n    function exchangeRate() external view returns (uint256 rate);\n\n    function init(bytes calldata data) external payable;\n}\n"
      }
    },
    "settings": {
      "remappings": [
        "/=src/",
        "forge-std/=lib/forge-std/src/",
        "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
        "@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
        "@BoringSolidity/=lib/BoringSolidity/contracts/",
        "@solady/=lib/solady/src/",
        "@solmate/=lib/solmate/src/",
        "@excessivelySafeCall/=lib/ExcessivelySafeCall/src/",
        "@safe-contracts/=lib/safe-contracts/contracts/",
        "@fuzzlib/=lib/fuzzlib/src/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 400
      },
      "metadata": {
        "useLiteralContent": false,
        "bytecodeHash": "ipfs",
        "appendCBOR": true
      },
      "outputSelection": {
        "*": {
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "evmVersion": "shanghai",
      "viaIR": false,
      "libraries": {}
    }
  },
  "compiler": "0.8.26+commit.8a97fa7a"
}