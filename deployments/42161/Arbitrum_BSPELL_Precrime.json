{
  "address": "0x662a3FeB3e0444b9101B0E7623459Ee56F4126D6",
  "abi": [
    {
      "type": "constructor",
      "inputs": [
        {
          "name": "_owner",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "_localChainId",
          "type": "uint16",
          "internalType": "uint16"
        },
        {
          "name": "_oftView",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "_maxSize",
          "type": "uint64",
          "internalType": "uint64"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "CODE_MISS_SIMULATE_RESULT",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint16",
          "internalType": "uint16"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "CODE_PACKETS_OVERSIZE",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint16",
          "internalType": "uint16"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "CODE_PACKETS_UNSORTED",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint16",
          "internalType": "uint16"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "CODE_PRECRIME_FAILURE",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint16",
          "internalType": "uint16"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "CODE_SUCCESS",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint16",
          "internalType": "uint16"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "CONFIG_VERSION",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint16",
          "internalType": "uint16"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "PRECRIME_VERSION",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint16",
          "internalType": "uint16"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getConfig",
      "inputs": [
        {
          "name": "_packets",
          "type": "tuple[]",
          "internalType": "struct IPreCrimeView.Packet[]",
          "components": [
            {
              "name": "srcChainId",
              "type": "uint16",
              "internalType": "uint16"
            },
            {
              "name": "srcAddress",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "nonce",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "payload",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "localChainId",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint16",
          "internalType": "uint16"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "maxBatchSize",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint64",
          "internalType": "uint64"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "oftView",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "contract IOFTV2View"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "owner",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "precrime",
      "inputs": [
        {
          "name": "_packets",
          "type": "tuple[]",
          "internalType": "struct IPreCrimeView.Packet[]",
          "components": [
            {
              "name": "srcChainId",
              "type": "uint16",
              "internalType": "uint16"
            },
            {
              "name": "srcAddress",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "nonce",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "payload",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        },
        {
          "name": "_simulation",
          "type": "bytes[]",
          "internalType": "bytes[]"
        }
      ],
      "outputs": [
        {
          "name": "code",
          "type": "uint16",
          "internalType": "uint16"
        },
        {
          "name": "reason",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "remoteChainIds",
      "inputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "uint16",
          "internalType": "uint16"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "remotePrecrimeAddresses",
      "inputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "setMaxBatchSize",
      "inputs": [
        {
          "name": "_maxSize",
          "type": "uint64",
          "internalType": "uint64"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "setRemotePrecrimeAddresses",
      "inputs": [
        {
          "name": "_remoteChainIds",
          "type": "uint16[]",
          "internalType": "uint16[]"
        },
        {
          "name": "_remotePrecrimeAddresses",
          "type": "bytes32[]",
          "internalType": "bytes32[]"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "simulate",
      "inputs": [
        {
          "name": "_packets",
          "type": "tuple[]",
          "internalType": "struct IPreCrimeView.Packet[]",
          "components": [
            {
              "name": "srcChainId",
              "type": "uint16",
              "internalType": "uint16"
            },
            {
              "name": "srcAddress",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "nonce",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "payload",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        }
      ],
      "outputs": [
        {
          "name": "code",
          "type": "uint16",
          "internalType": "uint16"
        },
        {
          "name": "data",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "transferOwnership",
      "inputs": [
        {
          "name": "newOwner",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "version",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint16",
          "internalType": "uint16"
        }
      ],
      "stateMutability": "pure"
    },
    {
      "type": "event",
      "name": "OwnershipTransferred",
      "inputs": [
        {
          "name": "user",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "newOwner",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "error",
      "name": "ErrInvalidSize",
      "inputs": []
    }
  ],
  "bytecode": "0x60a060405234801561000f575f80fd5b506040516118e53803806118e583398101604081905261002e916100e4565b5f80546001600160a01b0319166001600160a01b03861690811782556040518692907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3505f805461ffff909416600160a01b0261ffff60a01b19909416939093179092556001600160a01b0316608052600380546001600160401b039092166001600160401b03199092169190911790555061014b565b80516001600160a01b03811681146100df575f80fd5b919050565b5f805f80608085870312156100f7575f80fd5b610100856100c9565b9350602085015161ffff81168114610116575f80fd5b9250610124604086016100c9565b60608601519092506001600160401b0381168114610140575f80fd5b939692955090935050565b60805161176661017f5f395f818161013001528181610c7401528181610d5201528181610dea0152610ec101526117665ff3fe608060405234801561000f575f80fd5b5060043610610127575f3560e01c80638da5cb5b116100a9578063c6be4b9b1161006e578063c6be4b9b14610276578063ec67df301461027e578063f0099e2a1461029f578063f2fde38b146102b2578063f95d1404146102c5575f80fd5b80638da5cb5b146102095780639590dc9d1461021b5780639eb51f5b1461023b578063afea44ef1461024e578063bb96836814610263575f80fd5b806334e30097116100ef57806334e30097146101c4578063472641c1146101c45780634e0ab1ab146101cc57806354fd4d50146101ed5780635b056da5146101f5575f80fd5b8063028c382f1461012b5780630638fb641461016f5780630e735a631461018a57806317c9efb0146101925780632913daa014610199575b5f80fd5b6101527f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b610177600281565b60405161ffff9091168152602001610166565b610177600381565b6101775f81565b6003546101ac906001600160401b031681565b6040516001600160401b039091168152602001610166565b610177600181565b6101df6101da366004611025565b6102ce565b604051908152602001610166565b612711610177565b5f5461017790600160a01b900461ffff1681565b5f54610152906001600160a01b031681565b61022e61022936600461107c565b6102ed565b60405161016691906110fd565b610177610249366004611025565b610345565b61026161025c36600461112d565b61037a565b005b61026161027136600461122e565b6103ea565b610177600481565b61029161028c3660046112ef565b610480565b604051610166929190611359565b6102916102ad36600461107c565b6105e5565b6102616102c036600461137d565b610650565b61017761271181565b600281815481106102dd575f80fd5b5f91825260209091200154905081565b60605f806102fb85856106ef565b9150915060016103136003546001600160401b031690565b8351848460405160200161032b9594939291906113a3565b604051602081830303815290604052925050505b92915050565b60018181548110610354575f80fd5b905f5260205f209060109182820401919006600202915054906101000a900461ffff1681565b5f546001600160a01b031633146103c75760405162461bcd60e51b815260206004820152600c60248201526b15539055551213d49256915160a21b60448201526064015b60405180910390fd5b6003805467ffffffffffffffff19166001600160401b0392909216919091179055565b5f546001600160a01b031633146104325760405162461bcd60e51b815260206004820152600c60248201526b15539055551213d49256915160a21b60448201526064016103be565b8051825114610454576040516328374b8160e11b815260040160405180910390fd5b8151610467906001906020850190610f32565b50805161047b906002906020840190610fd8565b505050565b5f606081836001600160401b0381111561049c5761049c611148565b6040519080825280602002602001820160405280156104cf57816020015b60608152602001906001900390816104ba5790505b5090505f846001600160401b038111156104eb576104eb611148565b604051908082528060200260200182016040528015610514578160200160208202803683370190505b5090505f5b858110156105a9575f8088888481811061053557610535611434565b90506020028101906105479190611448565b81019061055491906114f5565b915091508184848151811061056b5761056b611434565b602002602001019061ffff16908161ffff16815250508085848151811061059457610594611434565b60209081029190910101525050600101610519565b506105b58888836107c8565b909450925061ffff8416156105cb5750506105dc565b6105d482610953565b909450925050505b94509492505050565b5f60606105f28484610a70565b909250905061ffff82166106495761060a8484610c6e565b909250905061ffff8216610649575f5460405161063791600160a01b900461ffff16908390602001611359565b60405160208183030381529060405290505b9250929050565b5f546001600160a01b031633146106985760405162461bcd60e51b815260206004820152600c60248201526b15539055551213d49256915160a21b60448201526064016103be565b5f805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081178255604051909133917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a350565b606080600160028180548060200260200160405190810160405280929190818152602001828054801561076657602002820191905f5260205f20905f905b82829054906101000a900461ffff1661ffff168152602001906002019060208260010104928301926001038202915080841161072d5790505b50505050509150808054806020026020016040519081016040528092919081815260200182805480156107b657602002820191905f5260205f20905b8154815260200190600101908083116107a2575b50505050509050915091509250929050565b5f6060831561089e575f6107dc86866106ef565b5090505f5b815181101561089b575f805b86518110156108485783838151811061080857610808611434565b602002602001015161ffff1687828151811061082657610826611434565b602002602001015161ffff16036108405760019150610848565b6001016107ed565b50806108925760046040518060400160405280602081526020017f6d697373696e672072656d6f74652073696d756c6174696f6e20726573756c748152509450945050505061094b565b506001016107e1565b50505b5f805b84518110156108f2575f60149054906101000a900461ffff1661ffff168582815181106108d0576108d0611434565b602002602001015161ffff16036108ea57600191506108f2565b6001016108a1565b508061093757505060408051808201909152601f81527f6d697373696e67206c6f63616c2073696d756c6174696f6e20726573756c740060208201526004915061094b565b505060408051602081019091525f80825291505b935093915050565b5f60605f805f5b8551811015610a09575f86828151811061097657610976611434565b60200260200101518060200190518101906109919190611544565b90508060200151156109f15783156109e85760016040518060400160405280601e81526020017f6d6f7265207468616e206f6e652070726f78792073696d756c6174696f6e00008152509550955050505050915091565b80519350610a00565b80516109fd90846115ab565b92505b5060010161095a565b5081811115610a555760016040518060400160405280601b81526020017f746f74616c206d696e746564203e20746f74616c206c6f636b65640000000000815250935093505050915091565b5f60405180602001604052805f815250935093505050915091565b5f60605f610a866003546001600160401b031690565b90506001600160401b038116841115610ae1576040517f7061636b6574732073697a6520657863656564206c696d6974656400000000006020820152600290603b016040516020818303038152906040529250925050610649565b8315610c54575f8080805b87811015610c4f575f898983818110610b0757610b07611434565b9050602002810190610b1991906115be565b610b22906115dc565b90508461ffff16815f015161ffff16141580610b42575083816020015114155b15610bde57805160208201516040830151919650945092505f610b6482610ea3565b610b6f906001611669565b9050806001600160401b0316846001600160401b031614610bd8576040517f736b697070656420696e626f756e644e6f6e636520666f7262696464656e00006020820152600390603e016040516020818303038152906040529850985050505050505050610649565b50610c46565b610be783611688565b9250826001600160401b031681604001516001600160401b031614610c46576040516f756e736f72746564207061636b65747360801b602082015260039060300160405160208183030381529060405297509750505050505050610649565b50600101610aec565b505050505b505060408051602081019091525f80825291509250929050565b5f60605f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663378aa7016040518163ffffffff1660e01b8152600401602060405180830381865afa158015610cce573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610cf291906116b2565b90505f5b84811015610dd5575f868683818110610d1157610d11611434565b9050602002810190610d2391906115be565b610d2c906115dc565b805160208201516060830151604051633125193360e11b81529394506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169363624a326693610d8b939092909189906004016116c9565b602060405180830381865afa158015610da6573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610dca91906116b2565b925050600101610cf6565b505f60405180604001604052808381526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166364da4e6f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e44573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610e6891906116fc565b151590526040805182516020808301919091529092015115159082015260600160405160208183030381529060405292509250509250929050565b80516040516358b46b3160e01b815261ffff90911660048201525f907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906358b46b3190602401602060405180830381865afa158015610f0e573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061033f9190611715565b828054828255905f5260205f2090600f01601090048101928215610fc8579160200282015f5b83821115610f9857835183826101000a81548161ffff021916908361ffff1602179055509260200192600201602081600101049283019260010302610f58565b8015610fc65782816101000a81549061ffff0219169055600201602081600101049283019260010302610f98565b505b50610fd4929150611011565b5090565b828054828255905f5260205f20908101928215610fc8579160200282015b82811115610fc8578251825591602001919060010190610ff6565b5b80821115610fd4575f8155600101611012565b5f60208284031215611035575f80fd5b5035919050565b5f8083601f84011261104c575f80fd5b5081356001600160401b03811115611062575f80fd5b6020830191508360208260051b8501011115610649575f80fd5b5f806020838503121561108d575f80fd5b82356001600160401b038111156110a2575f80fd5b6110ae8582860161103c565b90969095509350505050565b5f81518084525f5b818110156110de576020818501810151868301820152016110c2565b505f602082860101526020601f19601f83011685010191505092915050565b602081525f61110f60208301846110ba565b9392505050565b6001600160401b038116811461112a575f80fd5b50565b5f6020828403121561113d575f80fd5b813561110f81611116565b634e487b7160e01b5f52604160045260245ffd5b604051601f8201601f191681016001600160401b038111828210171561118457611184611148565b604052919050565b5f6001600160401b038211156111a4576111a4611148565b5060051b60200190565b803561ffff811681146111bf575f80fd5b919050565b5f82601f8301126111d3575f80fd5b81356111e66111e18261118c565b61115c565b8082825260208201915060208360051b860101925085831115611207575f80fd5b602085015b8381101561122457803583526020928301920161120c565b5095945050505050565b5f806040838503121561123f575f80fd5b82356001600160401b03811115611254575f80fd5b8301601f81018513611264575f80fd5b80356112726111e18261118c565b8082825260208201915060208360051b850101925087831115611293575f80fd5b6020840193505b828410156112bc576112ab846111ae565b82526020938401939091019061129a565b945050505060208301356001600160401b038111156112d9575f80fd5b6112e5858286016111c4565b9150509250929050565b5f805f8060408587031215611302575f80fd5b84356001600160401b03811115611317575f80fd5b6113238782880161103c565b90955093505060208501356001600160401b03811115611341575f80fd5b61134d8782880161103c565b95989497509550505050565b61ffff83168152604060208201525f61137560408301846110ba565b949350505050565b5f6020828403121561138d575f80fd5b81356001600160a01b038116811461110f575f80fd5b61ffff60f01b8660f01b1681526001600160401b0360c01b8560c01b16600282015283600a8201525f602a82018451602086015f5b828110156113fa57815161ffff168452602093840193909101906001016113d8565b50508451602086019291505f5b81811015611425578351835260209384019390920191600101611407565b50909998505050505050505050565b634e487b7160e01b5f52603260045260245ffd5b5f808335601e1984360301811261145d575f80fd5b8301803591506001600160401b03821115611476575f80fd5b602001915036819003821315610649575f80fd5b5f82601f830112611499575f80fd5b81356001600160401b038111156114b2576114b2611148565b6114c5601f8201601f191660200161115c565b8181528460208386010111156114d9575f80fd5b816020850160208301375f918101602001919091529392505050565b5f8060408385031215611506575f80fd5b61150f836111ae565b915060208301356001600160401b03811115611529575f80fd5b6112e58582860161148a565b805180151581146111bf575f80fd5b5f6040828403128015611555575f80fd5b50604080519081016001600160401b038111828210171561157857611578611148565b6040528251815261158b60208401611535565b60208201529392505050565b634e487b7160e01b5f52601160045260245ffd5b8082018082111561033f5761033f611597565b5f8235607e198336030181126115d2575f80fd5b9190910192915050565b5f608082360312156115ec575f80fd5b604051608081016001600160401b038111828210171561160e5761160e611148565b60405261161a836111ae565b815260208381013590820152604083013561163481611116565b604082015260608301356001600160401b03811115611651575f80fd5b61165d3682860161148a565b60608301525092915050565b6001600160401b03818116838216019081111561033f5761033f611597565b5f6001600160401b0382166001600160401b0381036116a9576116a9611597565b60010192915050565b5f602082840312156116c2575f80fd5b5051919050565b61ffff85168152836020820152608060408201525f6116eb60808301856110ba565b905082606083015295945050505050565b5f6020828403121561170c575f80fd5b61110f82611535565b5f60208284031215611725575f80fd5b815161110f8161111656fea26469706673582212204e242c9cd611fb7cdeeb7e8ea5fce24290d3b34ab897c1ac16e56861d08fe51564736f6c634300081a0033000000000000000000000000fb3485c2e209a5cfbdc1447674256578f1a80ee3000000000000000000000000000000000000000000000000000000000000006e000000000000000000000000e9b193633600917e06ed9e05b3380bc4f152f2a10000000000000000000000000000000000000000000000000000000000000064",
  "args_data": "0x000000000000000000000000fb3485c2e209a5cfbdc1447674256578f1a80ee3000000000000000000000000000000000000000000000000000000000000006e000000000000000000000000e9b193633600917e06ed9e05b3380bc4f152f2a10000000000000000000000000000000000000000000000000000000000000064",
  "tx_hash": "",
  "args": null,
  "data": "",
  "artifact_path": "PreCrimeView.sol",
  "artifact_full_path": "PreCrimeView.sol:PreCrimeView",
  "standardJsonInput": {
    "language": "Solidity",
    "sources": {
      "dependencies/abracadabra-oftv2-0.0.1/src/precrime/PreCrimeView.sol": {
        "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport {Owned} from \"@solmate/auth/Owned.sol\";\nimport {IOFTV2View, IPreCrimeView} from \"../interfaces/ILayerZero.sol\";\n\ncontract PreCrimeView is IPreCrimeView, Owned {\n    error ErrInvalidSize();\n\n    uint16 public constant CONFIG_VERSION = 1;\n\n    //---------------- error code ----------------------\n    // --- UA scope code ---\n    uint16 public constant CODE_SUCCESS = 0; // success\n    uint16 public constant CODE_PRECRIME_FAILURE = 1; // !!! crimes found\n\n    // --- protocol scope error code ---\n    // simualte\n    uint16 public constant CODE_PACKETS_OVERSIZE = 2; // packets number bigger then max size\n    uint16 public constant CODE_PACKETS_UNSORTED = 3; // packets are unsorted, need backfill and keep order\n    // precrime\n    uint16 public constant CODE_MISS_SIMULATE_RESULT = 4; // miss simulation result\n\n    /**\n     * @dev 10000 - 20000 is for view mode, 20000 - 30000 is for precrime inherit mode\n     */\n    uint16 public constant PRECRIME_VERSION = 10001;\n\n    /// @notice a view for OFTV2 or ProxyOFTV2\n    IOFTV2View public immutable oftView;\n\n    uint16 public localChainId;\n    uint16[] public remoteChainIds;\n    bytes32[] public remotePrecrimeAddresses;\n    uint64 public maxBatchSize;\n\n    constructor(address _owner, uint16 _localChainId, address _oftView, uint64 _maxSize) Owned(_owner) {\n        localChainId = _localChainId;\n        oftView = IOFTV2View(_oftView);\n        maxBatchSize = _maxSize;\n    }\n\n    function setRemotePrecrimeAddresses(uint16[] memory _remoteChainIds, bytes32[] memory _remotePrecrimeAddresses) public onlyOwner {\n        if (_remoteChainIds.length != _remotePrecrimeAddresses.length) {\n            revert ErrInvalidSize();\n        }\n\n        remoteChainIds = _remoteChainIds;\n        remotePrecrimeAddresses = _remotePrecrimeAddresses;\n    }\n\n    function setMaxBatchSize(uint64 _maxSize) public onlyOwner {\n        maxBatchSize = _maxSize;\n    }\n\n    /**\n     * @dev get precrime config,\n     * @param _packets packets\n     * @return configation bytes\n     */\n    function getConfig(Packet[] calldata _packets) external view virtual override returns (bytes memory) {\n        (uint16[] memory remoteChains, bytes32[] memory remoteAddresses) = _remotePrecrimeAddress(_packets);\n        return\n            abi.encodePacked(\n                CONFIG_VERSION,\n                //---- max packets size for simulate batch ---\n                _maxBatchSize(),\n                //------------- remote precrimes -------------\n                remoteChains.length,\n                remoteChains,\n                remoteAddresses\n            );\n    }\n\n    /**\n     * @dev\n     * @param _simulation all simulation results from difference chains\n     * @return code     precrime result code; check out the error code definition\n     * @return reason   error reason\n     */\n    function precrime(\n        Packet[] calldata _packets,\n        bytes[] calldata _simulation\n    ) external view override returns (uint16 code, bytes memory reason) {\n        bytes[] memory originSimulateResult = new bytes[](_simulation.length);\n        uint16[] memory chainIds = new uint16[](_simulation.length);\n        for (uint256 i = 0; i < _simulation.length; i++) {\n            (uint16 chainId, bytes memory simulateResult) = abi.decode(_simulation[i], (uint16, bytes));\n            chainIds[i] = chainId;\n            originSimulateResult[i] = simulateResult;\n        }\n\n        (code, reason) = _checkResultsCompleteness(_packets, chainIds);\n        if (code != CODE_SUCCESS) {\n            return (code, reason);\n        }\n\n        (code, reason) = _precrime(originSimulateResult);\n    }\n\n    /**\n     * @dev simulate run cross chain packets and get a simulation result for precrime later\n     * @param _packets packets, the packets item should group by srcChainId, srcAddress, then sort by nonce\n     * @return code   simulation result code; see the error code defination\n     * @return data the result is use for precrime params\n     */\n    function simulate(Packet[] calldata _packets) external view override returns (uint16 code, bytes memory data) {\n        // params check\n        (code, data) = _checkPacketsMaxSizeAndNonceOrder(_packets);\n        if (code != CODE_SUCCESS) {\n            return (code, data);\n        }\n\n        (code, data) = _simulate(_packets);\n        if (code == CODE_SUCCESS) {\n            data = abi.encode(localChainId, data); // add localChainId to the header\n        }\n    }\n\n    function version() external pure override returns (uint16) {\n        return PRECRIME_VERSION;\n    }\n\n    function _checkPacketsMaxSizeAndNonceOrder(Packet[] calldata _packets) internal view returns (uint16 code, bytes memory reason) {\n        uint64 maxSize = _maxBatchSize();\n        if (_packets.length > maxSize) {\n            return (CODE_PACKETS_OVERSIZE, abi.encodePacked(\"packets size exceed limited\"));\n        }\n\n        // check packets nonce, sequence order\n        // packets should group by srcChainId and srcAddress, then sort by nonce ascending\n        if (_packets.length > 0) {\n            uint16 srcChainId;\n            bytes32 srcAddress;\n            uint64 nonce;\n            for (uint256 i = 0; i < _packets.length; i++) {\n                Packet memory packet = _packets[i];\n                // start from a new chain packet or a new source UA\n                if (packet.srcChainId != srcChainId || packet.srcAddress != srcAddress) {\n                    srcChainId = packet.srcChainId;\n                    srcAddress = packet.srcAddress;\n                    nonce = packet.nonce;\n                    uint64 nextInboundNonce = _getInboundNonce(packet) + 1;\n                    // the first packet's nonce must equal to dst InboundNonce+1\n                    if (nonce != nextInboundNonce) {\n                        return (CODE_PACKETS_UNSORTED, abi.encodePacked(\"skipped inboundNonce forbidden\"));\n                    }\n                } else {\n                    // the following packet's nonce add 1 in order\n                    if (packet.nonce != ++nonce) {\n                        return (CODE_PACKETS_UNSORTED, abi.encodePacked(\"unsorted packets\"));\n                    }\n                }\n            }\n        }\n        return (CODE_SUCCESS, \"\");\n    }\n\n    function _checkResultsCompleteness(\n        Packet[] calldata _packets,\n        uint16[] memory _resultChainIds\n    ) internal view returns (uint16 code, bytes memory reason) {\n        // check if all remote result included\n        if (_packets.length > 0) {\n            (uint16[] memory remoteChains, ) = _remotePrecrimeAddress(_packets);\n            for (uint256 i = 0; i < remoteChains.length; i++) {\n                bool resultChainIdChecked;\n                for (uint256 j = 0; j < _resultChainIds.length; j++) {\n                    if (_resultChainIds[j] == remoteChains[i]) {\n                        resultChainIdChecked = true;\n                        break;\n                    }\n                }\n                if (!resultChainIdChecked) {\n                    return (CODE_MISS_SIMULATE_RESULT, \"missing remote simulation result\");\n                }\n            }\n        }\n        // check if local result included\n        bool localChainIdResultChecked;\n        for (uint256 j = 0; j < _resultChainIds.length; j++) {\n            if (_resultChainIds[j] == localChainId) {\n                localChainIdResultChecked = true;\n                break;\n            }\n        }\n        if (!localChainIdResultChecked) {\n            return (CODE_MISS_SIMULATE_RESULT, \"missing local simulation result\");\n        }\n\n        return (CODE_SUCCESS, \"\");\n    }\n\n    /**\n     * @dev UA execute the logic by _packets, and return simulation result for precrime. would revert state after returned result.\n     * @param _packets packets\n     * @return code\n     * @return result\n     */\n    function _simulate(Packet[] calldata _packets) internal view returns (uint16, bytes memory) {\n        uint totalSupply = oftView.getCurrentState();\n\n        for (uint i = 0; i < _packets.length; i++) {\n            Packet memory packet = _packets[i];\n            totalSupply = oftView.lzReceive(packet.srcChainId, packet.srcAddress, packet.payload, totalSupply);\n        }\n\n        return (CODE_SUCCESS, abi.encode(SimulationResult({chainTotalSupply: totalSupply, isProxy: oftView.isProxy()})));\n    }\n\n    /**\n     * @dev\n     * @param _simulation all simulation results from difference chains\n     * @return code     precrime result code; check out the error code defination\n     * @return reason   error reason\n     */\n    function _precrime(bytes[] memory _simulation) internal pure returns (uint16 code, bytes memory reason) {\n        uint totalLocked = 0;\n        uint totalMinted = 0;\n\n        for (uint i = 0; i < _simulation.length; i++) {\n            SimulationResult memory result = abi.decode(_simulation[i], (SimulationResult));\n            if (result.isProxy) {\n                if (totalLocked > 0) {\n                    return (CODE_PRECRIME_FAILURE, \"more than one proxy simulation\");\n                }\n                totalLocked = result.chainTotalSupply;\n            } else {\n                totalMinted += result.chainTotalSupply;\n            }\n        }\n\n        if (totalMinted > totalLocked) {\n            return (CODE_PRECRIME_FAILURE, \"total minted > total locked\");\n        }\n\n        return (CODE_SUCCESS, \"\");\n    }\n\n    /**\n     * @dev Always returns all remote chain ids and precrime addresses\n     */\n    function _remotePrecrimeAddress(\n        Packet[] calldata\n    ) internal view returns (uint16[] memory chainIds, bytes32[] memory precrimeAddresses) {\n        return (remoteChainIds, remotePrecrimeAddresses);\n    }\n\n    /**\n     * @dev max batch size for simulate\n     */\n    function _maxBatchSize() internal view virtual returns (uint64) {\n        return maxBatchSize;\n    }\n\n    /**\n     * get srcChain & srcAddress InboundNonce by packet\n     */\n    function _getInboundNonce(Packet memory _packet) internal view returns (uint64) {\n        return oftView.getInboundNonce(_packet.srcChainId);\n    }\n}\n"
      },
      "dependencies/solmate-6.2.0/src/auth/Owned.sol": {
        "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\n/// @notice Simple single owner authorization mixin.\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/auth/Owned.sol)\nabstract contract Owned {\n    /*//////////////////////////////////////////////////////////////\n                                 EVENTS\n    //////////////////////////////////////////////////////////////*/\n\n    event OwnershipTransferred(address indexed user, address indexed newOwner);\n\n    /*//////////////////////////////////////////////////////////////\n                            OWNERSHIP STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    address public owner;\n\n    modifier onlyOwner() virtual {\n        require(msg.sender == owner, \"UNAUTHORIZED\");\n\n        _;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                               CONSTRUCTOR\n    //////////////////////////////////////////////////////////////*/\n\n    constructor(address _owner) {\n        owner = _owner;\n\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                             OWNERSHIP LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        owner = newOwner;\n\n        emit OwnershipTransferred(msg.sender, newOwner);\n    }\n}\n"
      },
      "dependencies/abracadabra-oftv2-0.0.1/src/interfaces/ILayerZero.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\ninterface ILzFeeHandler {\n    enum QuoteType {\n        None,\n        Oracle,\n        Fixed\n    }\n\n    function getFee() external view returns (uint256);\n}\n\ninterface ILzCommonOFT is IERC165 {\n    struct LzCallParams {\n        address payable refundAddress;\n        address zroPaymentAddress;\n        bytes adapterParams;\n    }\n\n    function estimateSendFee(\n        uint16 _dstChainId,\n        bytes32 _toAddress,\n        uint _amount,\n        bool _useZro,\n        bytes calldata _adapterParams\n    ) external view returns (uint nativeFee, uint zroFee);\n\n    function estimateSendAndCallFee(\n        uint16 _dstChainId,\n        bytes32 _toAddress,\n        uint _amount,\n        bytes calldata _payload,\n        uint64 _dstGasForCall,\n        bool _useZro,\n        bytes calldata _adapterParams\n    ) external view returns (uint nativeFee, uint zroFee);\n\n    function circulatingSupply() external view returns (uint);\n\n    function token() external view returns (address);\n}\n\ninterface ILzUserApplicationConfig {\n    function setConfig(\n        uint16 _version,\n        uint16 _chainId,\n        uint _configType,\n        bytes calldata _config\n    ) external;\n\n    function setSendVersion(uint16 _version) external;\n\n    function setReceiveVersion(uint16 _version) external;\n\n    function forceResumeReceive(\n        uint16 _srcChainId,\n        bytes calldata _srcAddress\n    ) external;\n}\n\ninterface ILzEndpoint is ILzUserApplicationConfig {\n    function defaultSendLibrary() external view returns (address);\n\n    function send(\n        uint16 _dstChainId,\n        bytes calldata _destination,\n        bytes calldata _payload,\n        address payable _refundAddress,\n        address _zroPaymentAddress,\n        bytes calldata _adapterParams\n    ) external payable;\n\n    function receivePayload(\n        uint16 _srcChainId,\n        bytes calldata _srcAddress,\n        address _dstAddress,\n        uint64 _nonce,\n        uint _gasLimit,\n        bytes calldata _payload\n    ) external;\n\n    function getInboundNonce(\n        uint16 _srcChainId,\n        bytes calldata _srcAddress\n    ) external view returns (uint64);\n\n    function getOutboundNonce(\n        uint16 _dstChainId,\n        address _srcAddress\n    ) external view returns (uint64);\n\n    function estimateFees(\n        uint16 _dstChainId,\n        address _userApplication,\n        bytes calldata _payload,\n        bool _payInZRO,\n        bytes calldata _adapterParam\n    ) external view returns (uint nativeFee, uint zroFee);\n\n    function getChainId() external view returns (uint16);\n\n    function retryPayload(\n        uint16 _srcChainId,\n        bytes calldata _srcAddress,\n        bytes calldata _payload\n    ) external;\n\n    function hasStoredPayload(\n        uint16 _srcChainId,\n        bytes calldata _srcAddress\n    ) external view returns (bool);\n\n    function getSendLibraryAddress(\n        address _userApplication\n    ) external view returns (address);\n\n    function getReceiveLibraryAddress(\n        address _userApplication\n    ) external view returns (address);\n\n    function isSendingPayload() external view returns (bool);\n\n    function isReceivingPayload() external view returns (bool);\n\n    function getConfig(\n        uint16 _version,\n        uint16 _chainId,\n        address _userApplication,\n        uint _configType\n    ) external view returns (bytes memory);\n\n    function getSendVersion(\n        address _userApplication\n    ) external view returns (uint16);\n\n    function getReceiveVersion(\n        address _userApplication\n    ) external view returns (uint16);\n\n    function defaultSendVersion() external view returns (uint16);\n\n    function defaultReceiveVersion() external view returns (uint16);\n\n    function defaultReceiveLibraryAddress() external view returns (address);\n\n    function uaConfigLookup(\n        address _address\n    )\n        external\n        view\n        returns (\n            uint16 sendVersion,\n            uint16 receiveVersion,\n            address receiveLibraryAddress,\n            address sendLibrary\n        );\n}\n\ninterface ILzBaseOFTV2 {\n    function sharedDecimals() external view returns (uint8);\n\n    function innerToken() external view returns (address);\n\n    function feeHandler() external view returns (ILzFeeHandler);\n}\n\ninterface ILzApp {\n    function lzReceive(\n        uint16 _srcChainId,\n        bytes calldata _srcAddress,\n        uint64 _nonce,\n        bytes calldata _payload\n    ) external;\n\n    function minDstGasLookup(\n        uint16 _srcChainId,\n        uint16 _dstChainId\n    ) external view returns (uint);\n\n    function setTrustedRemote(\n        uint16 _remoteChainId,\n        bytes calldata _path\n    ) external;\n\n    function trustedRemoteLookup(\n        uint16 _srcChainId\n    ) external view returns (bytes memory);\n\n    function setConfig(\n        uint16 _version,\n        uint16 _chainId,\n        uint _configType,\n        bytes calldata _config\n    ) external;\n\n    function lzEndpoint() external view returns (ILzEndpoint);\n}\n\ninterface ILzOFTV2 is ILzCommonOFT {\n    function sendFrom(\n        address _from,\n        uint16 _dstChainId,\n        bytes32 _toAddress,\n        uint _amount,\n        LzCallParams calldata _callParams\n    ) external payable;\n\n    function sendAndCall(\n        address _from,\n        uint16 _dstChainId,\n        bytes32 _toAddress,\n        uint _amount,\n        bytes calldata _payload,\n        uint64 _dstGasForCall,\n        LzCallParams calldata _callParams\n    ) external payable;\n}\n\ninterface ILzOFTReceiverV2 {\n    function onOFTReceived(\n        uint16 _srcChainId,\n        bytes calldata _srcAddress,\n        uint64 _nonce,\n        bytes32 _from,\n        uint _amount,\n        bytes calldata _payload\n    ) external;\n}\n\ninterface ILzUltraLightNodeV2 {\n    function defaultAppConfig(\n        uint16\n    )\n        external\n        view\n        returns (\n            uint16 inboundProofLibraryVersion,\n            uint64 inboundBlockConfirmations,\n            address relayer,\n            uint16 outboundProofType,\n            uint64 outboundBlockConfirmations,\n            address oracle\n        );\n\n    function appConfig(\n        address,\n        uint16\n    )\n        external\n        view\n        returns (\n            uint16 inboundProofLibraryVersion,\n            uint64 inboundBlockConfirmations,\n            address relayer,\n            uint16 outboundProofType,\n            uint64 outboundBlockConfirmations,\n            address oracle\n        );\n}\n\ninterface ILzReceiver {\n    function lzReceive(\n        uint16 _srcChainId,\n        bytes calldata _srcAddress,\n        uint64 _nonce,\n        bytes calldata _payload\n    ) external;\n}\n\ninterface ILzIndirectOFTV2 is ILzBaseOFTV2 {\n    function ld2sdRate() external view returns (uint);\n}\n\ninterface ILzProxyOFTV2 is ILzBaseOFTV2 {\n    function ld2sdRate() external view returns (uint);\n}\n\ninterface IOFTV2View {\n    function lzReceive(\n        uint16 _srcChainId,\n        bytes32 _scrAddress,\n        bytes memory _payload,\n        uint _totalSupply\n    ) external view returns (uint);\n\n    function getInboundNonce(uint16 _srcChainId) external view returns (uint64);\n\n    function getCurrentState() external view returns (uint);\n\n    function isProxy() external view returns (bool);\n}\n\ninterface IPreCrimeView {\n    struct Packet {\n        uint16 srcChainId;\n        bytes32 srcAddress;\n        uint64 nonce;\n        bytes payload;\n    }\n\n    struct SimulationResult {\n        uint chainTotalSupply;\n        bool isProxy;\n    }\n\n    function getConfig(\n        Packet[] calldata _packets\n    ) external view returns (bytes memory);\n\n    function precrime(\n        Packet[] calldata _packets,\n        bytes[] calldata _simulation\n    ) external view returns (uint16 code, bytes memory reason);\n\n    function version() external view returns (uint16);\n\n    function simulate(\n        Packet[] calldata _packets\n    ) external view returns (uint16 code, bytes memory result);\n}\n"
      },
      "dependencies/openzeppelin-contracts-5.0.2/contracts/utils/introspection/IERC165.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
      }
    },
    "settings": {
      "remappings": [
        "/=src/",
        "forge-std/=dependencies/forge-std-1.9.2/src/",
        "halmos-cheatcodes/=dependencies/halmos-cheatcodes-3ca0e11/src/",
        "@openzeppelin/contracts/=dependencies/openzeppelin-contracts-5.0.2/contracts/",
        "@openzeppelin/contracts-upgradeable/=dependencies/openzeppelin-contracts-upgradeable-5.0.2/contracts/",
        "@BoringSolidity/=dependencies/BoringSolidity-1.0.0/contracts/",
        "@solady/=dependencies/solady-0.0.231/src/",
        "@solmate/=dependencies/solmate-6.2.0/src/",
        "@excessivelySafeCall/=dependencies/ExcessivelySafeCall-0.0.1/src/",
        "@safe-contracts/=dependencies/safe-contracts-1.3.0/contracts/",
        "@fuzzlib/=dependencies/fuzzlib-0.0.1/src/",
        "@abracadabra-oftv2/=dependencies/abracadabra-oftv2-0.0.1/src/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 400
      },
      "metadata": {
        "useLiteralContent": false,
        "bytecodeHash": "ipfs",
        "appendCBOR": true
      },
      "outputSelection": {
        "*": {
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "evmVersion": "shanghai",
      "viaIR": false,
      "libraries": {}
    }
  },
  "compiler": "0.8.26+commit.8a97fa7a"
}