{
  "address": "0x3142aB041cF9Db9b1b22D9f55716e83B1eA178f1",
  "abi": [
    {
      "type": "constructor",
      "inputs": [
        {
          "name": "_strategyToken",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "_degenBox",
          "type": "address",
          "internalType": "contract IBentoBoxV1"
        },
        {
          "name": "_gmxRouter",
          "type": "address",
          "internalType": "contract IGmxV2ExchangeRouter"
        },
        {
          "name": "_gmxReader",
          "type": "address",
          "internalType": "contract IGmxReader"
        },
        {
          "name": "_syntheticsRouter",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "_refundTo",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "_staking",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "receive",
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "DATASTORE",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "contract IGmxDataStore"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "DEPOSIT_VAULT",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "EXECUTE_DEPOSIT_FEATURE_DISABLED",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "GMX_READER",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "contract IGmxReader"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "GMX_ROUTER",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "contract IGmxV2ExchangeRouter"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "LONG_TOKEN",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "REFUND_TO",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "SHORT_TOKEN",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "STAKING",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "contract IMultiRewardsStaking"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "SYNTHETICS_ROUTER",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "afterDepositCancellation",
      "inputs": [
        {
          "name": "key",
          "type": "bytes32",
          "internalType": "bytes32"
        },
        {
          "name": "deposit",
          "type": "tuple",
          "internalType": "struct IGmxV2Deposit.Props",
          "components": [
            {
              "name": "addresses",
              "type": "tuple",
              "internalType": "struct IGmxV2Deposit.Addresses",
              "components": [
                {
                  "name": "account",
                  "type": "address",
                  "internalType": "address"
                },
                {
                  "name": "receiver",
                  "type": "address",
                  "internalType": "address"
                },
                {
                  "name": "callbackContract",
                  "type": "address",
                  "internalType": "address"
                },
                {
                  "name": "uiFeeReceiver",
                  "type": "address",
                  "internalType": "address"
                },
                {
                  "name": "market",
                  "type": "address",
                  "internalType": "address"
                },
                {
                  "name": "initialLongToken",
                  "type": "address",
                  "internalType": "address"
                },
                {
                  "name": "initialShortToken",
                  "type": "address",
                  "internalType": "address"
                },
                {
                  "name": "longTokenSwapPath",
                  "type": "address[]",
                  "internalType": "address[]"
                },
                {
                  "name": "shortTokenSwapPath",
                  "type": "address[]",
                  "internalType": "address[]"
                }
              ]
            },
            {
              "name": "numbers",
              "type": "tuple",
              "internalType": "struct IGmxV2Deposit.Numbers",
              "components": [
                {
                  "name": "initialLongTokenAmount",
                  "type": "uint256",
                  "internalType": "uint256"
                },
                {
                  "name": "initialShortTokenAmount",
                  "type": "uint256",
                  "internalType": "uint256"
                },
                {
                  "name": "minMarketTokens",
                  "type": "uint256",
                  "internalType": "uint256"
                },
                {
                  "name": "updatedAtBlock",
                  "type": "uint256",
                  "internalType": "uint256"
                },
                {
                  "name": "updatedAtTime",
                  "type": "uint256",
                  "internalType": "uint256"
                },
                {
                  "name": "executionFee",
                  "type": "uint256",
                  "internalType": "uint256"
                },
                {
                  "name": "callbackGasLimit",
                  "type": "uint256",
                  "internalType": "uint256"
                }
              ]
            },
            {
              "name": "flags",
              "type": "tuple",
              "internalType": "struct IGmxV2Deposit.Flags",
              "components": [
                {
                  "name": "shouldUnwrapNativeToken",
                  "type": "bool",
                  "internalType": "bool"
                }
              ]
            }
          ]
        },
        {
          "name": "eventData",
          "type": "tuple",
          "internalType": "struct IGmxV2EventUtils.EventLogData",
          "components": [
            {
              "name": "addressItems",
              "type": "tuple",
              "internalType": "struct IGmxV2EventUtils.AddressItems",
              "components": [
                {
                  "name": "items",
                  "type": "tuple[]",
                  "internalType": "struct IGmxV2EventUtils.AddressKeyValue[]",
                  "components": [
                    {
                      "name": "key",
                      "type": "string",
                      "internalType": "string"
                    },
                    {
                      "name": "value",
                      "type": "address",
                      "internalType": "address"
                    }
                  ]
                },
                {
                  "name": "arrayItems",
                  "type": "tuple[]",
                  "internalType": "struct IGmxV2EventUtils.AddressArrayKeyValue[]",
                  "components": [
                    {
                      "name": "key",
                      "type": "string",
                      "internalType": "string"
                    },
                    {
                      "name": "value",
                      "type": "address[]",
                      "internalType": "address[]"
                    }
                  ]
                }
              ]
            },
            {
              "name": "uintItems",
              "type": "tuple",
              "internalType": "struct IGmxV2EventUtils.UintItems",
              "components": [
                {
                  "name": "items",
                  "type": "tuple[]",
                  "internalType": "struct IGmxV2EventUtils.UintKeyValue[]",
                  "components": [
                    {
                      "name": "key",
                      "type": "string",
                      "internalType": "string"
                    },
                    {
                      "name": "value",
                      "type": "uint256",
                      "internalType": "uint256"
                    }
                  ]
                },
                {
                  "name": "arrayItems",
                  "type": "tuple[]",
                  "internalType": "struct IGmxV2EventUtils.UintArrayKeyValue[]",
                  "components": [
                    {
                      "name": "key",
                      "type": "string",
                      "internalType": "string"
                    },
                    {
                      "name": "value",
                      "type": "uint256[]",
                      "internalType": "uint256[]"
                    }
                  ]
                }
              ]
            },
            {
              "name": "intItems",
              "type": "tuple",
              "internalType": "struct IGmxV2EventUtils.IntItems",
              "components": [
                {
                  "name": "items",
                  "type": "tuple[]",
                  "internalType": "struct IGmxV2EventUtils.IntKeyValue[]",
                  "components": [
                    {
                      "name": "key",
                      "type": "string",
                      "internalType": "string"
                    },
                    {
                      "name": "value",
                      "type": "int256",
                      "internalType": "int256"
                    }
                  ]
                },
                {
                  "name": "arrayItems",
                  "type": "tuple[]",
                  "internalType": "struct IGmxV2EventUtils.IntArrayKeyValue[]",
                  "components": [
                    {
                      "name": "key",
                      "type": "string",
                      "internalType": "string"
                    },
                    {
                      "name": "value",
                      "type": "int256[]",
                      "internalType": "int256[]"
                    }
                  ]
                }
              ]
            },
            {
              "name": "boolItems",
              "type": "tuple",
              "internalType": "struct IGmxV2EventUtils.BoolItems",
              "components": [
                {
                  "name": "items",
                  "type": "tuple[]",
                  "internalType": "struct IGmxV2EventUtils.BoolKeyValue[]",
                  "components": [
                    {
                      "name": "key",
                      "type": "string",
                      "internalType": "string"
                    },
                    {
                      "name": "value",
                      "type": "bool",
                      "internalType": "bool"
                    }
                  ]
                },
                {
                  "name": "arrayItems",
                  "type": "tuple[]",
                  "internalType": "struct IGmxV2EventUtils.BoolArrayKeyValue[]",
                  "components": [
                    {
                      "name": "key",
                      "type": "string",
                      "internalType": "string"
                    },
                    {
                      "name": "value",
                      "type": "bool[]",
                      "internalType": "bool[]"
                    }
                  ]
                }
              ]
            },
            {
              "name": "bytes32Items",
              "type": "tuple",
              "internalType": "struct IGmxV2EventUtils.Bytes32Items",
              "components": [
                {
                  "name": "items",
                  "type": "tuple[]",
                  "internalType": "struct IGmxV2EventUtils.Bytes32KeyValue[]",
                  "components": [
                    {
                      "name": "key",
                      "type": "string",
                      "internalType": "string"
                    },
                    {
                      "name": "value",
                      "type": "bytes32",
                      "internalType": "bytes32"
                    }
                  ]
                },
                {
                  "name": "arrayItems",
                  "type": "tuple[]",
                  "internalType": "struct IGmxV2EventUtils.Bytes32ArrayKeyValue[]",
                  "components": [
                    {
                      "name": "key",
                      "type": "string",
                      "internalType": "string"
                    },
                    {
                      "name": "value",
                      "type": "bytes32[]",
                      "internalType": "bytes32[]"
                    }
                  ]
                }
              ]
            },
            {
              "name": "bytesItems",
              "type": "tuple",
              "internalType": "struct IGmxV2EventUtils.BytesItems",
              "components": [
                {
                  "name": "items",
                  "type": "tuple[]",
                  "internalType": "struct IGmxV2EventUtils.BytesKeyValue[]",
                  "components": [
                    {
                      "name": "key",
                      "type": "string",
                      "internalType": "string"
                    },
                    {
                      "name": "value",
                      "type": "bytes",
                      "internalType": "bytes"
                    }
                  ]
                },
                {
                  "name": "arrayItems",
                  "type": "tuple[]",
                  "internalType": "struct IGmxV2EventUtils.BytesArrayKeyValue[]",
                  "components": [
                    {
                      "name": "key",
                      "type": "string",
                      "internalType": "string"
                    },
                    {
                      "name": "value",
                      "type": "bytes[]",
                      "internalType": "bytes[]"
                    }
                  ]
                }
              ]
            },
            {
              "name": "stringItems",
              "type": "tuple",
              "internalType": "struct IGmxV2EventUtils.StringItems",
              "components": [
                {
                  "name": "items",
                  "type": "tuple[]",
                  "internalType": "struct IGmxV2EventUtils.StringKeyValue[]",
                  "components": [
                    {
                      "name": "key",
                      "type": "string",
                      "internalType": "string"
                    },
                    {
                      "name": "value",
                      "type": "string",
                      "internalType": "string"
                    }
                  ]
                },
                {
                  "name": "arrayItems",
                  "type": "tuple[]",
                  "internalType": "struct IGmxV2EventUtils.StringArrayKeyValue[]",
                  "components": [
                    {
                      "name": "key",
                      "type": "string",
                      "internalType": "string"
                    },
                    {
                      "name": "value",
                      "type": "string[]",
                      "internalType": "string[]"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "afterDepositExecution",
      "inputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        },
        {
          "name": "deposit",
          "type": "tuple",
          "internalType": "struct IGmxV2Deposit.Props",
          "components": [
            {
              "name": "addresses",
              "type": "tuple",
              "internalType": "struct IGmxV2Deposit.Addresses",
              "components": [
                {
                  "name": "account",
                  "type": "address",
                  "internalType": "address"
                },
                {
                  "name": "receiver",
                  "type": "address",
                  "internalType": "address"
                },
                {
                  "name": "callbackContract",
                  "type": "address",
                  "internalType": "address"
                },
                {
                  "name": "uiFeeReceiver",
                  "type": "address",
                  "internalType": "address"
                },
                {
                  "name": "market",
                  "type": "address",
                  "internalType": "address"
                },
                {
                  "name": "initialLongToken",
                  "type": "address",
                  "internalType": "address"
                },
                {
                  "name": "initialShortToken",
                  "type": "address",
                  "internalType": "address"
                },
                {
                  "name": "longTokenSwapPath",
                  "type": "address[]",
                  "internalType": "address[]"
                },
                {
                  "name": "shortTokenSwapPath",
                  "type": "address[]",
                  "internalType": "address[]"
                }
              ]
            },
            {
              "name": "numbers",
              "type": "tuple",
              "internalType": "struct IGmxV2Deposit.Numbers",
              "components": [
                {
                  "name": "initialLongTokenAmount",
                  "type": "uint256",
                  "internalType": "uint256"
                },
                {
                  "name": "initialShortTokenAmount",
                  "type": "uint256",
                  "internalType": "uint256"
                },
                {
                  "name": "minMarketTokens",
                  "type": "uint256",
                  "internalType": "uint256"
                },
                {
                  "name": "updatedAtBlock",
                  "type": "uint256",
                  "internalType": "uint256"
                },
                {
                  "name": "updatedAtTime",
                  "type": "uint256",
                  "internalType": "uint256"
                },
                {
                  "name": "executionFee",
                  "type": "uint256",
                  "internalType": "uint256"
                },
                {
                  "name": "callbackGasLimit",
                  "type": "uint256",
                  "internalType": "uint256"
                }
              ]
            },
            {
              "name": "flags",
              "type": "tuple",
              "internalType": "struct IGmxV2Deposit.Flags",
              "components": [
                {
                  "name": "shouldUnwrapNativeToken",
                  "type": "bool",
                  "internalType": "bool"
                }
              ]
            }
          ]
        },
        {
          "name": "",
          "type": "tuple",
          "internalType": "struct IGmxV2EventUtils.EventLogData",
          "components": [
            {
              "name": "addressItems",
              "type": "tuple",
              "internalType": "struct IGmxV2EventUtils.AddressItems",
              "components": [
                {
                  "name": "items",
                  "type": "tuple[]",
                  "internalType": "struct IGmxV2EventUtils.AddressKeyValue[]",
                  "components": [
                    {
                      "name": "key",
                      "type": "string",
                      "internalType": "string"
                    },
                    {
                      "name": "value",
                      "type": "address",
                      "internalType": "address"
                    }
                  ]
                },
                {
                  "name": "arrayItems",
                  "type": "tuple[]",
                  "internalType": "struct IGmxV2EventUtils.AddressArrayKeyValue[]",
                  "components": [
                    {
                      "name": "key",
                      "type": "string",
                      "internalType": "string"
                    },
                    {
                      "name": "value",
                      "type": "address[]",
                      "internalType": "address[]"
                    }
                  ]
                }
              ]
            },
            {
              "name": "uintItems",
              "type": "tuple",
              "internalType": "struct IGmxV2EventUtils.UintItems",
              "components": [
                {
                  "name": "items",
                  "type": "tuple[]",
                  "internalType": "struct IGmxV2EventUtils.UintKeyValue[]",
                  "components": [
                    {
                      "name": "key",
                      "type": "string",
                      "internalType": "string"
                    },
                    {
                      "name": "value",
                      "type": "uint256",
                      "internalType": "uint256"
                    }
                  ]
                },
                {
                  "name": "arrayItems",
                  "type": "tuple[]",
                  "internalType": "struct IGmxV2EventUtils.UintArrayKeyValue[]",
                  "components": [
                    {
                      "name": "key",
                      "type": "string",
                      "internalType": "string"
                    },
                    {
                      "name": "value",
                      "type": "uint256[]",
                      "internalType": "uint256[]"
                    }
                  ]
                }
              ]
            },
            {
              "name": "intItems",
              "type": "tuple",
              "internalType": "struct IGmxV2EventUtils.IntItems",
              "components": [
                {
                  "name": "items",
                  "type": "tuple[]",
                  "internalType": "struct IGmxV2EventUtils.IntKeyValue[]",
                  "components": [
                    {
                      "name": "key",
                      "type": "string",
                      "internalType": "string"
                    },
                    {
                      "name": "value",
                      "type": "int256",
                      "internalType": "int256"
                    }
                  ]
                },
                {
                  "name": "arrayItems",
                  "type": "tuple[]",
                  "internalType": "struct IGmxV2EventUtils.IntArrayKeyValue[]",
                  "components": [
                    {
                      "name": "key",
                      "type": "string",
                      "internalType": "string"
                    },
                    {
                      "name": "value",
                      "type": "int256[]",
                      "internalType": "int256[]"
                    }
                  ]
                }
              ]
            },
            {
              "name": "boolItems",
              "type": "tuple",
              "internalType": "struct IGmxV2EventUtils.BoolItems",
              "components": [
                {
                  "name": "items",
                  "type": "tuple[]",
                  "internalType": "struct IGmxV2EventUtils.BoolKeyValue[]",
                  "components": [
                    {
                      "name": "key",
                      "type": "string",
                      "internalType": "string"
                    },
                    {
                      "name": "value",
                      "type": "bool",
                      "internalType": "bool"
                    }
                  ]
                },
                {
                  "name": "arrayItems",
                  "type": "tuple[]",
                  "internalType": "struct IGmxV2EventUtils.BoolArrayKeyValue[]",
                  "components": [
                    {
                      "name": "key",
                      "type": "string",
                      "internalType": "string"
                    },
                    {
                      "name": "value",
                      "type": "bool[]",
                      "internalType": "bool[]"
                    }
                  ]
                }
              ]
            },
            {
              "name": "bytes32Items",
              "type": "tuple",
              "internalType": "struct IGmxV2EventUtils.Bytes32Items",
              "components": [
                {
                  "name": "items",
                  "type": "tuple[]",
                  "internalType": "struct IGmxV2EventUtils.Bytes32KeyValue[]",
                  "components": [
                    {
                      "name": "key",
                      "type": "string",
                      "internalType": "string"
                    },
                    {
                      "name": "value",
                      "type": "bytes32",
                      "internalType": "bytes32"
                    }
                  ]
                },
                {
                  "name": "arrayItems",
                  "type": "tuple[]",
                  "internalType": "struct IGmxV2EventUtils.Bytes32ArrayKeyValue[]",
                  "components": [
                    {
                      "name": "key",
                      "type": "string",
                      "internalType": "string"
                    },
                    {
                      "name": "value",
                      "type": "bytes32[]",
                      "internalType": "bytes32[]"
                    }
                  ]
                }
              ]
            },
            {
              "name": "bytesItems",
              "type": "tuple",
              "internalType": "struct IGmxV2EventUtils.BytesItems",
              "components": [
                {
                  "name": "items",
                  "type": "tuple[]",
                  "internalType": "struct IGmxV2EventUtils.BytesKeyValue[]",
                  "components": [
                    {
                      "name": "key",
                      "type": "string",
                      "internalType": "string"
                    },
                    {
                      "name": "value",
                      "type": "bytes",
                      "internalType": "bytes"
                    }
                  ]
                },
                {
                  "name": "arrayItems",
                  "type": "tuple[]",
                  "internalType": "struct IGmxV2EventUtils.BytesArrayKeyValue[]",
                  "components": [
                    {
                      "name": "key",
                      "type": "string",
                      "internalType": "string"
                    },
                    {
                      "name": "value",
                      "type": "bytes[]",
                      "internalType": "bytes[]"
                    }
                  ]
                }
              ]
            },
            {
              "name": "stringItems",
              "type": "tuple",
              "internalType": "struct IGmxV2EventUtils.StringItems",
              "components": [
                {
                  "name": "items",
                  "type": "tuple[]",
                  "internalType": "struct IGmxV2EventUtils.StringKeyValue[]",
                  "components": [
                    {
                      "name": "key",
                      "type": "string",
                      "internalType": "string"
                    },
                    {
                      "name": "value",
                      "type": "string",
                      "internalType": "string"
                    }
                  ]
                },
                {
                  "name": "arrayItems",
                  "type": "tuple[]",
                  "internalType": "struct IGmxV2EventUtils.StringArrayKeyValue[]",
                  "components": [
                    {
                      "name": "key",
                      "type": "string",
                      "internalType": "string"
                    },
                    {
                      "name": "value",
                      "type": "string[]",
                      "internalType": "string[]"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "afterExit",
      "inputs": [
        {
          "name": "to",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "value",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "data",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "outputs": [
        {
          "name": "success",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "bentoBox",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "contract IBentoBoxV1"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "callbackGasLimit",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "cancelOrder",
      "inputs": [],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "claimOwnership",
      "inputs": [],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "exchange",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "exit",
      "inputs": [
        {
          "name": "balance",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "amountAdded",
          "type": "int256",
          "internalType": "int256"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "exited",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "feeBips",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint16",
          "internalType": "uint16"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "feeCollector",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "harvest",
      "inputs": [
        {
          "name": "balance",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "sender",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "int256",
          "internalType": "int256"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "isDepositExecutionDisabled",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "isFeeOperator",
      "inputs": [
        {
          "name": "account",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "maxBentoBoxBalance",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "orderKey",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "owner",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "pendingOwner",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "rescueToken",
      "inputs": [
        {
          "name": "_token",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "_amount",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "_to",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "run",
      "inputs": [
        {
          "name": "_rewardToken",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "_marketInputToken",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "_marketMinOut",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "_executionFee",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "_swapData",
          "type": "bytes",
          "internalType": "bytes"
        },
        {
          "name": "_maxBentoBoxAmountIncreaseInBips",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "_maxBentoBoxChangeAmountInBips",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "safeHarvest",
      "inputs": [
        {
          "name": "maxBalance",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "rebalance",
          "type": "bool",
          "internalType": "bool"
        },
        {
          "name": "maxChangeAmount",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "harvestRewards",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "setCallbackGasLimit",
      "inputs": [
        {
          "name": "_callbackGasLimit",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "setExchange",
      "inputs": [
        {
          "name": "_exchange",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "setFeeParameters",
      "inputs": [
        {
          "name": "_feeCollector",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "_feeBips",
          "type": "uint16",
          "internalType": "uint16"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "setReader",
      "inputs": [
        {
          "name": "_reader",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "setRouter",
      "inputs": [
        {
          "name": "_router",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "setStrategyExecutor",
      "inputs": [
        {
          "name": "executor",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "value",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "setTokenApproval",
      "inputs": [
        {
          "name": "_token",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "_to",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "_amount",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "skim",
      "inputs": [
        {
          "name": "amount",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "strategyExecutors",
      "inputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "strategyToken",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "contract IERC20"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "transferOwnership",
      "inputs": [
        {
          "name": "newOwner",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "direct",
          "type": "bool",
          "internalType": "bool"
        },
        {
          "name": "renounce",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "withdraw",
      "inputs": [
        {
          "name": "amount",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "actualAmount",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "event",
      "name": "LogCallbackGasLimitChanged",
      "inputs": [
        {
          "name": "previous",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        },
        {
          "name": "current",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "LogExchangeChanged",
      "inputs": [
        {
          "name": "previous",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "current",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "LogFeeParametersChanged",
      "inputs": [
        {
          "name": "previousFeeCollector",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "previousFeeAmount",
          "type": "uint16",
          "indexed": false,
          "internalType": "uint16"
        },
        {
          "name": "feeCollector",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "feeAmount",
          "type": "uint16",
          "indexed": false,
          "internalType": "uint16"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "LogMarketMinted",
      "inputs": [
        {
          "name": "total",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        },
        {
          "name": "strategyAmount",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        },
        {
          "name": "feeAmount",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "LogReaderChanged",
      "inputs": [
        {
          "name": "reader",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "LogRouterChanged",
      "inputs": [
        {
          "name": "router",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "LogSetStrategyExecutor",
      "inputs": [
        {
          "name": "executor",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "allowed",
          "type": "bool",
          "indexed": false,
          "internalType": "bool"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "OwnershipTransferred",
      "inputs": [
        {
          "name": "previousOwner",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "newOwner",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "error",
      "name": "AddressEmptyCode",
      "inputs": [
        {
          "name": "target",
          "type": "address",
          "internalType": "address"
        }
      ]
    },
    {
      "type": "error",
      "name": "AddressInsufficientBalance",
      "inputs": [
        {
          "name": "account",
          "type": "address",
          "internalType": "address"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrExecuteDepositsDisabled",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrInsufficientAmountOut",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrInvalidFeeBips",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrInvalidFeeOperator",
      "inputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrInvalidToken",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrUnauthorized",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrWrongUser",
      "inputs": []
    },
    {
      "type": "error",
      "name": "FailedInnerCall",
      "inputs": []
    }
  ],
  "bytecode": "0x6101a0604052621e8480600855348015610017575f80fd5b506040516145e53803806145e5833981016040819052610036916103c2565b5f80546001600160a01b03191633908117825560405189928992917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a36001600160a01b03918216608052811660a052604080516372f702f360e01b81529051898316928416916372f702f39160048083019260209291908290030181865afa1580156100c8573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906100ec9190610459565b6001600160a01b0316146101025761010261047b565b600480546201000033026001600160b01b03199091161760c8178155600580546001600160a01b038881166001600160a01b03199283168117909355600680548983169316929092179091558516610100526040805163660d0d6760e01b81529051919263660d0d679282820192602092908290030181865afa15801561018b573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906101af9190610459565b6001600160a01b031660c0816001600160a01b031681525050846001600160a01b0316639c8b2cfb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610204573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906102289190610459565b6001600160a01b031663d7cd39496040518163ffffffff1660e01b8152600401602060405180830381865afa158015610263573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906102879190610459565b6001600160a01b0390811660e0528281166101205260065460c05160405163714af34b60e01b8152908316600482015289831660248201525f92919091169063714af34b90604401608060405180830381865afa1580156102ea573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061030e919061048f565b60408101516001600160a01b0390811661014052606082015181166101605283811661018052909150610345908916835f19610352565b5050505050505050610519565b81601452806034526f095ea7b30000000000000000000000005f5260205f604460105f875af13d1560015f5114171661039257633e3f8f735f526004601cfd5b5f603452505050565b6001600160a01b03811681146103af575f80fd5b50565b80516103bd8161039b565b919050565b5f805f805f805f60e0888a0312156103d8575f80fd5b87516103e38161039b565b60208901519097506103f48161039b565b60408901519096506104058161039b565b60608901519095506104168161039b565b60808901519094506104278161039b565b60a08901519093506104388161039b565b60c08901519092506104498161039b565b8091505092959891949750929550565b5f60208284031215610469575f80fd5b81516104748161039b565b9392505050565b634e487b7160e01b5f52600160045260245ffd5b5f60808284031280156104a0575f80fd5b50604051608081016001600160401b03811182821017156104cf57634e487b7160e01b5f52604160045260245ffd5b60405282516104dd8161039b565b81526104eb602084016103b2565b60208201526104fc604084016103b2565b604082015261050d606084016103b2565b60608201529392505050565b60805160a05160c05160e0516101005161012051610140516101605161018051613f6b61067a5f395f818161072501528181611ec801528181612271015281816124250152818161248701528181612505015261253e01525f81816104b9015261215801525f8181610332015261213001525f81816102a501526106f201525f61075801525f818161085901528181611f86015261200901525f8181610434015261175a01525f81816105aa01528181610b3001528181610cda01528181610d9c01528181610ef401528181610f6c015281816110320152818161115f0152818161144b015281816115850152611e2601525f81816105dd01528181610b0601528181610d7401528181610e4d01528181610ed201528181610f4a015281816110bd0152818161113d015281816114d70152818161156301528181611c0c01528181611cb101528181611d4501528181611def01526121080152613f6b5ff3fe60806040526004361061029d575f3560e01c80638a54942f1161015d578063c4b2b980116100c2578063e2a5426011610087578063eacbb63f11610062578063eacbb63f146108e2578063f8a67a6214610901578063fd77d17514610920575f80fd5b8063e2a542601461089a578063e30c3978146108ae578063e8bd73a5146108cd575f80fd5b8063c4b2b980146107dd578063d22290a4146107fc578063d2f7265a14610829578063d522f2ee14610848578063d9253c2d1461087b575f80fd5b80639710704d11610122578063ba6275ab116100fd578063ba6275ab1461077a578063c0d7865514610799578063c415b95c146107b8575f80fd5b80639710704d146106e157806397610f3014610714578063aa579b8014610747575f80fd5b80638a54942f1461065c5780638da5cb5b1461067b578063907f7414146106995780639598da7f146106ad57806396b888fa146106cc575f80fd5b8063562a97e5116102035780636a816548116101c857806374ceb267116101a357806374ceb267146105ff5780637e36c6fc1461061e5780637f8661a11461063d575f80fd5b80636a816548146105855780636b2ace8714610599578063747efea1146105cc575f80fd5b8063562a97e5146104db5780635a0af2e3146104fa5780635ce6c3271461052757806367b1f5df146105475780636939aaf514610566575f80fd5b806324f74697116102635780634e71e0c81161023e5780634e71e0c8146104565780635066ebdd1461046a5780635231e24f146104a8575f80fd5b806324f74697146103ef5780632e1a7d4d146104045780633f7cefce14610423575f80fd5b8062a28b3614610321578063078dfbe714610371578063117aaa6f14610390578063175fadbe146103a357806318fccc76146103c2575f80fd5b3661031d575f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316346040515f6040518083038185875af1925050503d805f811461030b576040519150601f19603f3d011682016040523d82523d5f602084013e610310565b606091505b505090508061031b57005b005b5f80fd5b34801561032c575f80fd5b506103547f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561037c575f80fd5b5061031b61038b36600461279b565b61093f565b61031b61039e366004612927565b610a73565b3480156103ae575f80fd5b5061031b6103bd3660046129aa565b610c19565b3480156103cd575f80fd5b506103e16103dc3660046129e8565b610c73565b604051908152602001610368565b3480156103fa575f80fd5b506103e160085481565b34801561040f575f80fd5b506103e161041e366004612a16565b610fcb565b34801561042e575f80fd5b506103547f000000000000000000000000000000000000000000000000000000000000000081565b348015610461575f80fd5b5061031b611189565b348015610475575f80fd5b50610498610484366004612a2d565b60036020525f908152604090205460ff1681565b6040519015158152602001610368565b3480156104b3575f80fd5b506103547f000000000000000000000000000000000000000000000000000000000000000081565b3480156104e6575f80fd5b50600554610354906001600160a01b031681565b348015610505575f80fd5b50610498610514366004612a2d565b5f546001600160a01b0391821691161490565b348015610532575f80fd5b5060015461049890600160a01b900460ff1681565b348015610552575f80fd5b5061031b610561366004612a2d565b611244565b348015610571575f80fd5b5061031b610580366004612a16565b6112e5565b348015610590575f80fd5b5061031b6112f1565b3480156105a4575f80fd5b506103547f000000000000000000000000000000000000000000000000000000000000000081565b3480156105d7575f80fd5b506103547f000000000000000000000000000000000000000000000000000000000000000081565b34801561060a575f80fd5b5061031b610619366004612a48565b61139b565b348015610629575f80fd5b50600654610354906001600160a01b031681565b348015610648575f80fd5b506103e1610657366004612a16565b61143f565b348015610667575f80fd5b5061031b610676366004612a16565b6115c3565b348015610686575f80fd5b505f54610354906001600160a01b031681565b3480156106a4575f80fd5b5061049861164a565b3480156106b8575f80fd5b5061031b6106c7366004612a2d565b6117d1565b3480156106d7575f80fd5b506103e160095481565b3480156106ec575f80fd5b506103547f000000000000000000000000000000000000000000000000000000000000000081565b34801561071f575f80fd5b506103547f000000000000000000000000000000000000000000000000000000000000000081565b348015610752575f80fd5b506103547f000000000000000000000000000000000000000000000000000000000000000081565b348015610785575f80fd5b5061031b610794366004612a74565b611860565b3480156107a4575f80fd5b5061031b6107b3366004612a2d565b6118e8565b3480156107c3575f80fd5b50600454610354906201000090046001600160a01b031681565b3480156107e8575f80fd5b5061031b6107f73660046139dc565b505050565b348015610807575f80fd5b506004546108169061ffff1681565b60405161ffff9091168152602001610368565b348015610834575f80fd5b50600754610354906001600160a01b031681565b348015610853575f80fd5b506103547f000000000000000000000000000000000000000000000000000000000000000081565b348015610886575f80fd5b50610498610895366004613b75565b611977565b3480156108a5575f80fd5b506103e1611a7a565b3480156108b9575f80fd5b50600154610354906001600160a01b031681565b3480156108d8575f80fd5b506103e160025481565b3480156108ed575f80fd5b5061031b6108fc366004613bbf565b611ad2565b34801561090c575f80fd5b5061031b61091b366004613bf1565b611bc4565b34801561092b575f80fd5b5061031b61093a3660046139dc565b611c6f565b5f546001600160a01b0316331461098a5760405162461bcd60e51b815260206004820181905260248201525f80516020613f1683398151915260448201526064015b60405180910390fd5b8115610a53576001600160a01b0383161515806109a45750805b6109f05760405162461bcd60e51b815260206004820152601560248201527f4f776e61626c653a207a65726f206164647265737300000000000000000000006044820152606401610981565b5f80546040516001600160a01b03808716939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a35f80546001600160a01b0385166001600160a01b031991821617909155600180549091169055505050565b600180546001600160a01b0319166001600160a01b038516179055505050565b5f546001600160a01b0316331480610a995750335f9081526003602052604090205460ff165b610aef5760405162461bcd60e51b815260206004820152602160248201527f42656e746f426f782053747261746567793a206f6e6c79204578656375746f726044820152607360f81b6064820152608401610981565b604051634ffe34db60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301525f917f000000000000000000000000000000000000000000000000000000000000000090911690634ffe34db906024016040805180830381865afa158015610b76573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610b9a9190613c3b565b51905082610bb36127106001600160801b038416613c8c565b610bbd9190613ca3565b610bd0906001600160801b038316613cc2565b600a8190555f9061271090610be6908590613c8c565b610bf09190613ca3565b9050610c01600a546001835f611dcc565b610c0e8989898989611e83565b505050505050505050565b5f546001600160a01b03163314610c5f5760405162461bcd60e51b815260206004820181905260248201525f80516020613f168339815191526044820152606401610981565b6107f76001600160a01b0384168383612225565b6001545f90600160a01b900460ff1615610ccf5760405162461bcd60e51b815260206004820152601960248201527f42656e746f426f782053747261746567793a20657869746564000000000000006044820152606401610981565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610d475760405162461bcd60e51b815260206004820181905260248201527f42656e746f426f782053747261746567793a206f6e6c792042656e746f426f786044820152606401610981565b6001600160a01b03821630148015610e115750600254604051634ffe34db60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301527f00000000000000000000000000000000000000000000000000000000000000001690634ffe34db906024016040805180830381865afa158015610de0573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610e049190613c3b565b516001600160801b031611155b8015610e1c57505f83115b15610fc2575f610e2b8461226e565b6040516370a0823160e01b81523060048201529091505f906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015610e92573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610eb69190613cd5565b90505f8212610f22578015610f1957610f196001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000836122e4565b9150610fc59050565b8015610fba575f610f338284613cec565b90505f811315610fa757610f916001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000836122e4565b610fa2610f9d84613d13565b61240f565b610fb0565b610fb08261240f565b9250610fc5915050565b509050610fc5565b505f5b92915050565b6001545f90600160a01b900460ff16156110275760405162461bcd60e51b815260206004820152601960248201527f42656e746f426f782053747261746567793a20657869746564000000000000006044820152606401610981565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461109f5760405162461bcd60e51b815260206004820181905260248201527f42656e746f426f782053747261746567793a206f6e6c792042656e746f426f786044820152606401610981565b6110a8826124ef565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa15801561110a573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061112e9190613cd5565b90506111846001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000836122e4565b919050565b6001546001600160a01b03163381146111e45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c657220213d2070656e64696e67206f776e65726044820152606401610981565b5f80546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a35f80546001600160a01b039092166001600160a01b0319928316179055600180549091169055565b5f546001600160a01b0316331461128a5760405162461bcd60e51b815260206004820181905260248201525f80516020613f168339815191526044820152606401610981565b6007546040516001600160a01b038084169216907fd7b4d481f762aa8c2ca1fe7a459099a1abb3863f10a209825ff982f8324eba1d905f90a3600780546001600160a01b0319166001600160a01b0392909216919091179055565b6112ee8161240f565b50565b5f546001600160a01b031633146113375760405162461bcd60e51b815260206004820181905260248201525f80516020613f168339815191526044820152606401610981565b600554600954604051630c50112160e21b81526001600160a01b039092169163314044849161136c9160040190815260200190565b5f604051808303815f87803b158015611383575f80fd5b505af1158015611395573d5f803e3d5ffd5b50505050565b5f546001600160a01b031633146113e15760405162461bcd60e51b815260206004820181905260248201525f80516020613f168339815191526044820152606401610981565b6001600160a01b0382165f81815260036020908152604091829020805460ff191685151590811790915591519182527fb08a78f53a7fe017d5ca8c8fcdbf06ffa2c31f2ab668378a17700d9fc558717e910160405180910390a25050565b5f336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146114b85760405162461bcd60e51b815260206004820181905260248201527f42656e746f426f782053747261746567793a206f6e6c792042656e746f426f786044820152606401610981565b6114c061253c565b6040516370a0823160e01b81523060048201525f907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015611524573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906115489190613cd5565b90506115548382613d2d565b91506115aa6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000836122e4565b506001805460ff60a01b1916600160a01b179055919050565b5f546001600160a01b031633146116095760405162461bcd60e51b815260206004820181905260248201525f80516020613f168339815191526044820152606401610981565b60085460408051918252602082018390527f4792443a1d463374374f5007e8afa5d7c5dd763c7d43c4352d1b0b0882c25110910160405180910390a1600855565b5f8060405160200161168b906020808252818101527f455845435554455f4445504f5349545f464541545552455f44495341424c4544604082015260600190565b60408051601f198184030181528282528051602091820120600554639c8b2cfb60e01b8552925190936001600160a01b0390931692639c8b2cfb9260048083019391928290030181865afa1580156116e5573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906117099190613d53565b60405160200161172c9291909182526001600160a01b0316602082015260400190565b60408051808303601f19018152908290528051602090910120633d70e7e560e11b82526004820181905291507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690637ae1cfca90602401602060405180830381865afa1580156117a7573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906117cb9190613d6e565b91505090565b5f546001600160a01b031633146118175760405162461bcd60e51b815260206004820181905260248201525f80516020613f168339815191526044820152606401610981565b600680546001600160a01b0319166001600160a01b0383169081179091556040517f8522e8e230e000d1ef40c1f5bd1cee80984e43d2635c4a8e372bcc060a4f065b905f90a250565b5f546001600160a01b03163314806118865750335f9081526003602052604090205460ff165b6118dc5760405162461bcd60e51b815260206004820152602160248201527f42656e746f426f782053747261746567793a206f6e6c79204578656375746f726044820152607360f81b6064820152608401610981565b61139584848484611dcc565b5f546001600160a01b0316331461192e5760405162461bcd60e51b815260206004820181905260248201525f80516020613f168339815191526044820152606401610981565b600580546001600160a01b0319166001600160a01b0383169081179091556040517f8b86d4912ab08c2cce166e563b94ad204e56cd031de289d7e969eddff12d0562905f90a250565b5f80546001600160a01b031633146119be5760405162461bcd60e51b815260206004820181905260248201525f80516020613f168339815191526044820152606401610981565b600154600160a01b900460ff16611a175760405162461bcd60e51b815260206004820152601d60248201527f42656e746f426f782053747261746567793a206e6f74206578697465640000006044820152606401610981565b836001600160a01b03168383604051611a309190613d89565b5f6040518083038185875af1925050503d805f8114611a6a576040519150601f19603f3d011682016040523d82523d5f602084013e611a6f565b606091505b509095945050505050565b604051602001611ab9906020808252818101527f455845435554455f4445504f5349545f464541545552455f44495341424c4544604082015260600190565b6040516020818303038152906040528051906020012081565b5f546001600160a01b03163314611afe57604051631120ac6d60e31b8152336004820152602401610981565b60045461271061ffff9091161115611b2957604051637d941fcf60e11b815260040160405180910390fd5b6004546040805161ffff8084168252841660208201526001600160a01b038581169362010000900416917f3211c83a09d01653307dce8be31e51c79240be602c393a64e512de455a4dd423910160405180910390a36004805475ffffffffffffffffffffffffffffffffffffffffffff1916620100006001600160a01b03949094169390930261ffff19169290921761ffff91909116179055565b5f546001600160a01b03163314611c0a5760405162461bcd60e51b815260206004820181905260248201525f80516020613f168339815191526044820152606401610981565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b031603611c5b5760405162873c1d60e41b815260040160405180910390fd5b6107f76001600160a01b0384168284612594565b8151516001600160a01b03163014611c9a576040516308e4775b60e01b815260040160405180910390fd5b6040516370a0823160e01b81523060048201525f907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015611cfe573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611d229190613cd5565b90505f80611d2f836125d4565b6004549193509150611d74906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116916201000090041683612594565b60408051848152602081018490529081018290527fafc9bdb3d67ef35822542e64c17e0f59200fe7eafc0556e498c197ff04948a069060600160405180910390a1611dc4600a5460015f80611dcc565b505050505050565b8315611dd85760028490555b6040516366c6bb0b60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301528415156024830152604482018490527f000000000000000000000000000000000000000000000000000000000000000016906366c6bb0b906064015f604051808303815f87803b158015611e67575f80fd5b505af1158015611e79573d5f803e3d5ffd5b5050505050505050565b611e8b61164a565b15611ea9576040516358fdc02560e11b815260040160405180910390fd5b604051632cbf6a9f60e11b81526001600160a01b0386811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063597ed53e90602401602060405180830381865afa158015611f0d573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611f319190613d6e565b611f4d5760405162873c1d60e41b815260040160405180910390fd5b805115611f6c57600754611f6a906001600160a01b03168261260a565b505b600554604051637d39aaf160e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526024820185905290911690637d39aaf19084906044015f604051808303818588803b158015611fd9575f80fd5b505af1158015611feb573d5f803e3d5ffd5b50506005546001600160a01b03908116935063e6d66ac892508791507f0000000000000000000000000000000000000000000000000000000000000000906120359083163061261e565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b1681526001600160a01b03938416600482015292909116602483015260448201526064015f604051808303815f87803b158015612099575f80fd5b505af11580156120ab573d5f803e3d5ffd5b505f92508291506120b99050565b6040519080825280602002602001820160405280156120e2578160200160208202803683370190505b5060408051610180810182523080825260208201525f8183018190526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660608401527f0000000000000000000000000000000000000000000000000000000000000000811660808401527f0000000000000000000000000000000000000000000000000000000000000000811660a084015260c0830185905260e08301859052610100830189905261012083019190915261014082018790526008546101608301526005549251635b4e956160e01b81529394509092911690635b4e9561906121d9908490600401613df8565b6020604051808303815f875af11580156121f5573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906122199190613cd5565b60095550505050505050565b81601452806034526f095ea7b30000000000000000000000005f5260205f604460105f875af13d1560015f5114171661226557633e3f8f735f526004601cfd5b5f603452505050565b5f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630572b0cc6040518163ffffffff1660e01b81526004015f604051808303815f87803b1580156122c7575f80fd5b505af11580156122d9573d5f803e3d5ffd5b505f95945050505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b17905291515f928392908716916123549190613d89565b5f604051808303815f865af19150503d805f811461238d576040519150601f19603f3d011682016040523d82523d5f602084013e612392565b606091505b50915091508180156123bc5750805115806123bc5750808060200190518101906123bc9190613d6e565b6124085760405162461bcd60e51b815260206004820152601c60248201527f426f72696e6745524332303a205472616e73666572206661696c6564000000006044820152606401610981565b5050505050565b60405163534a7e1d60e11b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a694fc3a906024015b5f604051808303815f87803b15801561246f575f80fd5b505af1158015612481573d5f803e3d5ffd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630572b0cc6040518163ffffffff1660e01b81526004015f604051808303815f87803b1580156124dd575f80fd5b505af1158015612408573d5f803e3d5ffd5b604051632e1a7d4d60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401612458565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e9fad8ee6040518163ffffffff1660e01b81526004015f604051808303815f87803b158015611383575f80fd5b81601452806034526fa9059cbb0000000000000000000000005f5260205f604460105f875af13d1560015f51141716612265576390b8ec185f526004601cfd5b6004545f908190612710906125ed9061ffff1685613c8c565b6125f79190613ca3565b90506126038184613f02565b9150915091565b606061261783835f612651565b9392505050565b5f816014526f70a082310000000000000000000000005f5260208060246010865afa601f3d111660205102905092915050565b6060814710156126765760405163cd78605960e01b8152306004820152602401610981565b5f80856001600160a01b031684866040516126919190613d89565b5f6040518083038185875af1925050503d805f81146126cb576040519150601f19603f3d011682016040523d82523d5f602084013e6126d0565b606091505b50915091506126e08683836126ea565b9695505050505050565b6060826126ff576126fa82612746565b612617565b815115801561271657506001600160a01b0384163b155b1561273f57604051639996b31560e01b81526001600160a01b0385166004820152602401610981565b5080612617565b8051156127565780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b6001600160a01b03811681146112ee575f80fd5b80356111848161276f565b80151581146112ee575f80fd5b5f805f606084860312156127ad575f80fd5b83356127b88161276f565b925060208401356127c88161278e565b915060408401356127d88161278e565b809150509250925092565b634e487b7160e01b5f52604160045260245ffd5b60405160e081016001600160401b0381118282101715612819576128196127e3565b60405290565b604080519081016001600160401b0381118282101715612819576128196127e3565b604051606081016001600160401b0381118282101715612819576128196127e3565b60405161012081016001600160401b0381118282101715612819576128196127e3565b604051601f8201601f191681016001600160401b03811182821017156128ae576128ae6127e3565b604052919050565b5f82601f8301126128c5575f80fd5b8135602083015f806001600160401b038411156128e4576128e46127e3565b50601f8301601f19166020016128f981612886565b91505082815285838301111561290d575f80fd5b828260208301375f92810160200192909252509392505050565b5f805f805f805f60e0888a03121561293d575f80fd5b87356129488161276f565b965060208801356129588161276f565b9550604088013594506060880135935060808801356001600160401b03811115612980575f80fd5b61298c8a828b016128b6565b979a969950949793969560a0850135955060c0909401359392505050565b5f805f606084860312156129bc575f80fd5b83356129c78161276f565b925060208401356129d78161276f565b929592945050506040919091013590565b5f80604083850312156129f9575f80fd5b823591506020830135612a0b8161276f565b809150509250929050565b5f60208284031215612a26575f80fd5b5035919050565b5f60208284031215612a3d575f80fd5b81356126178161276f565b5f8060408385031215612a59575f80fd5b8235612a648161276f565b91506020830135612a0b8161278e565b5f805f8060808587031215612a87575f80fd5b843593506020850135612a998161278e565b9250604085013591506060850135612ab08161278e565b939692955090935050565b5f6001600160401b03821115612ad357612ad36127e3565b5060051b60200190565b5f82601f830112612aec575f80fd5b8135612aff612afa82612abb565b612886565b8082825260208201915060208360051b860101925085831115612b20575f80fd5b602085015b83811015612b46578035612b388161276f565b835260209283019201612b25565b5095945050505050565b5f60e08284031215612b60575f80fd5b612b686127f7565b823581526020808401359082015260408084013590820152606080840135908201526080808401359082015260a0808401359082015260c0928301359281019290925250919050565b5f60208284031215612bc1575f80fd5b604051602081016001600160401b0381118282101715612be357612be36127e3565b6040529050808235612bf48161278e565b905292915050565b5f82601f830112612c0b575f80fd5b8135612c19612afa82612abb565b8082825260208201915060208360051b860101925085831115612c3a575f80fd5b602085015b83811015612b465780356001600160401b03811115612c5c575f80fd5b86016040818903601f19011215612c71575f80fd5b612c7961281f565b60208201356001600160401b03811115612c91575f80fd5b612ca08a6020838601016128b6565b82525060408201356001600160401b03811115612cbb575f80fd5b612cca8a602083860101612add565b6020830152508085525050602083019250602081019050612c3f565b5f60408284031215612cf6575f80fd5b612cfe61281f565b905081356001600160401b03811115612d15575f80fd5b8201601f81018413612d25575f80fd5b8035612d33612afa82612abb565b8082825260208201915060208360051b850101925086831115612d54575f80fd5b602084015b83811015612de25780356001600160401b03811115612d76575f80fd5b85016040818a03601f19011215612d8b575f80fd5b612d9361281f565b60208201356001600160401b03811115612dab575f80fd5b612dba8b6020838601016128b6565b82525060408201359150612dcd8261276f565b60208181019290925284529283019201612d59565b50845250505060208201356001600160401b03811115612e00575f80fd5b612e0c84828501612bfc565b60208301525092915050565b5f82601f830112612e27575f80fd5b8135612e35612afa82612abb565b8082825260208201915060208360051b860101925085831115612e56575f80fd5b602085015b83811015612b465780356001600160401b03811115612e78575f80fd5b86016040818903601f19011215612e8d575f80fd5b612e9561281f565b60208201356001600160401b03811115612ead575f80fd5b612ebc8a6020838601016128b6565b82525060408201356001600160401b03811115612ed7575f80fd5b60208184010192505088601f830112612eee575f80fd5b8135612efc612afa82612abb565b8082825260208201915060208360051b86010192508b831115612f1d575f80fd5b6020850194505b82851015612f3f578435825260209485019490910190612f24565b8060208501525050508085525050602083019250602081019050612e5b565b5f60408284031215612f6e575f80fd5b612f7661281f565b905081356001600160401b03811115612f8d575f80fd5b8201601f81018413612f9d575f80fd5b8035612fab612afa82612abb565b8082825260208201915060208360051b850101925086831115612fcc575f80fd5b602084015b838110156130525780356001600160401b03811115612fee575f80fd5b85016040818a03601f19011215613003575f80fd5b61300b61281f565b60208201356001600160401b03811115613023575f80fd5b6130328b6020838601016128b6565b825250604091909101356020808301919091529084529283019201612fd1565b50845250505060208201356001600160401b03811115613070575f80fd5b612e0c84828501612e18565b5f6040828403121561308c575f80fd5b61309461281f565b905081356001600160401b038111156130ab575f80fd5b8201601f810184136130bb575f80fd5b80356130c9612afa82612abb565b8082825260208201915060208360051b8501019250868311156130ea575f80fd5b602084015b838110156130525780356001600160401b0381111561310c575f80fd5b85016040818a03601f19011215613121575f80fd5b61312961281f565b60208201356001600160401b03811115613141575f80fd5b6131508b6020838601016128b6565b8252506040919091013560208083019190915290845292830192016130ef565b5f82601f83011261317f575f80fd5b813561318d612afa82612abb565b8082825260208201915060208360051b8601019250858311156131ae575f80fd5b602085015b83811015612b465780356001600160401b038111156131d0575f80fd5b86016040818903601f190112156131e5575f80fd5b6131ed61281f565b60208201356001600160401b03811115613205575f80fd5b6132148a6020838601016128b6565b82525060408201356001600160401b0381111561322f575f80fd5b60208184010192505088601f830112613246575f80fd5b8135613254612afa82612abb565b8082825260208201915060208360051b86010192508b831115613275575f80fd5b6020850194505b828510156132a057843561328f8161278e565b82526020948501949091019061327c565b80602085015250505080855250506020830192506020810190506131b3565b5f604082840312156132cf575f80fd5b6132d761281f565b905081356001600160401b038111156132ee575f80fd5b8201601f810184136132fe575f80fd5b803561330c612afa82612abb565b8082825260208201915060208360051b85010192508683111561332d575f80fd5b602084015b838110156133bb5780356001600160401b0381111561334f575f80fd5b85016040818a03601f19011215613364575f80fd5b61336c61281f565b60208201356001600160401b03811115613384575f80fd5b6133938b6020838601016128b6565b825250604082013591506133a68261278e565b60208181019290925284529283019201613332565b50845250505060208201356001600160401b038111156133d9575f80fd5b612e0c84828501613170565b5f604082840312156133f5575f80fd5b6133fd61281f565b905081356001600160401b03811115613414575f80fd5b8201601f81018413613424575f80fd5b8035613432612afa82612abb565b8082825260208201915060208360051b850101925086831115613453575f80fd5b602084015b838110156130525780356001600160401b03811115613475575f80fd5b85016040818a03601f1901121561348a575f80fd5b61349261281f565b60208201356001600160401b038111156134aa575f80fd5b6134b98b6020838601016128b6565b825250604091909101356020808301919091529084529283019201613458565b5f82601f8301126134e8575f80fd5b81356134f6612afa82612abb565b8082825260208201915060208360051b860101925085831115613517575f80fd5b602085015b83811015612b465780356001600160401b03811115613539575f80fd5b86016040818903601f1901121561354e575f80fd5b61355661281f565b60208201356001600160401b0381111561356e575f80fd5b61357d8a6020838601016128b6565b82525060408201356001600160401b03811115613598575f80fd5b60208184010192505088601f8301126135af575f80fd5b81356135bd612afa82612abb565b8082825260208201915060208360051b86010192508b8311156135de575f80fd5b602085015b8381101561361e5780356001600160401b03811115613600575f80fd5b61360f8e6020838a01016128b6565b845250602092830192016135e3565b50806020850152505050808552505060208301925060208101905061351c565b5f6040828403121561364e575f80fd5b61365661281f565b905081356001600160401b0381111561366d575f80fd5b8201601f8101841361367d575f80fd5b803561368b612afa82612abb565b8082825260208201915060208360051b8501019250868311156136ac575f80fd5b602084015b838110156137585780356001600160401b038111156136ce575f80fd5b85016040818a03601f190112156136e3575f80fd5b6136eb61281f565b60208201356001600160401b03811115613703575f80fd5b6137128b6020838601016128b6565b82525060408201356001600160401b0381111561372d575f80fd5b61373c8b6020838601016128b6565b60208301525080855250506020830192506020810190506136b1565b50845250505060208201356001600160401b03811115613776575f80fd5b612e0c848285016134d9565b5f60408284031215613792575f80fd5b61379a61281f565b905081356001600160401b038111156137b1575f80fd5b8201601f810184136137c1575f80fd5b80356137cf612afa82612abb565b8082825260208201915060208360051b8501019250868311156137f0575f80fd5b602084015b838110156137585780356001600160401b03811115613812575f80fd5b85016040818a03601f19011215613827575f80fd5b61382f61281f565b60208201356001600160401b03811115613847575f80fd5b6138568b6020838601016128b6565b82525060408201356001600160401b03811115613871575f80fd5b6138808b6020838601016128b6565b60208301525080855250506020830192506020810190506137f5565b5f60e082840312156138ac575f80fd5b6138b46127f7565b905081356001600160401b038111156138cb575f80fd5b6138d784828501612ce6565b82525060208201356001600160401b038111156138f2575f80fd5b6138fe84828501612f5e565b60208301525060408201356001600160401b0381111561391c575f80fd5b6139288482850161307c565b60408301525060608201356001600160401b03811115613946575f80fd5b613952848285016132bf565b60608301525060808201356001600160401b03811115613970575f80fd5b61397c848285016133e5565b60808301525060a08201356001600160401b0381111561399a575f80fd5b6139a68482850161363e565b60a08301525060c08201356001600160401b038111156139c4575f80fd5b6139d084828501613782565b60c08301525092915050565b5f805f606084860312156139ee575f80fd5b8335925060208401356001600160401b03811115613a0a575f80fd5b84016101208187031215613a1c575f80fd5b613a24612841565b81356001600160401b03811115613a39575f80fd5b82016101208189031215613a4b575f80fd5b613a53612863565b613a5c82612783565b8152613a6a60208301612783565b6020820152613a7b60408301612783565b6040820152613a8c60608301612783565b6060820152613a9d60808301612783565b6080820152613aae60a08301612783565b60a0820152613abf60c08301612783565b60c082015260e08201356001600160401b03811115613adc575f80fd5b613ae88a828501612add565b60e0830152506101008201356001600160401b03811115613b07575f80fd5b613b138a828501612add565b61010083015250825250613b2a8760208401612b50565b6020820152613b3d876101008401612bb1565b6040820152809350505060408401356001600160401b03811115613b5f575f80fd5b613b6b8682870161389c565b9150509250925092565b5f805f60608486031215613b87575f80fd5b8335613b928161276f565b92506020840135915060408401356001600160401b03811115613bb3575f80fd5b613b6b868287016128b6565b5f8060408385031215613bd0575f80fd5b8235613bdb8161276f565b9150602083013561ffff81168114612a0b575f80fd5b5f805f60608486031215613c03575f80fd5b8335613c0e8161276f565b92506020840135915060408401356127d88161276f565b80516001600160801b0381168114611184575f80fd5b5f6040828403128015613c4c575f80fd5b50613c5561281f565b613c5e83613c25565b8152613c6c60208401613c25565b60208201529392505050565b634e487b7160e01b5f52601160045260245ffd5b8082028115828204841417610fc557610fc5613c78565b5f82613cbd57634e487b7160e01b5f52601260045260245ffd5b500490565b80820180821115610fc557610fc5613c78565b5f60208284031215613ce5575f80fd5b5051919050565b8082018281125f831280158216821582161715613d0b57613d0b613c78565b505092915050565b5f600160ff1b8201613d2757613d27613c78565b505f0390565b8181035f831280158383131683831282161715613d4c57613d4c613c78565b5092915050565b5f60208284031215613d63575f80fd5b81516126178161276f565b5f60208284031215613d7e575f80fd5b81516126178161278e565b5f82515f5b81811015613da85760208186018101518583015201613d8e565b505f920191825250919050565b5f8151808452602084019350602083015f5b82811015613dee5781516001600160a01b0316865260209586019590910190600101613dc7565b5093949350505050565b60208152613e126020820183516001600160a01b03169052565b5f6020830151613e2d60408401826001600160a01b03169052565b5060408301516001600160a01b03811660608401525060608301516001600160a01b03811660808401525060808301516001600160a01b03811660a08401525060a08301516001600160a01b03811660c08401525060c083015161018060e0840152613e9d6101a0840182613db5565b905060e0840151601f1984830301610100850152613ebb8282613db5565b915050610100840151610120840152610120840151613edf61014085018215159052565b506101408401516101608401526101608401516101808401528091505092915050565b81810381811115610fc557610fc5613c7856fe4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a26469706673582212200cb9b8cf7fd2adb6f6213d60a8d0f3f244d3d7c55ffc73b051e97758eb92b0cc64736f6c634300081a0033",
  "args_data": "0x0000000000000000000000007f1fa204bb700853d36994da19f830b6ad18455c0000000000000000000000007c8fef8ea9b1fe46a7689bfb8149341c90431d3800000000000000000000000069c527fc77291722b52649e45c838e41be8bf5d50000000000000000000000005ca84c34a381434786738735265b9f3fd814b8240000000000000000000000007452c558d45f8afc8c83dae62c3f8a5be19c71f6000000000000000000000000a71a021ef66b03e45e0d85590432dfcfa1b7174c0000000000000000000000005b51f27c279aeecc8352688b69d55b533417e263",
  "tx_hash": "0xc5afdced4ac6010410123e19fd30ad4df10dbd24580e65d52a6eb87e89d57e18",
  "args": [
    "0xA71A021EF66B03E45E0d85590432DFCfa1b7174C",
    "true",
    "false"
  ],
  "data": "0x078dfbe7000000000000000000000000a71a021ef66b03e45e0d85590432dfcfa1b7174c00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000",
  "artifact_path": "GmStrategy.sol",
  "artifact_full_path": "GmStrategy.sol:GmStrategy",
  "standardJsonInput": {
    "language": "Solidity",
    "sources": {
      "src/strategies/GmStrategy.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\nimport {SafeTransferLib} from \"@solady/utils/SafeTransferLib.sol\";\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\nimport {IERC20} from \"@BoringSolidity/interfaces/IERC20.sol\";\nimport {BaseStrategy} from \"./BaseStrategy.sol\";\nimport {IBentoBoxV1} from \"/interfaces/IBentoBoxV1.sol\";\nimport {FeeCollectable} from \"/mixins/FeeCollectable.sol\";\nimport {IGmxV2Deposit, IGmxV2ExchangeRouter, IGmxReader, IGmxV2EventUtils, IGmxDataStore, IGmxV2DepositHandler, IGmxV2DepositCallbackReceiver, IGmxV2Market} from \"/interfaces/IGmxV2.sol\";\nimport {IMultiRewardsStaking} from \"/interfaces/IMultiRewardsStaking.sol\";\n\ncontract GmStrategy is BaseStrategy, FeeCollectable, IGmxV2DepositCallbackReceiver {\n    using SafeTransferLib for address;\n\n    error ErrInsufficientAmountOut();\n    error ErrExecuteDepositsDisabled();\n    error ErrWrongUser();\n    error ErrUnauthorized();\n    error ErrInvalidToken();\n\n    event LogCallbackGasLimitChanged(uint256 previous, uint256 current);\n    event LogExchangeChanged(address indexed previous, address indexed current);\n    event LogMarketMinted(uint256 total, uint256 strategyAmount, uint256 feeAmount);\n    event LogRouterChanged(address indexed router);\n    event LogReaderChanged(address indexed reader);\n\n    bytes32 public constant EXECUTE_DEPOSIT_FEATURE_DISABLED = keccak256(abi.encode(\"EXECUTE_DEPOSIT_FEATURE_DISABLED\"));\n\n    IGmxV2ExchangeRouter public GMX_ROUTER;\n    IGmxReader public GMX_READER;\n\n    IGmxDataStore public immutable DATASTORE;\n    address public immutable DEPOSIT_VAULT;\n    address public immutable SYNTHETICS_ROUTER;\n    address public immutable REFUND_TO;\n    address public immutable LONG_TOKEN;\n    address public immutable SHORT_TOKEN;\n    IMultiRewardsStaking public immutable STAKING;\n\n    address public exchange;\n    uint256 public callbackGasLimit = 2_000_000;\n    bytes32 public orderKey;\n\n    /// @dev Keep in memory the max balance once the GMX tokens are deposited\n    uint256 private maxBalance;\n\n    modifier onlyDepositHandler() {\n        if (msg.sender != address(GMX_ROUTER.depositHandler())) {\n            revert ErrUnauthorized();\n        }\n        _;\n    }\n\n    receive() external payable virtual {\n        (bool success, ) = REFUND_TO.call{value: msg.value}(\"\");\n\n        // ignore failures\n        if (!success) {\n            return;\n        }\n    }\n\n    constructor(\n        address _strategyToken,\n        IBentoBoxV1 _degenBox,\n        IGmxV2ExchangeRouter _gmxRouter,\n        IGmxReader _gmxReader,\n        address _syntheticsRouter,\n        address _refundTo,\n        address _staking\n    ) BaseStrategy(IERC20(_strategyToken), _degenBox) {\n        assert(IMultiRewardsStaking(_staking).stakingToken() == _strategyToken);\n\n        feeBips = 200; // 2%\n        feeCollector = msg.sender;\n\n        GMX_ROUTER = _gmxRouter;\n        GMX_READER = _gmxReader;\n        SYNTHETICS_ROUTER = _syntheticsRouter;\n        DATASTORE = IGmxDataStore(_gmxRouter.dataStore());\n        DEPOSIT_VAULT = IGmxV2DepositHandler(_gmxRouter.depositHandler()).depositVault();\n        REFUND_TO = _refundTo;\n\n        IGmxV2Market.Props memory props = GMX_READER.getMarket(address(DATASTORE), _strategyToken);\n        LONG_TOKEN = props.longToken;\n        SHORT_TOKEN = props.shortToken;\n\n        STAKING = IMultiRewardsStaking(_staking);\n\n        _strategyToken.safeApprove(address(_staking), type(uint256).max);\n    }\n\n    //////////////////////////////////////////////////////////////////////////////////////////////\n    /// EXECUTORS\n    //////////////////////////////////////////////////////////////////////////////////////////////\n\n    /// @param _rewardToken Reward token from the staking contract\n    /// @param _marketInputToken Same as _rewardToken when _swapData is empty,\n    /// otherwise the token to use as market token input\n    function run(\n        address _rewardToken,\n        address _marketInputToken,\n        uint256 _marketMinOut,\n        uint256 _executionFee,\n        bytes memory _swapData,\n        uint256 _maxBentoBoxAmountIncreaseInBips,\n        uint256 _maxBentoBoxChangeAmountInBips\n    ) external payable onlyExecutor {\n        uint128 totals = bentoBox.totals(strategyToken).elastic;\n        maxBalance = totals + ((totals * BIPS) / _maxBentoBoxAmountIncreaseInBips);\n        uint256 maxChangeAmount = (maxBalance * _maxBentoBoxChangeAmountInBips) / BIPS;\n\n        _safeHarvest(maxBalance, true, maxChangeAmount, false);\n        _mintMarketTokens(_rewardToken, _marketInputToken, _marketMinOut, _executionFee, _swapData);\n    }\n\n    //////////////////////////////////////////////////////////////////////////////////////////////\n    /// GMX CALLBACKS\n    //////////////////////////////////////////////////////////////////////////////////////////////\n    function afterDepositExecution(bytes32, IGmxV2Deposit.Props memory deposit, IGmxV2EventUtils.EventLogData memory) external override {\n        // verify that the deposit was from this address\n        if (deposit.addresses.account != address(this)) {\n            revert ErrWrongUser();\n        }\n\n        uint256 total = strategyToken.balanceOf(address(this));\n        (uint256 amountOut, uint256 feeAmount) = calculateFees(total);\n\n        address(strategyToken).safeTransfer(feeCollector, feeAmount);\n        emit LogMarketMinted(total, amountOut, feeAmount);\n\n        _safeHarvest(maxBalance, true, 0, false);\n    }\n\n    function afterDepositCancellation(\n        bytes32 key,\n        IGmxV2Deposit.Props memory deposit,\n        IGmxV2EventUtils.EventLogData memory eventData\n    ) external override {}\n\n    //////////////////////////////////////////////////////////////////////////////////////////////\n    /// ADMIN\n    //////////////////////////////////////////////////////////////////////////////////////////////\n    function cancelOrder() external onlyOwner {\n        GMX_ROUTER.cancelDeposit(orderKey);\n    }\n\n    function setTokenApproval(address _token, address _to, uint256 _amount) external onlyOwner {\n        _token.safeApprove(_to, _amount);\n    }\n\n    function setCallbackGasLimit(uint256 _callbackGasLimit) external onlyOwner {\n        emit LogCallbackGasLimitChanged(callbackGasLimit, _callbackGasLimit);\n        callbackGasLimit = _callbackGasLimit;\n    }\n\n    function setExchange(address _exchange) external onlyOwner {\n        emit LogExchangeChanged(exchange, _exchange);\n        exchange = _exchange;\n    }\n\n    function rescueToken(address _token, uint256 _amount, address _to) external onlyOwner {\n        if (_token == address(strategyToken)) {\n            revert ErrInvalidToken();\n        }\n\n        _token.safeTransfer(_to, _amount);\n    }\n\n    function setRouter(address _router) external onlyOwner {\n        GMX_ROUTER = IGmxV2ExchangeRouter(_router);\n        emit LogRouterChanged(_router);\n    }\n\n    function setReader(address _reader) external onlyOwner {\n        GMX_READER = IGmxReader(_reader);\n        emit LogReaderChanged(_reader);\n    }\n\n    //////////////////////////////////////////////////////////////////////////////////////////////\n    /// VIEWS\n    //////////////////////////////////////////////////////////////////////////////////////////////\n    function isFeeOperator(address account) public view override returns (bool) {\n        return account == owner;\n    }\n\n    function isDepositExecutionDisabled() public view returns (bool) {\n        bytes32 depositExecutionDisabledKey = keccak256(abi.encode(EXECUTE_DEPOSIT_FEATURE_DISABLED, GMX_ROUTER.depositHandler()));\n        return DATASTORE.getBool(depositExecutionDisabledKey);\n    }\n\n    //////////////////////////////////////////////////////////////////////////////////////////////\n    /// INTERNALS\n    //////////////////////////////////////////////////////////////////////////////////////////////\n    function _mintMarketTokens(\n        address _rewardToken,\n        address _marketInputToken,\n        uint256 _marketMinOut,\n        uint256 _executionFee,\n        bytes memory _swapData\n    ) internal {\n        if (isDepositExecutionDisabled()) {\n            revert ErrExecuteDepositsDisabled();\n        }\n\n        // only allow staking rewards\n        if (!STAKING.isSupportedReward(_rewardToken)) {\n            revert ErrInvalidToken();\n        }\n\n        if (_swapData.length > 0) {\n            Address.functionCall(exchange, _swapData);\n        }\n\n        GMX_ROUTER.sendWnt{value: _executionFee}(address(DEPOSIT_VAULT), _executionFee);\n        GMX_ROUTER.sendTokens(_marketInputToken, address(DEPOSIT_VAULT), _marketInputToken.balanceOf(address(this)));\n\n        address[] memory emptyPath = new address[](0);\n\n        IGmxV2Deposit.CreateDepositParams memory params = IGmxV2Deposit.CreateDepositParams({\n            receiver: address(this),\n            callbackContract: address(this),\n            uiFeeReceiver: address(0),\n            market: address(strategyToken),\n            initialLongToken: LONG_TOKEN,\n            initialShortToken: SHORT_TOKEN,\n            longTokenSwapPath: emptyPath,\n            shortTokenSwapPath: emptyPath,\n            minMarketTokens: _marketMinOut,\n            shouldUnwrapNativeToken: false,\n            executionFee: _executionFee,\n            callbackGasLimit: callbackGasLimit\n        });\n\n        orderKey = GMX_ROUTER.createDeposit(params);\n    }\n\n    function _skim(uint256 amount) internal override {\n        STAKING.stake(amount);\n        STAKING.getRewards();\n    }\n\n    function _harvest(uint256) internal override returns (int256) {\n        STAKING.getRewards();\n        return int256(0);\n    }\n\n    function _withdraw(uint256 amount) internal override {\n        STAKING.withdraw(amount);\n        STAKING.getRewards();\n    }\n\n    function _exit() internal override {\n        STAKING.exit();\n    }\n}\n"
      },
      "lib/solady/src/utils/SafeTransferLib.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/SafeTransferLib.sol)\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeTransferLib.sol)\n/// @author Permit2 operations from (https://github.com/Uniswap/permit2/blob/main/src/libraries/Permit2Lib.sol)\n///\n/// @dev Note:\n/// - For ETH transfers, please use `forceSafeTransferETH` for DoS protection.\n/// - For ERC20s, this implementation won't check that a token has code,\n///   responsibility is delegated to the caller.\nlibrary SafeTransferLib {\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                       CUSTOM ERRORS                        */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev The ETH transfer has failed.\n    error ETHTransferFailed();\n\n    /// @dev The ERC20 `transferFrom` has failed.\n    error TransferFromFailed();\n\n    /// @dev The ERC20 `transfer` has failed.\n    error TransferFailed();\n\n    /// @dev The ERC20 `approve` has failed.\n    error ApproveFailed();\n\n    /// @dev The Permit2 operation has failed.\n    error Permit2Failed();\n\n    /// @dev The Permit2 amount must be less than `2**160 - 1`.\n    error Permit2AmountOverflow();\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                         CONSTANTS                          */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Suggested gas stipend for contract receiving ETH that disallows any storage writes.\n    uint256 internal constant GAS_STIPEND_NO_STORAGE_WRITES = 2300;\n\n    /// @dev Suggested gas stipend for contract receiving ETH to perform a few\n    /// storage reads and writes, but low enough to prevent griefing.\n    uint256 internal constant GAS_STIPEND_NO_GRIEF = 100000;\n\n    /// @dev The unique EIP-712 domain domain separator for the DAI token contract.\n    bytes32 internal constant DAI_DOMAIN_SEPARATOR =\n        0xdbb8cf42e1ecb028be3f3dbc922e1d878b963f411dc388ced501601c60f7c6f7;\n\n    /// @dev The address for the WETH9 contract on Ethereum mainnet.\n    address internal constant WETH9 = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n\n    /// @dev The canonical Permit2 address.\n    /// [Github](https://github.com/Uniswap/permit2)\n    /// [Etherscan](https://etherscan.io/address/0x000000000022D473030F116dDEE9F6B43aC78BA3)\n    address internal constant PERMIT2 = 0x000000000022D473030F116dDEE9F6B43aC78BA3;\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                       ETH OPERATIONS                       */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    // If the ETH transfer MUST succeed with a reasonable gas budget, use the force variants.\n    //\n    // The regular variants:\n    // - Forwards all remaining gas to the target.\n    // - Reverts if the target reverts.\n    // - Reverts if the current contract has insufficient balance.\n    //\n    // The force variants:\n    // - Forwards with an optional gas stipend\n    //   (defaults to `GAS_STIPEND_NO_GRIEF`, which is sufficient for most cases).\n    // - If the target reverts, or if the gas stipend is exhausted,\n    //   creates a temporary contract to force send the ETH via `SELFDESTRUCT`.\n    //   Future compatible with `SENDALL`: https://eips.ethereum.org/EIPS/eip-4758.\n    // - Reverts if the current contract has insufficient balance.\n    //\n    // The try variants:\n    // - Forwards with a mandatory gas stipend.\n    // - Instead of reverting, returns whether the transfer succeeded.\n\n    /// @dev Sends `amount` (in wei) ETH to `to`.\n    function safeTransferETH(address to, uint256 amount) internal {\n        /// @solidity memory-safe-assembly\n        assembly {\n            if iszero(call(gas(), to, amount, codesize(), 0x00, codesize(), 0x00)) {\n                mstore(0x00, 0xb12d13eb) // `ETHTransferFailed()`.\n                revert(0x1c, 0x04)\n            }\n        }\n    }\n\n    /// @dev Sends all the ETH in the current contract to `to`.\n    function safeTransferAllETH(address to) internal {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Transfer all the ETH and check if it succeeded or not.\n            if iszero(call(gas(), to, selfbalance(), codesize(), 0x00, codesize(), 0x00)) {\n                mstore(0x00, 0xb12d13eb) // `ETHTransferFailed()`.\n                revert(0x1c, 0x04)\n            }\n        }\n    }\n\n    /// @dev Force sends `amount` (in wei) ETH to `to`, with a `gasStipend`.\n    function forceSafeTransferETH(address to, uint256 amount, uint256 gasStipend) internal {\n        /// @solidity memory-safe-assembly\n        assembly {\n            if lt(selfbalance(), amount) {\n                mstore(0x00, 0xb12d13eb) // `ETHTransferFailed()`.\n                revert(0x1c, 0x04)\n            }\n            if iszero(call(gasStipend, to, amount, codesize(), 0x00, codesize(), 0x00)) {\n                mstore(0x00, to) // Store the address in scratch space.\n                mstore8(0x0b, 0x73) // Opcode `PUSH20`.\n                mstore8(0x20, 0xff) // Opcode `SELFDESTRUCT`.\n                if iszero(create(amount, 0x0b, 0x16)) { revert(codesize(), codesize()) } // For gas estimation.\n            }\n        }\n    }\n\n    /// @dev Force sends all the ETH in the current contract to `to`, with a `gasStipend`.\n    function forceSafeTransferAllETH(address to, uint256 gasStipend) internal {\n        /// @solidity memory-safe-assembly\n        assembly {\n            if iszero(call(gasStipend, to, selfbalance(), codesize(), 0x00, codesize(), 0x00)) {\n                mstore(0x00, to) // Store the address in scratch space.\n                mstore8(0x0b, 0x73) // Opcode `PUSH20`.\n                mstore8(0x20, 0xff) // Opcode `SELFDESTRUCT`.\n                if iszero(create(selfbalance(), 0x0b, 0x16)) { revert(codesize(), codesize()) } // For gas estimation.\n            }\n        }\n    }\n\n    /// @dev Force sends `amount` (in wei) ETH to `to`, with `GAS_STIPEND_NO_GRIEF`.\n    function forceSafeTransferETH(address to, uint256 amount) internal {\n        /// @solidity memory-safe-assembly\n        assembly {\n            if lt(selfbalance(), amount) {\n                mstore(0x00, 0xb12d13eb) // `ETHTransferFailed()`.\n                revert(0x1c, 0x04)\n            }\n            if iszero(call(GAS_STIPEND_NO_GRIEF, to, amount, codesize(), 0x00, codesize(), 0x00)) {\n                mstore(0x00, to) // Store the address in scratch space.\n                mstore8(0x0b, 0x73) // Opcode `PUSH20`.\n                mstore8(0x20, 0xff) // Opcode `SELFDESTRUCT`.\n                if iszero(create(amount, 0x0b, 0x16)) { revert(codesize(), codesize()) } // For gas estimation.\n            }\n        }\n    }\n\n    /// @dev Force sends all the ETH in the current contract to `to`, with `GAS_STIPEND_NO_GRIEF`.\n    function forceSafeTransferAllETH(address to) internal {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // forgefmt: disable-next-item\n            if iszero(call(GAS_STIPEND_NO_GRIEF, to, selfbalance(), codesize(), 0x00, codesize(), 0x00)) {\n                mstore(0x00, to) // Store the address in scratch space.\n                mstore8(0x0b, 0x73) // Opcode `PUSH20`.\n                mstore8(0x20, 0xff) // Opcode `SELFDESTRUCT`.\n                if iszero(create(selfbalance(), 0x0b, 0x16)) { revert(codesize(), codesize()) } // For gas estimation.\n            }\n        }\n    }\n\n    /// @dev Sends `amount` (in wei) ETH to `to`, with a `gasStipend`.\n    function trySafeTransferETH(address to, uint256 amount, uint256 gasStipend)\n        internal\n        returns (bool success)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            success := call(gasStipend, to, amount, codesize(), 0x00, codesize(), 0x00)\n        }\n    }\n\n    /// @dev Sends all the ETH in the current contract to `to`, with a `gasStipend`.\n    function trySafeTransferAllETH(address to, uint256 gasStipend)\n        internal\n        returns (bool success)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            success := call(gasStipend, to, selfbalance(), codesize(), 0x00, codesize(), 0x00)\n        }\n    }\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                      ERC20 OPERATIONS                      */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Sends `amount` of ERC20 `token` from `from` to `to`.\n    /// Reverts upon failure.\n    ///\n    /// The `from` account must have at least `amount` approved for\n    /// the current contract to manage.\n    function safeTransferFrom(address token, address from, address to, uint256 amount) internal {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let m := mload(0x40) // Cache the free memory pointer.\n            mstore(0x60, amount) // Store the `amount` argument.\n            mstore(0x40, to) // Store the `to` argument.\n            mstore(0x2c, shl(96, from)) // Store the `from` argument.\n            mstore(0x0c, 0x23b872dd000000000000000000000000) // `transferFrom(address,address,uint256)`.\n            // Perform the transfer, reverting upon failure.\n            if iszero(\n                and( // The arguments of `and` are evaluated from right to left.\n                    or(eq(mload(0x00), 1), iszero(returndatasize())), // Returned 1 or nothing.\n                    call(gas(), token, 0, 0x1c, 0x64, 0x00, 0x20)\n                )\n            ) {\n                mstore(0x00, 0x7939f424) // `TransferFromFailed()`.\n                revert(0x1c, 0x04)\n            }\n            mstore(0x60, 0) // Restore the zero slot to zero.\n            mstore(0x40, m) // Restore the free memory pointer.\n        }\n    }\n\n    /// @dev Sends `amount` of ERC20 `token` from `from` to `to`.\n    ///\n    /// The `from` account must have at least `amount` approved for the current contract to manage.\n    function trySafeTransferFrom(address token, address from, address to, uint256 amount)\n        internal\n        returns (bool success)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let m := mload(0x40) // Cache the free memory pointer.\n            mstore(0x60, amount) // Store the `amount` argument.\n            mstore(0x40, to) // Store the `to` argument.\n            mstore(0x2c, shl(96, from)) // Store the `from` argument.\n            mstore(0x0c, 0x23b872dd000000000000000000000000) // `transferFrom(address,address,uint256)`.\n            success :=\n                and( // The arguments of `and` are evaluated from right to left.\n                    or(eq(mload(0x00), 1), iszero(returndatasize())), // Returned 1 or nothing.\n                    call(gas(), token, 0, 0x1c, 0x64, 0x00, 0x20)\n                )\n            mstore(0x60, 0) // Restore the zero slot to zero.\n            mstore(0x40, m) // Restore the free memory pointer.\n        }\n    }\n\n    /// @dev Sends all of ERC20 `token` from `from` to `to`.\n    /// Reverts upon failure.\n    ///\n    /// The `from` account must have their entire balance approved for the current contract to manage.\n    function safeTransferAllFrom(address token, address from, address to)\n        internal\n        returns (uint256 amount)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let m := mload(0x40) // Cache the free memory pointer.\n            mstore(0x40, to) // Store the `to` argument.\n            mstore(0x2c, shl(96, from)) // Store the `from` argument.\n            mstore(0x0c, 0x70a08231000000000000000000000000) // `balanceOf(address)`.\n            // Read the balance, reverting upon failure.\n            if iszero(\n                and( // The arguments of `and` are evaluated from right to left.\n                    gt(returndatasize(), 0x1f), // At least 32 bytes returned.\n                    staticcall(gas(), token, 0x1c, 0x24, 0x60, 0x20)\n                )\n            ) {\n                mstore(0x00, 0x7939f424) // `TransferFromFailed()`.\n                revert(0x1c, 0x04)\n            }\n            mstore(0x00, 0x23b872dd) // `transferFrom(address,address,uint256)`.\n            amount := mload(0x60) // The `amount` is already at 0x60. We'll need to return it.\n            // Perform the transfer, reverting upon failure.\n            if iszero(\n                and( // The arguments of `and` are evaluated from right to left.\n                    or(eq(mload(0x00), 1), iszero(returndatasize())), // Returned 1 or nothing.\n                    call(gas(), token, 0, 0x1c, 0x64, 0x00, 0x20)\n                )\n            ) {\n                mstore(0x00, 0x7939f424) // `TransferFromFailed()`.\n                revert(0x1c, 0x04)\n            }\n            mstore(0x60, 0) // Restore the zero slot to zero.\n            mstore(0x40, m) // Restore the free memory pointer.\n        }\n    }\n\n    /// @dev Sends `amount` of ERC20 `token` from the current contract to `to`.\n    /// Reverts upon failure.\n    function safeTransfer(address token, address to, uint256 amount) internal {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x14, to) // Store the `to` argument.\n            mstore(0x34, amount) // Store the `amount` argument.\n            mstore(0x00, 0xa9059cbb000000000000000000000000) // `transfer(address,uint256)`.\n            // Perform the transfer, reverting upon failure.\n            if iszero(\n                and( // The arguments of `and` are evaluated from right to left.\n                    or(eq(mload(0x00), 1), iszero(returndatasize())), // Returned 1 or nothing.\n                    call(gas(), token, 0, 0x10, 0x44, 0x00, 0x20)\n                )\n            ) {\n                mstore(0x00, 0x90b8ec18) // `TransferFailed()`.\n                revert(0x1c, 0x04)\n            }\n            mstore(0x34, 0) // Restore the part of the free memory pointer that was overwritten.\n        }\n    }\n\n    /// @dev Sends all of ERC20 `token` from the current contract to `to`.\n    /// Reverts upon failure.\n    function safeTransferAll(address token, address to) internal returns (uint256 amount) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, 0x70a08231) // Store the function selector of `balanceOf(address)`.\n            mstore(0x20, address()) // Store the address of the current contract.\n            // Read the balance, reverting upon failure.\n            if iszero(\n                and( // The arguments of `and` are evaluated from right to left.\n                    gt(returndatasize(), 0x1f), // At least 32 bytes returned.\n                    staticcall(gas(), token, 0x1c, 0x24, 0x34, 0x20)\n                )\n            ) {\n                mstore(0x00, 0x90b8ec18) // `TransferFailed()`.\n                revert(0x1c, 0x04)\n            }\n            mstore(0x14, to) // Store the `to` argument.\n            amount := mload(0x34) // The `amount` is already at 0x34. We'll need to return it.\n            mstore(0x00, 0xa9059cbb000000000000000000000000) // `transfer(address,uint256)`.\n            // Perform the transfer, reverting upon failure.\n            if iszero(\n                and( // The arguments of `and` are evaluated from right to left.\n                    or(eq(mload(0x00), 1), iszero(returndatasize())), // Returned 1 or nothing.\n                    call(gas(), token, 0, 0x10, 0x44, 0x00, 0x20)\n                )\n            ) {\n                mstore(0x00, 0x90b8ec18) // `TransferFailed()`.\n                revert(0x1c, 0x04)\n            }\n            mstore(0x34, 0) // Restore the part of the free memory pointer that was overwritten.\n        }\n    }\n\n    /// @dev Sets `amount` of ERC20 `token` for `to` to manage on behalf of the current contract.\n    /// Reverts upon failure.\n    function safeApprove(address token, address to, uint256 amount) internal {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x14, to) // Store the `to` argument.\n            mstore(0x34, amount) // Store the `amount` argument.\n            mstore(0x00, 0x095ea7b3000000000000000000000000) // `approve(address,uint256)`.\n            // Perform the approval, reverting upon failure.\n            if iszero(\n                and( // The arguments of `and` are evaluated from right to left.\n                    or(eq(mload(0x00), 1), iszero(returndatasize())), // Returned 1 or nothing.\n                    call(gas(), token, 0, 0x10, 0x44, 0x00, 0x20)\n                )\n            ) {\n                mstore(0x00, 0x3e3f8f73) // `ApproveFailed()`.\n                revert(0x1c, 0x04)\n            }\n            mstore(0x34, 0) // Restore the part of the free memory pointer that was overwritten.\n        }\n    }\n\n    /// @dev Sets `amount` of ERC20 `token` for `to` to manage on behalf of the current contract.\n    /// If the initial attempt to approve fails, attempts to reset the approved amount to zero,\n    /// then retries the approval again (some tokens, e.g. USDT, requires this).\n    /// Reverts upon failure.\n    function safeApproveWithRetry(address token, address to, uint256 amount) internal {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x14, to) // Store the `to` argument.\n            mstore(0x34, amount) // Store the `amount` argument.\n            mstore(0x00, 0x095ea7b3000000000000000000000000) // `approve(address,uint256)`.\n            // Perform the approval, retrying upon failure.\n            if iszero(\n                and( // The arguments of `and` are evaluated from right to left.\n                    or(eq(mload(0x00), 1), iszero(returndatasize())), // Returned 1 or nothing.\n                    call(gas(), token, 0, 0x10, 0x44, 0x00, 0x20)\n                )\n            ) {\n                mstore(0x34, 0) // Store 0 for the `amount`.\n                mstore(0x00, 0x095ea7b3000000000000000000000000) // `approve(address,uint256)`.\n                pop(call(gas(), token, 0, 0x10, 0x44, codesize(), 0x00)) // Reset the approval.\n                mstore(0x34, amount) // Store back the original `amount`.\n                // Retry the approval, reverting upon failure.\n                if iszero(\n                    and(\n                        or(eq(mload(0x00), 1), iszero(returndatasize())), // Returned 1 or nothing.\n                        call(gas(), token, 0, 0x10, 0x44, 0x00, 0x20)\n                    )\n                ) {\n                    mstore(0x00, 0x3e3f8f73) // `ApproveFailed()`.\n                    revert(0x1c, 0x04)\n                }\n            }\n            mstore(0x34, 0) // Restore the part of the free memory pointer that was overwritten.\n        }\n    }\n\n    /// @dev Returns the amount of ERC20 `token` owned by `account`.\n    /// Returns zero if the `token` does not exist.\n    function balanceOf(address token, address account) internal view returns (uint256 amount) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x14, account) // Store the `account` argument.\n            mstore(0x00, 0x70a08231000000000000000000000000) // `balanceOf(address)`.\n            amount :=\n                mul( // The arguments of `mul` are evaluated from right to left.\n                    mload(0x20),\n                    and( // The arguments of `and` are evaluated from right to left.\n                        gt(returndatasize(), 0x1f), // At least 32 bytes returned.\n                        staticcall(gas(), token, 0x10, 0x24, 0x20, 0x20)\n                    )\n                )\n        }\n    }\n\n    /// @dev Sends `amount` of ERC20 `token` from `from` to `to`.\n    /// If the initial attempt fails, try to use Permit2 to transfer the token.\n    /// Reverts upon failure.\n    ///\n    /// The `from` account must have at least `amount` approved for the current contract to manage.\n    function safeTransferFrom2(address token, address from, address to, uint256 amount) internal {\n        if (!trySafeTransferFrom(token, from, to, amount)) {\n            permit2TransferFrom(token, from, to, amount);\n        }\n    }\n\n    /// @dev Sends `amount` of ERC20 `token` from `from` to `to` via Permit2.\n    /// Reverts upon failure.\n    function permit2TransferFrom(address token, address from, address to, uint256 amount)\n        internal\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let m := mload(0x40)\n            mstore(add(m, 0x74), shr(96, shl(96, token)))\n            mstore(add(m, 0x54), amount)\n            mstore(add(m, 0x34), to)\n            mstore(add(m, 0x20), shl(96, from))\n            // `transferFrom(address,address,uint160,address)`.\n            mstore(m, 0x36c78516000000000000000000000000)\n            let p := PERMIT2\n            let exists := eq(chainid(), 1)\n            if iszero(exists) { exists := iszero(iszero(extcodesize(p))) }\n            if iszero(and(call(gas(), p, 0, add(m, 0x10), 0x84, codesize(), 0x00), exists)) {\n                mstore(0x00, 0x7939f4248757f0fd) // `TransferFromFailed()` or `Permit2AmountOverflow()`.\n                revert(add(0x18, shl(2, iszero(iszero(shr(160, amount))))), 0x04)\n            }\n        }\n    }\n\n    /// @dev Permit a user to spend a given amount of\n    /// another user's tokens via native EIP-2612 permit if possible, falling\n    /// back to Permit2 if native permit fails or is not implemented on the token.\n    function permit2(\n        address token,\n        address owner,\n        address spender,\n        uint256 amount,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        bool success;\n        /// @solidity memory-safe-assembly\n        assembly {\n            for {} shl(96, xor(token, WETH9)) {} {\n                mstore(0x00, 0x3644e515) // `DOMAIN_SEPARATOR()`.\n                if iszero(\n                    and( // The arguments of `and` are evaluated from right to left.\n                        lt(iszero(mload(0x00)), eq(returndatasize(), 0x20)), // Returns 1 non-zero word.\n                        // Gas stipend to limit gas burn for tokens that don't refund gas when\n                        // an non-existing function is called. 5K should be enough for a SLOAD.\n                        staticcall(5000, token, 0x1c, 0x04, 0x00, 0x20)\n                    )\n                ) { break }\n                // After here, we can be sure that token is a contract.\n                let m := mload(0x40)\n                mstore(add(m, 0x34), spender)\n                mstore(add(m, 0x20), shl(96, owner))\n                mstore(add(m, 0x74), deadline)\n                if eq(mload(0x00), DAI_DOMAIN_SEPARATOR) {\n                    mstore(0x14, owner)\n                    mstore(0x00, 0x7ecebe00000000000000000000000000) // `nonces(address)`.\n                    mstore(add(m, 0x94), staticcall(gas(), token, 0x10, 0x24, add(m, 0x54), 0x20))\n                    mstore(m, 0x8fcbaf0c000000000000000000000000) // `IDAIPermit.permit`.\n                    // `nonces` is already at `add(m, 0x54)`.\n                    // `1` is already stored at `add(m, 0x94)`.\n                    mstore(add(m, 0xb4), and(0xff, v))\n                    mstore(add(m, 0xd4), r)\n                    mstore(add(m, 0xf4), s)\n                    success := call(gas(), token, 0, add(m, 0x10), 0x104, codesize(), 0x00)\n                    break\n                }\n                mstore(m, 0xd505accf000000000000000000000000) // `IERC20Permit.permit`.\n                mstore(add(m, 0x54), amount)\n                mstore(add(m, 0x94), and(0xff, v))\n                mstore(add(m, 0xb4), r)\n                mstore(add(m, 0xd4), s)\n                success := call(gas(), token, 0, add(m, 0x10), 0xe4, codesize(), 0x00)\n                break\n            }\n        }\n        if (!success) simplePermit2(token, owner, spender, amount, deadline, v, r, s);\n    }\n\n    /// @dev Simple permit on the Permit2 contract.\n    function simplePermit2(\n        address token,\n        address owner,\n        address spender,\n        uint256 amount,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let m := mload(0x40)\n            mstore(m, 0x927da105) // `allowance(address,address,address)`.\n            {\n                let addressMask := shr(96, not(0))\n                mstore(add(m, 0x20), and(addressMask, owner))\n                mstore(add(m, 0x40), and(addressMask, token))\n                mstore(add(m, 0x60), and(addressMask, spender))\n                mstore(add(m, 0xc0), and(addressMask, spender))\n            }\n            let p := mul(PERMIT2, iszero(shr(160, amount)))\n            if iszero(\n                and( // The arguments of `and` are evaluated from right to left.\n                    gt(returndatasize(), 0x5f), // Returns 3 words: `amount`, `expiration`, `nonce`.\n                    staticcall(gas(), p, add(m, 0x1c), 0x64, add(m, 0x60), 0x60)\n                )\n            ) {\n                mstore(0x00, 0x6b836e6b8757f0fd) // `Permit2Failed()` or `Permit2AmountOverflow()`.\n                revert(add(0x18, shl(2, iszero(p))), 0x04)\n            }\n            mstore(m, 0x2b67b570) // `Permit2.permit` (PermitSingle variant).\n            // `owner` is already `add(m, 0x20)`.\n            // `token` is already at `add(m, 0x40)`.\n            mstore(add(m, 0x60), amount)\n            mstore(add(m, 0x80), 0xffffffffffff) // `expiration = type(uint48).max`.\n            // `nonce` is already at `add(m, 0xa0)`.\n            // `spender` is already at `add(m, 0xc0)`.\n            mstore(add(m, 0xe0), deadline)\n            mstore(add(m, 0x100), 0x100) // `signature` offset.\n            mstore(add(m, 0x120), 0x41) // `signature` length.\n            mstore(add(m, 0x140), r)\n            mstore(add(m, 0x160), s)\n            mstore(add(m, 0x180), shl(248, v))\n            if iszero(call(gas(), p, 0, add(m, 0x1c), 0x184, codesize(), 0x00)) {\n                mstore(0x00, 0x6b836e6b) // `Permit2Failed()`.\n                revert(0x1c, 0x04)\n            }\n        }\n    }\n}\n"
      },
      "lib/openzeppelin-contracts/contracts/utils/Address.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}\n"
      },
      "lib/BoringSolidity/contracts/interfaces/IERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IERC20 {\n    // transfer and tranferFrom have been removed, because they don't work on all tokens (some aren't ERC20 complaint).\n    // By removing them you can't accidentally use them.\n    // name, symbol and decimals have been removed, because they are optional and sometimes wrongly implemented (MKR).\n    // Use BoringERC20 with `using BoringERC20 for IERC20` and call `safeTransfer`, `safeTransferFrom`, etc instead.\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /// @notice EIP 2612\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n}\n\ninterface IStrictERC20 {\n    // This is the strict ERC20 interface. Don't use this, certainly not if you don't control the ERC20 token you're calling.\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address _owner) external view returns (uint256 balance);\n    function transfer(address _to, uint256 _value) external returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\n    function approve(address _spender, uint256 _value) external returns (bool success);\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /// @notice EIP 2612\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n}\n"
      },
      "src/strategies/BaseStrategy.sol": {
        "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity >=0.8.0;\n\nimport {BoringOwnable} from \"@BoringSolidity/BoringOwnable.sol\";\nimport {IERC20} from \"@BoringSolidity/interfaces/IERC20.sol\";\nimport {BoringERC20} from \"@BoringSolidity/libraries/BoringERC20.sol\";\nimport {IStrategy} from \"/interfaces/IStrategy.sol\";\nimport {IBentoBoxV1} from \"/interfaces/IBentoBoxV1.sol\";\n\nabstract contract BaseStrategy is IStrategy, BoringOwnable {\n    using BoringERC20 for IERC20;\n\n    IERC20 public immutable strategyToken;\n    IBentoBoxV1 public immutable bentoBox;\n\n    bool public exited; /// @dev After bentobox 'exits' the strategy harvest, skim and withdraw functions can no loner be called\n    uint256 public maxBentoBoxBalance; /// @dev Slippage protection when calling harvest\n    mapping(address => bool) public strategyExecutors; /// @dev EOAs that can execute safeHarvest\n    event LogSetStrategyExecutor(address indexed executor, bool allowed);\n\n    /** @param _strategyToken Address of the underlying token the strategy invests.\n        @param _bentoBox BentoBox address.\n    */\n    constructor(IERC20 _strategyToken, IBentoBoxV1 _bentoBox) {\n        strategyToken = _strategyToken;\n        bentoBox = _bentoBox;\n    }\n\n    //** Strategy implementation: override the following functions: */\n\n    /// @notice Invests the underlying asset.\n    /// @param amount The amount of tokens to invest.\n    /// @dev Assume the contract's balance is greater than the amount\n    function _skim(uint256 amount) internal virtual {}\n\n    /// @notice Harvest any profits made and transfer them to address(this) or report a loss\n    /// @param balance The amount of tokens that have been invested.\n    /// @return amountAdded The delta (+profit or -loss) that occured in contrast to `balance`.\n    /// @dev amountAdded can be left at 0 when reporting profits (gas savings).\n    /// amountAdded should not reflect any rewards or tokens the strategy received.\n    /// Calcualte the amount added based on what the current deposit is worth.\n    /// (The Base Strategy harvest function accounts for rewards).\n    function _harvest(uint256 balance) internal virtual returns (int256 amountAdded) {}\n\n    /// @dev Withdraw the requested amount of the underlying tokens to address(this).\n    /// @param amount The requested amount we want to withdraw.\n    function _withdraw(uint256 amount) internal virtual {}\n\n    /// @notice Withdraw the maximum available amount of the invested assets to address(this).\n    /// @dev This shouldn't revert (use try catch).\n    function _exit() internal virtual {}\n\n    /// @notice Claim any rewards reward tokens and optionally sell them for the underlying token.\n    /// @dev Doesn't need to be implemented if we don't expect any rewards.\n    function _harvestRewards() internal virtual {}\n\n    //** End strategy implementation */\n\n    modifier isActive() {\n        require(!exited, \"BentoBox Strategy: exited\");\n        _;\n    }\n\n    modifier onlyBentoBox() {\n        require(msg.sender == address(bentoBox), \"BentoBox Strategy: only BentoBox\");\n        _;\n    }\n\n    modifier onlyExecutor() {\n        require(msg.sender == owner || strategyExecutors[msg.sender], \"BentoBox Strategy: only Executors\");\n        _;\n    }\n\n    function setStrategyExecutor(address executor, bool value) external onlyOwner {\n        strategyExecutors[executor] = value;\n        emit LogSetStrategyExecutor(executor, value);\n    }\n\n    /// @inheritdoc IStrategy\n    function skim(uint256 amount) external virtual override {\n        _skim(amount);\n    }\n\n    /// @notice Harvest profits while preventing a sandwich attack exploit.\n    /// @param maxBalance The maximum balance of the underlying token that is allowed to be in BentoBox.\n    /// @param rebalance Whether BentoBox should rebalance the strategy assets to acheive it's target allocation.\n    /// @param maxChangeAmount When rebalancing - the maximum amount that will be deposited to or withdrawn from a strategy to BentoBox.\n    /// @param harvestRewards If we want to claim any accrued reward tokens\n    /// @dev maxBalance can be set to 0 to keep the previous value.\n    /// @dev maxChangeAmount can be set to 0 to allow for full rebalancing.\n    function safeHarvest(uint256 maxBalance, bool rebalance, uint256 maxChangeAmount, bool harvestRewards) external onlyExecutor {\n        _safeHarvest(maxBalance, rebalance, maxChangeAmount, harvestRewards);\n    }\n\n    function _safeHarvest(uint256 maxBalance, bool rebalance, uint256 maxChangeAmount, bool harvestRewards) internal {\n        if (harvestRewards) {\n            _harvestRewards();\n        }\n\n        if (maxBalance > 0) {\n            maxBentoBoxBalance = maxBalance;\n        }\n\n        IBentoBoxV1(bentoBox).harvest(strategyToken, rebalance, maxChangeAmount);\n    }\n\n    /** @inheritdoc IStrategy\n    @dev Only BentoBox can call harvest on this strategy.\n    @dev Ensures that (1) the caller was this contract (called through the safeHarvest function)\n        and (2) that we are not being frontrun by a large BentoBox deposit when harvesting profits. */\n    function harvest(uint256 balance, address sender) external virtual override isActive onlyBentoBox returns (int256) {\n        /** @dev Don't revert if conditions aren't met in order to allow\n            BentoBox to continiue execution as it might need to do a rebalance. */\n\n        if (sender == address(this) && IBentoBoxV1(bentoBox).totals(strategyToken).elastic <= maxBentoBoxBalance && balance > 0) {\n            int256 amount = _harvest(balance);\n\n            /** @dev Since harvesting of rewards is accounted for seperately we might also have\n            some underlying tokens in the contract that the _harvest call doesn't report. \n            E.g. reward tokens that have been sold into the underlying tokens which are now sitting in the contract.\n            Meaning the amount returned by the internal _harvest function isn't necessary the final profit/loss amount */\n\n            uint256 contractBalance = strategyToken.balanceOf(address(this));\n\n            if (amount >= 0) {\n                // _harvest reported a profit\n\n                if (contractBalance > 0) {\n                    strategyToken.safeTransfer(address(bentoBox), contractBalance);\n                }\n\n                return int256(contractBalance);\n            } else if (contractBalance > 0) {\n                // _harvest reported a loss but we have some tokens sitting in the contract\n\n                int256 diff = amount + int256(contractBalance);\n\n                if (diff > 0) {\n                    // we still made some profit\n\n                    /// @dev send the profit to BentoBox and reinvest the rest\n                    strategyToken.safeTransfer(address(bentoBox), uint256(diff));\n                    _skim(uint256(-amount));\n                } else {\n                    // we made a loss but we have some tokens we can reinvest\n\n                    _skim(contractBalance);\n                }\n\n                return diff;\n            } else {\n                // we made a loss\n\n                return amount;\n            }\n        }\n\n        return int256(0);\n    }\n\n    /// @inheritdoc IStrategy\n    function withdraw(uint256 amount) external virtual override isActive onlyBentoBox returns (uint256 actualAmount) {\n        _withdraw(amount);\n        /// @dev Make sure we send and report the exact same amount of tokens by using balanceOf.\n        actualAmount = strategyToken.balanceOf(address(this));\n        strategyToken.safeTransfer(address(bentoBox), actualAmount);\n    }\n\n    /// @inheritdoc IStrategy\n    /// @dev do not use isActive modifier here; allow bentobox to call strategy.exit() multiple times\n    function exit(uint256 balance) external virtual override onlyBentoBox returns (int256 amountAdded) {\n        _exit();\n        /// @dev Check balance of token on the contract.\n        uint256 actualBalance = strategyToken.balanceOf(address(this));\n        /// @dev Calculate tokens added (or lost).\n        amountAdded = int256(actualBalance) - int256(balance);\n        /// @dev Transfer all tokens to bentoBox.\n        strategyToken.safeTransfer(address(bentoBox), actualBalance);\n        /// @dev Flag as exited, allowing the owner to manually deal with any amounts available later.\n        exited = true;\n    }\n\n    /** @dev After exited, the owner can perform ANY call. This is to rescue any funds that didn't\n        get released during exit or got earned afterwards due to vesting or airdrops, etc. */\n    function afterExit(address to, uint256 value, bytes memory data) public onlyOwner returns (bool success) {\n        require(exited, \"BentoBox Strategy: not exited\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (success, ) = to.call{value: value}(data);\n    }\n}\n"
      },
      "src/interfaces/IBentoBoxV1.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\nimport {IERC20} from \"@BoringSolidity/interfaces/IERC20.sol\";\nimport {Rebase} from \"@BoringSolidity/libraries/BoringRebase.sol\";\nimport {IStrategy} from \"/interfaces/IStrategy.sol\";\n\ninterface IFlashBorrower {\n    /// @notice The flashloan callback. `amount` + `fee` needs to repayed to msg.sender before this call returns.\n    /// @param sender The address of the invoker of this flashloan.\n    /// @param token The address of the token that is loaned.\n    /// @param amount of the `token` that is loaned.\n    /// @param fee The fee that needs to be paid on top for this loan. Needs to be the same as `token`.\n    /// @param data Additional data that was passed to the flashloan function.\n    function onFlashLoan(\n        address sender,\n        IERC20 token,\n        uint256 amount,\n        uint256 fee,\n        bytes calldata data\n    ) external;\n}\n\ninterface IBatchFlashBorrower {\n    /// @notice The callback for batched flashloans. Every amount + fee needs to repayed to msg.sender before this call returns.\n    /// @param sender The address of the invoker of this flashloan.\n    /// @param tokens Array of addresses for ERC-20 tokens that is loaned.\n    /// @param amounts A one-to-one map to `tokens` that is loaned.\n    /// @param fees A one-to-one map to `tokens` that needs to be paid on top for each loan. Needs to be the same token.\n    /// @param data Additional data that was passed to the flashloan function.\n    function onBatchFlashLoan(\n        address sender,\n        IERC20[] calldata tokens,\n        uint256[] calldata amounts,\n        uint256[] calldata fees,\n        bytes calldata data\n    ) external;\n}\n\ninterface IBentoBoxV1 {\n    function balanceOf(IERC20, address) external view returns (uint256);\n\n    function batch(bytes[] calldata calls, bool revertOnFail) external payable returns (bool[] memory successes, bytes[] memory results);\n\n    function batchFlashLoan(\n        IBatchFlashBorrower borrower,\n        address[] calldata receivers,\n        IERC20[] calldata tokens,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n\n    function claimOwnership() external;\n\n    function flashLoan(\n        IFlashBorrower borrower,\n        address receiver,\n        IERC20 token,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    function deploy(\n        address masterContract,\n        bytes calldata data,\n        bool useCreate2\n    ) external payable returns (address);\n\n    function deposit(\n        IERC20 token_,\n        address from,\n        address to,\n        uint256 amount,\n        uint256 share\n    ) external payable returns (uint256 amountOut, uint256 shareOut);\n\n    function harvest(\n        IERC20 token,\n        bool balance,\n        uint256 maxChangeAmount\n    ) external;\n\n    function masterContractApproved(address, address) external view returns (bool);\n\n    function masterContractOf(address) external view returns (address);\n\n    function nonces(address) external view returns (uint256);\n\n    function owner() external view returns (address);\n\n    function pendingOwner() external view returns (address);\n\n    function pendingStrategy(IERC20) external view returns (IStrategy);\n\n    function permitToken(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 amount,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    function registerProtocol() external;\n\n    function setMasterContractApproval(\n        address user,\n        address masterContract,\n        bool approved,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    function setStrategy(IERC20 token, IStrategy newStrategy) external;\n\n    function setStrategyTargetPercentage(IERC20 token, uint64 targetPercentage_) external;\n\n    function strategy(IERC20) external view returns (IStrategy);\n\n    function strategyData(IERC20)\n        external\n        view\n        returns (\n            uint64 strategyStartDate,\n            uint64 targetPercentage,\n            uint128 balance\n        );\n\n    function toAmount(\n        IERC20 token,\n        uint256 share,\n        bool roundUp\n    ) external view returns (uint256 amount);\n\n    function toShare(\n        IERC20 token,\n        uint256 amount,\n        bool roundUp\n    ) external view returns (uint256 share);\n\n    function totals(IERC20) external view returns (Rebase memory totals_);\n\n    function transfer(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 share\n    ) external;\n\n    function transferMultiple(\n        IERC20 token,\n        address from,\n        address[] calldata tos,\n        uint256[] calldata shares\n    ) external;\n\n    function transferOwnership(\n        address newOwner,\n        bool direct,\n        bool renounce\n    ) external;\n\n    function whitelistMasterContract(address masterContract, bool approved) external;\n\n    function whitelistedMasterContracts(address) external view returns (bool);\n\n    function withdraw(\n        IERC20 token_,\n        address from,\n        address to,\n        uint256 amount,\n        uint256 share\n    ) external returns (uint256 amountOut, uint256 shareOut);\n}\n"
      },
      "src/mixins/FeeCollectable.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\nimport {IERC20} from \"@BoringSolidity/interfaces/IERC20.sol\";\n\nabstract contract FeeCollectable {\n    error ErrInvalidFeeBips();\n    error ErrInvalidFeeOperator(address);\n    event LogFeeParametersChanged(\n        address indexed previousFeeCollector,\n        uint16 previousFeeAmount,\n        address indexed feeCollector,\n        uint16 feeAmount\n    );\n\n    uint256 internal constant BIPS = 10_000;\n\n    uint16 public feeBips;\n    address public feeCollector;\n\n    modifier onlyAllowedFeeOperator() {\n        if (!isFeeOperator(msg.sender)) {\n            revert ErrInvalidFeeOperator(msg.sender);\n        }\n        _;\n    }\n\n    function setFeeParameters(address _feeCollector, uint16 _feeBips) external onlyAllowedFeeOperator {\n        if (feeBips > BIPS) {\n            revert ErrInvalidFeeBips();\n        }\n\n        emit LogFeeParametersChanged(feeCollector, feeBips, _feeCollector, _feeBips);\n\n        feeCollector = _feeCollector;\n        feeBips = _feeBips;\n    }\n\n    function calculateFees(uint256 amountIn) internal view returns (uint userAmount, uint feeAmount) {\n        feeAmount = (amountIn * feeBips) / BIPS;\n        userAmount = amountIn - feeAmount;\n    }\n\n    function isFeeOperator(address account) public virtual returns (bool);\n}\n"
      },
      "src/interfaces/IGmxV2.sol": {
        "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity >=0.8.0;\n\n// @title Deposit\n// @dev Struct for deposits\ninterface IGmxV2Deposit {\n    /** @dev CreateDepositParams struct used in createDeposit to avoid stack\n     * too deep errors\n     *\n     * @param receiver the address to send the market tokens to\n     * @param callbackContract the callback contract\n     * @param uiFeeReceiver the ui fee receiver\n     * @param market the market to deposit into\n     * @param minMarketTokens the minimum acceptable number of liquidity tokens\n     * @param shouldUnwrapNativeToken whether to unwrap the native token when\n     * sending funds back to the user in case the deposit gets cancelled\n     * @param executionFee the execution fee for keepers\n     * @param callbackGasLimit the gas limit for the callbackContract\n     */\n    struct CreateDepositParams {\n        address receiver;\n        address callbackContract;\n        address uiFeeReceiver;\n        address market;\n        address initialLongToken;\n        address initialShortToken;\n        address[] longTokenSwapPath;\n        address[] shortTokenSwapPath;\n        uint256 minMarketTokens;\n        bool shouldUnwrapNativeToken;\n        uint256 executionFee;\n        uint256 callbackGasLimit;\n    }\n\n    // @dev there is a limit on the number of fields a struct can have when being passed\n    // or returned as a memory variable which can cause \"Stack too deep\" errors\n    // use sub-structs to avoid this issue\n    // @param addresses address values\n    // @param numbers number values\n    // @param flags boolean values\n    struct Props {\n        Addresses addresses;\n        Numbers numbers;\n        Flags flags;\n    }\n\n    // @param account the account depositing liquidity\n    // @param receiver the address to send the liquidity tokens to\n    // @param callbackContract the callback contract\n    // @param uiFeeReceiver the ui fee receiver\n    // @param market the market to deposit to\n    struct Addresses {\n        address account;\n        address receiver;\n        address callbackContract;\n        address uiFeeReceiver;\n        address market;\n        address initialLongToken;\n        address initialShortToken;\n        address[] longTokenSwapPath;\n        address[] shortTokenSwapPath;\n    }\n\n    // @param initialLongTokenAmount the amount of long tokens to deposit\n    // @param initialShortTokenAmount the amount of short tokens to deposit\n    // @param minMarketTokens the minimum acceptable number of liquidity tokens\n    // @param updatedAtBlock the block that the deposit was last updated at\n    // sending funds back to the user in case the deposit gets cancelled\n    // @param executionFee the execution fee for keepers\n    // @param callbackGasLimit the gas limit for the callbackContract\n    struct Numbers {\n        uint256 initialLongTokenAmount;\n        uint256 initialShortTokenAmount;\n        uint256 minMarketTokens;\n        uint256 updatedAtBlock;\n        uint256 updatedAtTime;\n        uint256 executionFee;\n        uint256 callbackGasLimit;\n    }\n\n    // @param shouldUnwrapNativeToken whether to unwrap the native token when\n    struct Flags {\n        bool shouldUnwrapNativeToken;\n    }\n}\n\ninterface IGmxV2Withdrawal {\n    /**\n     * @param receiver The address that will receive the withdrawal tokens.\n     * @param callbackContract The contract that will be called back.\n     * @param market The market on which the withdrawal will be executed.\n     * @param minLongTokenAmount The minimum amount of long tokens that must be withdrawn.\n     * @param minShortTokenAmount The minimum amount of short tokens that must be withdrawn.\n     * @param shouldUnwrapNativeToken Whether the native token should be unwrapped when executing the withdrawal.\n     * @param executionFee The execution fee for the withdrawal.\n     * @param callbackGasLimit The gas limit for calling the callback contract.\n     */\n    struct CreateWithdrawalParams {\n        address receiver;\n        address callbackContract;\n        address uiFeeReceiver;\n        address market;\n        address[] longTokenSwapPath;\n        address[] shortTokenSwapPath;\n        uint256 minLongTokenAmount;\n        uint256 minShortTokenAmount;\n        bool shouldUnwrapNativeToken;\n        uint256 executionFee;\n        uint256 callbackGasLimit;\n    }\n\n    // @dev there is a limit on the number of fields a struct can have when being passed\n    // or returned as a memory variable which can cause \"Stack too deep\" errors\n    // use sub-structs to avoid this issue\n    // @param addresses address values\n    // @param numbers number values\n    // @param flags boolean values\n    struct Props {\n        Addresses addresses;\n        Numbers numbers;\n        Flags flags;\n    }\n\n    // @param account The account to withdraw for.\n    // @param receiver The address that will receive the withdrawn tokens.\n    // @param callbackContract The contract that will be called back.\n    // @param uiFeeReceiver The ui fee receiver.\n    // @param market The market on which the withdrawal will be executed.\n    struct Addresses {\n        address account;\n        address receiver;\n        address callbackContract;\n        address uiFeeReceiver;\n        address market;\n        address[] longTokenSwapPath;\n        address[] shortTokenSwapPath;\n    }\n\n    // @param marketTokenAmount The amount of market tokens that will be withdrawn.\n    // @param minLongTokenAmount The minimum amount of long tokens that must be withdrawn.\n    // @param minShortTokenAmount The minimum amount of short tokens that must be withdrawn.\n    // @param updatedAtBlock The block at which the withdrawal was last updated.\n    // @param executionFee The execution fee for the withdrawal.\n    // @param callbackGasLimit The gas limit for calling the callback contract.\n    struct Numbers {\n        uint256 marketTokenAmount;\n        uint256 minLongTokenAmount;\n        uint256 minShortTokenAmount;\n        uint256 updatedAtBlock;\n        uint256 updatedAtTime;\n        uint256 executionFee;\n        uint256 callbackGasLimit;\n    }\n\n    // @param shouldUnwrapNativeToken whether to unwrap the native token when\n    struct Flags {\n        bool shouldUnwrapNativeToken;\n    }\n}\n\ninterface IGmxV2EventUtils {\n    struct EmitPositionDecreaseParams {\n        bytes32 key;\n        address account;\n        address market;\n        address collateralToken;\n        bool isLong;\n    }\n\n    struct EventLogData {\n        AddressItems addressItems;\n        UintItems uintItems;\n        IntItems intItems;\n        BoolItems boolItems;\n        Bytes32Items bytes32Items;\n        BytesItems bytesItems;\n        StringItems stringItems;\n    }\n\n    struct AddressItems {\n        AddressKeyValue[] items;\n        AddressArrayKeyValue[] arrayItems;\n    }\n\n    struct UintItems {\n        UintKeyValue[] items;\n        UintArrayKeyValue[] arrayItems;\n    }\n\n    struct IntItems {\n        IntKeyValue[] items;\n        IntArrayKeyValue[] arrayItems;\n    }\n\n    struct BoolItems {\n        BoolKeyValue[] items;\n        BoolArrayKeyValue[] arrayItems;\n    }\n\n    struct Bytes32Items {\n        Bytes32KeyValue[] items;\n        Bytes32ArrayKeyValue[] arrayItems;\n    }\n\n    struct BytesItems {\n        BytesKeyValue[] items;\n        BytesArrayKeyValue[] arrayItems;\n    }\n\n    struct StringItems {\n        StringKeyValue[] items;\n        StringArrayKeyValue[] arrayItems;\n    }\n\n    struct AddressKeyValue {\n        string key;\n        address value;\n    }\n\n    struct AddressArrayKeyValue {\n        string key;\n        address[] value;\n    }\n\n    struct UintKeyValue {\n        string key;\n        uint256 value;\n    }\n\n    struct UintArrayKeyValue {\n        string key;\n        uint256[] value;\n    }\n\n    struct IntKeyValue {\n        string key;\n        int256 value;\n    }\n\n    struct IntArrayKeyValue {\n        string key;\n        int256[] value;\n    }\n\n    struct BoolKeyValue {\n        string key;\n        bool value;\n    }\n\n    struct BoolArrayKeyValue {\n        string key;\n        bool[] value;\n    }\n\n    struct Bytes32KeyValue {\n        string key;\n        bytes32 value;\n    }\n\n    struct Bytes32ArrayKeyValue {\n        string key;\n        bytes32[] value;\n    }\n\n    struct BytesKeyValue {\n        string key;\n        bytes value;\n    }\n\n    struct BytesArrayKeyValue {\n        string key;\n        bytes[] value;\n    }\n\n    struct StringKeyValue {\n        string key;\n        string value;\n    }\n\n    struct StringArrayKeyValue {\n        string key;\n        string[] value;\n    }\n}\n\ninterface IGmxV2Market {\n    // @param marketToken address of the market token for the market\n    // @param indexToken address of the index token for the market\n    // @param longToken address of the long token for the market\n    // @param shortToken address of the short token for the market\n    // @param data for any additional data\n    struct Props {\n        address marketToken;\n        address indexToken;\n        address longToken;\n        address shortToken;\n    }\n}\n\n// @title Price\n// @dev Struct for prices\ninterface IGmxV2Price {\n    // @param min the min price\n    // @param max the max price\n    struct Props {\n        uint256 min;\n        uint256 max;\n    }\n}\n\n// @title MarketPoolInfo\ninterface IGmxV2MarketPoolValueInfo {\n    // @dev struct to avoid stack too deep errors for the getPoolValue call\n    // @param value the pool value\n    // @param longTokenAmount the amount of long token in the pool\n    // @param shortTokenAmount the amount of short token in the pool\n    // @param longTokenUsd the USD value of the long tokens in the pool\n    // @param shortTokenUsd the USD value of the short tokens in the pool\n    // @param totalBorrowingFees the total pending borrowing fees for the market\n    // @param borrowingFeePoolFactor the pool factor for borrowing fees\n    // @param impactPoolAmount the amount of tokens in the impact pool\n    // @param longPnl the pending pnl of long positions\n    // @param shortPnl the pending pnl of short positions\n    // @param netPnl the net pnl of long and short positions\n    struct Props {\n        int256 poolValue;\n        int256 longPnl;\n        int256 shortPnl;\n        int256 netPnl;\n        uint256 longTokenAmount;\n        uint256 shortTokenAmount;\n        uint256 longTokenUsd;\n        uint256 shortTokenUsd;\n        uint256 totalBorrowingFees;\n        uint256 borrowingFeePoolFactor;\n        uint256 impactPoolAmount;\n    }\n}\n\n// @title IDepositCallbackReceiver\n// @dev interface for a deposit callback contract\ninterface IGmxV2DepositCallbackReceiver {\n    // @dev called after a deposit execution\n    // @param key the key of the deposit\n    // @param deposit the deposit that was executed\n    function afterDepositExecution(\n        bytes32 key,\n        IGmxV2Deposit.Props memory deposit,\n        IGmxV2EventUtils.EventLogData memory eventData\n    ) external;\n\n    // @dev called after a deposit cancellation\n    // @param key the key of the deposit\n    // @param deposit the deposit that was cancelled\n    function afterDepositCancellation(\n        bytes32 key,\n        IGmxV2Deposit.Props memory deposit,\n        IGmxV2EventUtils.EventLogData memory eventData\n    ) external;\n}\n\n// @title IWithdrawalCallbackReceiver\n// @dev interface for a withdrawal callback contract\ninterface IGmxV2WithdrawalCallbackReceiver {\n    // @dev called after a withdrawal execution\n    // @param key the key of the withdrawal\n    // @param withdrawal the withdrawal that was executed\n    function afterWithdrawalExecution(\n        bytes32 key,\n        IGmxV2Withdrawal.Props memory withdrawal,\n        IGmxV2EventUtils.EventLogData memory eventData\n    ) external;\n\n    // @dev called after a withdrawal cancellation\n    // @param key the key of the withdrawal\n    // @param withdrawal the withdrawal that was cancelled\n    function afterWithdrawalCancellation(\n        bytes32 key,\n        IGmxV2Withdrawal.Props memory withdrawal,\n        IGmxV2EventUtils.EventLogData memory eventData\n    ) external;\n}\n\ninterface IGmxDataStore {\n    function containsBytes32(bytes32 setKey, bytes32 value) external view returns (bool);\n\n    function roleStore() external view returns (IGmxRoleStore);\n\n    function getBool(bytes32 key) external view returns (bool);\n}\n\ninterface IGmxRoleStore {\n    function hasRole(address account, bytes32 roleKey) external view returns (bool);\n}\n\ninterface IGmxReader {\n    function getMarket(address dataStore, address key) external view returns (IGmxV2Market.Props memory);\n\n    // @dev get the market token's price\n    // @param dataStore DataStore\n    // @param market the market to check\n    // @param longTokenPrice the price of the long token\n    // @param shortTokenPrice the price of the short token\n    // @param indexTokenPrice the price of the index token\n    // @param maximize whether to maximize or minimize the market token price\n    // @return returns (the market token's price, MarketPoolValueInfo.Props)\n    function getMarketTokenPrice(\n        address dataStore,\n        IGmxV2Market.Props memory market,\n        IGmxV2Price.Props memory indexTokenPrice,\n        IGmxV2Price.Props memory longTokenPrice,\n        IGmxV2Price.Props memory shortTokenPrice,\n        bytes32 pnlFactorType,\n        bool maximize\n    ) external view returns (int256, IGmxV2MarketPoolValueInfo.Props memory);\n}\n\ninterface IGmxV2ExchangeRouter {\n    function dataStore() external view returns (address);\n\n    function sendWnt(address receiver, uint256 amount) external payable;\n\n    function sendTokens(address token, address receiver, uint256 amount) external payable;\n\n    function depositHandler() external view returns (address);\n\n    function withdrawalHandler() external view returns (address);\n\n    function createDeposit(IGmxV2Deposit.CreateDepositParams calldata params) external payable returns (bytes32);\n\n    function createWithdrawal(IGmxV2Withdrawal.CreateWithdrawalParams calldata params) external payable returns (bytes32);\n\n    function cancelWithdrawal(bytes32 key) external payable;\n\n    function cancelDeposit(bytes32 key) external payable;\n}\n\ninterface IGmxV2DepositHandler {\n    function depositVault() external view returns (address);\n\n    function dataStore() external view returns (address);\n}\n\ninterface IGmxV2WithdrawalHandler {\n    function withdrawalVault() external view returns (address);\n}\n"
      },
      "src/interfaces/IMultiRewardsStaking.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\ninterface IMultiRewardsStaking {\n    struct Reward {\n        uint256 rewardsDuration;\n        uint256 periodFinish;\n        uint256 rewardRate;\n        uint256 lastUpdateTime;\n        uint256 rewardPerTokenStored;\n    }\n\n    function addReward(address rewardToken, uint256 _rewardsDuration) external;\n\n    function balanceOf(address user) external view returns (uint256 amount);\n\n    function earned(address user, address rewardToken) external view returns (uint256);\n\n    function exit() external;\n\n    function getRewardForDuration(address rewardToken) external view returns (uint256);\n\n    function getRewards() external;\n\n    function lastTimeRewardApplicable(address rewardToken) external view returns (uint256);\n\n    function notifyRewardAmount(address rewardToken, uint256 amount) external;\n\n    function operators(address) external view returns (bool);\n\n    function owner() external view returns (address);\n\n    function pause() external;\n\n    function paused() external view returns (bool);\n\n    function recover(address tokenAddress, uint256 tokenAmount) external;\n\n    function rewardData(address token) external view returns (Reward memory);\n\n    function rewardPerToken(address rewardToken) external view returns (uint256);\n\n    function rewardTokens(uint256) external view returns (address);\n\n    function rewards(address user, address token) external view returns (uint256 amount);\n\n    function setOperator(address operator, bool status) external;\n\n    function setRewardsDuration(address rewardToken, uint256 _rewardsDuration) external;\n\n    function stake(uint256 amount) external;\n\n    function stakingToken() external view returns (address);\n\n    function totalSupply() external view returns (uint256);\n\n    function transferOwnership(address newOwner) external;\n\n    function unpause() external;\n\n    function userRewardPerTokenPaid(address user, address token) external view returns (uint256 amount);\n\n    function getRewardTokenLength() external view returns (uint256);\n\n    function isSupportedReward(address rewardToken) external view returns (bool);\n\n    function withdraw(uint256 amount) external;\n}\n"
      },
      "lib/BoringSolidity/contracts/BoringOwnable.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// Source: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol + Claimable.sol\n// Simplified by BoringCrypto\n\ncontract BoringOwnableData {\n    address public owner;\n    address public pendingOwner;\n}\n\ncontract BoringOwnable is BoringOwnableData {\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /// @notice `owner` defaults to msg.sender on construction.\n    constructor() {\n        owner = msg.sender;\n        emit OwnershipTransferred(address(0), msg.sender);\n    }\n\n    /// @notice Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner.\n    /// Can only be invoked by the current `owner`.\n    /// @param newOwner Address of the new owner.\n    /// @param direct True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.\n    /// @param renounce Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.\n    function transferOwnership(\n        address newOwner,\n        bool direct,\n        bool renounce\n    ) public onlyOwner {\n        if (direct) {\n            // Checks\n            require(newOwner != address(0) || renounce, \"Ownable: zero address\");\n\n            // Effects\n            emit OwnershipTransferred(owner, newOwner);\n            owner = newOwner;\n            pendingOwner = address(0);\n        } else {\n            // Effects\n            pendingOwner = newOwner;\n        }\n    }\n\n    /// @notice Needs to be called by `pendingOwner` to claim ownership.\n    function claimOwnership() public {\n        address _pendingOwner = pendingOwner;\n\n        // Checks\n        require(msg.sender == _pendingOwner, \"Ownable: caller != pending owner\");\n\n        // Effects\n        emit OwnershipTransferred(owner, _pendingOwner);\n        owner = _pendingOwner;\n        pendingOwner = address(0);\n    }\n\n    /// @notice Only allows the `owner` to execute the function.\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Ownable: caller is not the owner\");\n        _;\n    }\n}\n"
      },
      "lib/BoringSolidity/contracts/libraries/BoringERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport {IERC20} from \"../interfaces/IERC20.sol\";\n\n// solhint-disable avoid-low-level-calls\n\nlibrary BoringERC20 {\n    bytes4 private constant SIG_SYMBOL = 0x95d89b41; // symbol()\n    bytes4 private constant SIG_NAME = 0x06fdde03; // name()\n    bytes4 private constant SIG_DECIMALS = 0x313ce567; // decimals()\n    bytes4 private constant SIG_BALANCE_OF = 0x70a08231; // balanceOf(address)\n    bytes4 private constant SIG_TOTALSUPPLY = 0x18160ddd; // balanceOf(address)\n    bytes4 private constant SIG_TRANSFER = 0xa9059cbb; // transfer(address,uint256)\n    bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd; // transferFrom(address,address,uint256)\n\n    function returnDataToString(bytes memory data) internal pure returns (string memory) {\n        if (data.length >= 64) {\n            return abi.decode(data, (string));\n        } else if (data.length == 32) {\n            uint8 i = 0;\n            while (i < 32 && data[i] != 0) {\n                i++;\n            }\n            bytes memory bytesArray = new bytes(i);\n            for (i = 0; i < 32 && data[i] != 0; i++) {\n                bytesArray[i] = data[i];\n            }\n            return string(bytesArray);\n        } else {\n            return \"???\";\n        }\n    }\n\n    /// @notice Provides a safe ERC20.symbol version which returns '???' as fallback string.\n    /// @param token The address of the ERC-20 token contract.\n    /// @return (string) Token symbol.\n    function safeSymbol(IERC20 token) internal view returns (string memory) {\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_SYMBOL));\n        return success ? returnDataToString(data) : \"???\";\n    }\n\n    /// @notice Provides a safe ERC20.name version which returns '???' as fallback string.\n    /// @param token The address of the ERC-20 token contract.\n    /// @return (string) Token name.\n    function safeName(IERC20 token) internal view returns (string memory) {\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_NAME));\n        return success ? returnDataToString(data) : \"???\";\n    }\n\n    /// @notice Provides a safe ERC20.decimals version which returns '18' as fallback value.\n    /// @param token The address of the ERC-20 token contract.\n    /// @return (uint8) Token decimals.\n    function safeDecimals(IERC20 token) internal view returns (uint8) {\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_DECIMALS));\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\n    }\n\n    /// @notice Provides a gas-optimized balance check to avoid a redundant extcodesize check in addition to the returndatasize check.\n    /// @param token The address of the ERC-20 token.\n    /// @param to The address of the user to check.\n    /// @return amount The token amount.\n    function safeBalanceOf(IERC20 token, address to) internal view returns (uint256 amount) {\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_BALANCE_OF, to));\n        require(success && data.length >= 32, \"BoringERC20: BalanceOf failed\");\n        amount = abi.decode(data, (uint256));\n    }\n\n    /// @notice Provides a gas-optimized totalSupply to avoid a redundant extcodesize check in addition to the returndatasize check.\n    /// @param token The address of the ERC-20 token.\n    /// @return totalSupply The token totalSupply.\n    function safeTotalSupply(IERC20 token) internal view returns (uint256 totalSupply) {\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_TOTALSUPPLY));\n        require(success && data.length >= 32, \"BoringERC20: totalSupply failed\");\n        totalSupply = abi.decode(data, (uint256));\n    }\n\n    /// @notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\n    /// Reverts on a failed transfer.\n    /// @param token The address of the ERC-20 token.\n    /// @param to Transfer tokens to.\n    /// @param amount The token amount.\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 amount\n    ) internal {\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER, to, amount));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"BoringERC20: Transfer failed\");\n    }\n\n    /// @notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\n    /// Reverts on a failed transfer.\n    /// @param token The address of the ERC-20 token.\n    /// @param from Transfer tokens from.\n    /// @param to Transfer tokens to.\n    /// @param amount The token amount.\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 amount\n    ) internal {\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"BoringERC20: TransferFrom failed\");\n    }\n}\n"
      },
      "src/interfaces/IStrategy.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\ninterface IStrategy {\n    function skim(uint256 amount) external;\n\n    function harvest(uint256 balance, address sender) external returns (int256 amountAdded);\n\n    function withdraw(uint256 amount) external returns (uint256 actualAmount);\n\n    function exit(uint256 balance) external returns (int256 amountAdded);\n}\n"
      },
      "lib/BoringSolidity/contracts/libraries/BoringRebase.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport {BoringMath, BoringMath128} from \"./BoringMath.sol\";\n\nstruct Rebase {\n    uint128 elastic;\n    uint128 base;\n}\n\n/// @notice A rebasing library using overflow-/underflow-safe math.\nlibrary RebaseLibrary {\n    using BoringMath for uint256;\n    using BoringMath128 for uint128;\n\n    /// @notice Calculates the base value in relationship to `elastic` and `total`.\n    function toBase(\n        Rebase memory total,\n        uint256 elastic,\n        bool roundUp\n    ) internal pure returns (uint256 base) {\n        if (total.elastic == 0) {\n            base = elastic;\n        } else {\n            base = (elastic * total.base) / total.elastic;\n            if (roundUp && (base * total.elastic) / total.base < elastic) {\n                base++;\n            }\n        }\n    }\n\n    /// @notice Calculates the elastic value in relationship to `base` and `total`.\n    function toElastic(\n        Rebase memory total,\n        uint256 base,\n        bool roundUp\n    ) internal pure returns (uint256 elastic) {\n        if (total.base == 0) {\n            elastic = base;\n        } else {\n            elastic = (base * total.elastic) / total.base;\n            if (roundUp && (elastic * total.base) / total.elastic < base) {\n                elastic++;\n            }\n        }\n    }\n\n    /// @notice Add `elastic` to `total` and doubles `total.base`.\n    /// @return (Rebase) The new total.\n    /// @return base in relationship to `elastic`.\n    function add(\n        Rebase memory total,\n        uint256 elastic,\n        bool roundUp\n    ) internal pure returns (Rebase memory, uint256 base) {\n        base = toBase(total, elastic, roundUp);\n        total.elastic += elastic.to128();\n        total.base += base.to128();\n        return (total, base);\n    }\n\n    /// @notice Sub `base` from `total` and update `total.elastic`.\n    /// @return (Rebase) The new total.\n    /// @return elastic in relationship to `base`.\n    function sub(\n        Rebase memory total,\n        uint256 base,\n        bool roundUp\n    ) internal pure returns (Rebase memory, uint256 elastic) {\n        elastic = toElastic(total, base, roundUp);\n        total.elastic -= elastic.to128();\n        total.base -= base.to128();\n        return (total, elastic);\n    }\n\n    /// @notice Add `elastic` and `base` to `total`.\n    function add(\n        Rebase memory total,\n        uint256 elastic,\n        uint256 base\n    ) internal pure returns (Rebase memory) {\n        total.elastic += elastic.to128();\n        total.base += base.to128();\n        return total;\n    }\n\n    /// @notice Subtract `elastic` and `base` to `total`.\n    function sub(\n        Rebase memory total,\n        uint256 elastic,\n        uint256 base\n    ) internal pure returns (Rebase memory) {\n        total.elastic -= elastic.to128();\n        total.base -= base.to128();\n        return total;\n    }\n\n    /// @notice Add `elastic` to `total` and update storage.\n    /// @return newElastic Returns updated `elastic`.\n    function addElastic(Rebase storage total, uint256 elastic) internal returns (uint256 newElastic) {\n        newElastic = total.elastic += elastic.to128();\n    }\n\n    /// @notice Subtract `elastic` from `total` and update storage.\n    /// @return newElastic Returns updated `elastic`.\n    function subElastic(Rebase storage total, uint256 elastic) internal returns (uint256 newElastic) {\n        newElastic = total.elastic -= elastic.to128();\n    }\n}\n"
      },
      "lib/BoringSolidity/contracts/libraries/BoringMath.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\nlibrary BoringMath {\n    error ErrOverflow();\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    function to32(uint256 a) internal pure returns (uint32) {\n        if (a > type(uint32).max) {\n            revert ErrOverflow();\n        }\n        return uint32(a);\n    }\n\n    function to40(uint256 a) internal pure returns (uint40) {\n        if (a > type(uint40).max) {\n            revert ErrOverflow();\n        }\n        return uint40(a);\n    }\n\n    function to64(uint256 a) internal pure returns (uint64) {\n        if (a > type(uint64).max) {\n            revert ErrOverflow();\n        }\n        return uint64(a);\n    }\n\n    function to112(uint256 a) internal pure returns (uint112) {\n        if (a > type(uint112).max) {\n            revert ErrOverflow();\n        }\n        return uint112(a);\n    }\n\n    function to128(uint256 a) internal pure returns (uint128) {\n        if (a > type(uint128).max) {\n            revert ErrOverflow();\n        }\n        return uint128(a);\n    }\n\n    function to208(uint256 a) internal pure returns (uint208) {\n        if (a > type(uint208).max) {\n            revert ErrOverflow();\n        }\n        return uint208(a);\n    }\n\n    function to216(uint256 a) internal pure returns (uint216) {\n        if (a > type(uint216).max) {\n            revert ErrOverflow();\n        }\n        return uint216(a);\n    }\n\n    function to224(uint256 a) internal pure returns (uint224) {\n        if (a > type(uint224).max) {\n            revert ErrOverflow();\n        }\n        return uint224(a);\n    }\n}\n\nlibrary BoringMath32 {\n    function add(uint32 a, uint32 b) internal pure returns (uint32) {\n        return a + b;\n    }\n\n    function sub(uint32 a, uint32 b) internal pure returns (uint32) {\n        return a - b;\n    }\n\n    function mul(uint32 a, uint32 b) internal pure returns (uint32) {\n        return a * b;\n    }\n\n    function div(uint32 a, uint32 b) internal pure returns (uint32) {\n        return a / b;\n    }\n}\n\nlibrary BoringMath64 {\n    function add(uint64 a, uint64 b) internal pure returns (uint64) {\n        return a + b;\n    }\n\n    function sub(uint64 a, uint64 b) internal pure returns (uint64) {\n        return a - b;\n    }\n\n    function mul(uint64 a, uint64 b) internal pure returns (uint64) {\n        return a * b;\n    }\n\n    function div(uint64 a, uint64 b) internal pure returns (uint64) {\n        return a / b;\n    }\n}\n\nlibrary BoringMath112 {\n    function add(uint112 a, uint112 b) internal pure returns (uint112) {\n        return a + b;\n    }\n\n    function sub(uint112 a, uint112 b) internal pure returns (uint112) {\n        return a - b;\n    }\n\n    function mul(uint112 a, uint112 b) internal pure returns (uint112) {\n        return a * b;\n    }\n\n    function div(uint112 a, uint112 b) internal pure returns (uint112) {\n        return a / b;\n    }\n}\n\nlibrary BoringMath128 {\n    function add(uint128 a, uint128 b) internal pure returns (uint128) {\n        return a + b;\n    }\n\n    function sub(uint128 a, uint128 b) internal pure returns (uint128) {\n        return a - b;\n    }\n\n    function mul(uint128 a, uint128 b) internal pure returns (uint128) {\n        return a * b;\n    }\n\n    function div(uint128 a, uint128 b) internal pure returns (uint128) {\n        return a / b;\n    }\n}\n\nlibrary BoringMath224 {\n    function add(uint224 a, uint224 b) internal pure returns (uint224) {\n        return a + b;\n    }\n\n    function sub(uint224 a, uint224 b) internal pure returns (uint224) {\n        return a - b;\n    }\n\n    function mul(uint224 a, uint224 b) internal pure returns (uint224) {\n        return a * b;\n    }\n\n    function div(uint224 a, uint224 b) internal pure returns (uint224) {\n        return a / b;\n    }\n}\n"
      }
    },
    "settings": {
      "remappings": [
        "/=src/",
        "forge-std/=lib/forge-std/src/",
        "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
        "@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
        "@BoringSolidity/=lib/BoringSolidity/contracts/",
        "@solady/=lib/solady/src/",
        "@solmate/=lib/solmate/src/",
        "@excessivelySafeCall/=lib/ExcessivelySafeCall/src/",
        "@safe-contracts/=lib/safe-contracts/contracts/",
        "@fuzzlib/=lib/fuzzlib/src/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 400
      },
      "metadata": {
        "useLiteralContent": false,
        "bytecodeHash": "ipfs",
        "appendCBOR": true
      },
      "outputSelection": {
        "*": {
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "evmVersion": "shanghai",
      "viaIR": false,
      "libraries": {}
    }
  },
  "compiler": "0.8.26+commit.8a97fa7a"
}