{
  "address": "0xefCDC6FB4973aC30325Fb2B39e1a2F384E254b7A",
  "abi": [
    {
      "type": "constructor",
      "inputs": [
        {
          "name": "owner_",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "add",
      "inputs": [
        {
          "name": "items_",
          "type": "tuple[]",
          "internalType": "struct CauldronInfo[]",
          "components": [
            {
              "name": "cauldron",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "version",
              "type": "uint8",
              "internalType": "uint8"
            },
            {
              "name": "deprecated",
              "type": "bool",
              "internalType": "bool"
            }
          ]
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "cauldrons",
      "inputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "cauldron",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "version",
          "type": "uint8",
          "internalType": "uint8"
        },
        {
          "name": "deprecated",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "get",
      "inputs": [
        {
          "name": "index_",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "tuple",
          "internalType": "struct CauldronInfo",
          "components": [
            {
              "name": "cauldron",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "version",
              "type": "uint8",
              "internalType": "uint8"
            },
            {
              "name": "deprecated",
              "type": "bool",
              "internalType": "bool"
            }
          ]
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "get",
      "inputs": [
        {
          "name": "cauldron_",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "tuple",
          "internalType": "struct CauldronInfo",
          "components": [
            {
              "name": "cauldron",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "version",
              "type": "uint8",
              "internalType": "uint8"
            },
            {
              "name": "deprecated",
              "type": "bool",
              "internalType": "bool"
            }
          ]
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "isDeprecated",
      "inputs": [
        {
          "name": "cauldron_",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "length",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "operators",
      "inputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "owner",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "registered",
      "inputs": [
        {
          "name": "cauldron_",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "remove",
      "inputs": [
        {
          "name": "cauldrons_",
          "type": "address[]",
          "internalType": "address[]"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "setDeprecated",
      "inputs": [
        {
          "name": "cauldron_",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "deprecated_",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "setOperator",
      "inputs": [
        {
          "name": "operator",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "enable",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "transferOwnership",
      "inputs": [
        {
          "name": "newOwner",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "event",
      "name": "LogCauldronDeprecated",
      "inputs": [
        {
          "name": "cauldron",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "deprecated",
          "type": "bool",
          "indexed": false,
          "internalType": "bool"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "LogCauldronRegistered",
      "inputs": [
        {
          "name": "cauldron",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "version",
          "type": "uint8",
          "indexed": false,
          "internalType": "uint8"
        },
        {
          "name": "deprecated",
          "type": "bool",
          "indexed": false,
          "internalType": "bool"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "LogCauldronRemoved",
      "inputs": [
        {
          "name": "cauldron",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "OperatorChanged",
      "inputs": [
        {
          "name": "",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "",
          "type": "bool",
          "indexed": false,
          "internalType": "bool"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "OwnershipTransferred",
      "inputs": [
        {
          "name": "user",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "newOwner",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "error",
      "name": "ErrAlreadyRegistered",
      "inputs": [
        {
          "name": "cauldron_",
          "type": "address",
          "internalType": "address"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrEmptyRegistry",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrInvalidCauldron",
      "inputs": [
        {
          "name": "cauldron_",
          "type": "address",
          "internalType": "address"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrNotRegistered",
      "inputs": [
        {
          "name": "cauldron_",
          "type": "address",
          "internalType": "address"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrTooManyCauldrons",
      "inputs": []
    },
    {
      "type": "error",
      "name": "Unauthorized",
      "inputs": []
    }
  ],
  "bytecode": "0x6080604052348015600f57600080fd5b50604051610f21380380610f21833981016040819052602c916083565b6033816038565b5060b1565b600080546001600160a01b0319166001600160a01b03831690811782556040519091907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350565b600060208284031215609457600080fd5b81516001600160a01b038116811460aa57600080fd5b9392505050565b610e61806100c06000396000f3fe608060405234801561001057600080fd5b50600436106100df5760003560e01c80638da5cb5b1161008c578063b2dd5c0711610066578063b2dd5c0714610225578063c2bc2efc14610238578063eada3cae1461024b578063f2fde38b1461025e57600080fd5b80638da5cb5b146101a457806394543c15146101cf5780639507d39a146101e257600080fd5b80635626265c116100bd5780635626265c146101425780635740d43c1461017e5780635e4ba17c1461019157600080fd5b806313e7c9d8146100e45780631f7b6d321461011c578063558a72971461012d575b600080fd5b6101076100f2366004610bfd565b60016020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b600254604051908152602001610113565b61014061013b366004610c2f565b610271565b005b610155610150366004610c62565b6102fb565b604080516001600160a01b03909416845260ff9092166020840152151590820152606001610113565b61014061018c366004610c2f565b61033a565b61014061019f366004610c7b565b610448565b6000546101b7906001600160a01b031681565b6040516001600160a01b039091168152602001610113565b6101076101dd366004610bfd565b6107bc565b6101f56101f0366004610c62565b6107d1565b6040805182516001600160a01b0316815260208084015160ff169082015291810151151590820152606001610113565b610107610233366004610bfd565b610874565b6101f5610246366004610bfd565b6108dc565b610140610259366004610cf2565b6109a1565b61014061026c366004610bfd565b610b6c565b6000546001600160a01b0316331461029b576040516282b42960e81b815260040160405180910390fd5b6001600160a01b038216600081815260016020908152604091829020805460ff191685151590811790915591519182527f193de8d500b5cb7b720089b258a39e9c1d0b840019a73ae7c51c3f9101732b0291015b60405180910390a25050565b6002818154811061030b57600080fd5b6000918252602090912001546001600160a01b038116915060ff600160a01b8204811691600160a81b90041683565b3360009081526001602052604090205460ff1615801561036557506000546001600160a01b03163314155b15610382576040516282b42960e81b815260040160405180910390fd5b61038b82610874565b6103b85760405163faeb04df60e01b81526001600160a01b03831660048201526024015b60405180910390fd5b6001600160a01b0382166000908152600360205260409020546002805483929081106103e6576103e6610d59565b6000918252602091829020018054921515600160a81b0260ff60a81b199093169290921790915560405182151581526001600160a01b038416917fc3eefbf82dc083837ae72f27bb95420dfefba61f16ebc7f2665eac4fed2dc09191016102ef565b3360009081526001602052604090205460ff1615801561047357506000546001600160a01b03163314155b15610490576040516282b42960e81b815260040160405180910390fd5b6002546000036104b35760405163724c98a960e11b815260040160405180910390fd5b6002548111156104d6576040516363847b9d60e11b815260040160405180910390fd5b60005b818110156107b75760008383838181106104f5576104f5610d59565b905060200201602081019061050a9190610bfd565b90506001600160a01b03811661053e57604051632d0776e960e11b81526001600160a01b03821660048201526024016103af565b6001600160a01b038116600090815260036020526040902054801580156105965750816001600160a01b0316600260008154811061057e5761057e610d59565b6000918252602090912001546001600160a01b031614155b156105bf5760405163faeb04df60e01b81526001600160a01b03831660048201526024016103af565b6002546000906105d190600190610d6f565b90508082036106565760028054806105eb576105eb610d90565b60008281526020808220830160001990810180546001600160b01b03191690559092019092556001600160a01b038516808352600390915260408083208390555190917f62f5816340476eae9e2870d1ec8ae65572cf8757ac5068ba89a098b5f457275991a26107a9565b81600360006002848154811061066e5761066e610d59565b60009182526020808320909101546001600160a01b0316835282019290925260400190205560028054829081106106a7576106a7610d59565b90600052602060002001600283815481106106c4576106c4610d59565b600091825260209091208254910180546001600160a01b039092166001600160a01b031983168117825583546001600160a81b031990931617600160a01b9283900460ff90811690930217808255925460ff60a81b19909316600160a81b938490049092161515909202179055600280548061074257610742610d90565b60008281526020808220830160001990810180546001600160b01b03191690559092019092556001600160a01b038516808352600390915260408083208390555190917f62f5816340476eae9e2870d1ec8ae65572cf8757ac5068ba89a098b5f457275991a25b5050508060010190506104d9565b505050565b60006107c7826108dc565b6040015192915050565b604080516060810182526000808252602082018190529181019190915260025482106108135760405163faeb04df60e01b8152600060048201526024016103af565b6002828154811061082657610826610d59565b60009182526020918290206040805160608101825291909201546001600160a01b038116825260ff600160a01b8204811694830194909452600160a81b900490921615159082015292915050565b6001600160a01b0381166000908152600360205260408120541515806108d65750600254158015906108d65750816001600160a01b031660026000815481106108bf576108bf610d59565b6000918252602090912001546001600160a01b0316145b92915050565b60408051606081018252600080825260208083018290528284018290526001600160a01b038516825260039052919091205461091783610874565b61093f5760405163faeb04df60e01b81526001600160a01b03841660048201526024016103af565b6002818154811061095257610952610d59565b60009182526020918290206040805160608101825291909201546001600160a01b038116825260ff600160a01b8204811694830194909452600160a81b90049092161515908201529392505050565b3360009081526001602052604090205460ff161580156109cc57506000546001600160a01b03163314155b156109e9576040516282b42960e81b815260040160405180910390fd5b60005b818110156107b7576000838383818110610a0857610a08610d59565b905060600201803603810190610a1e9190610da6565b80519091506001600160a01b0316610a57578051604051632d0776e960e11b81526001600160a01b0390911660048201526024016103af565b8051610a6290610874565b15610a8e5780516040516332abf0bd60e01b81526001600160a01b0390911660048201526024016103af565b60028054600181018255600091825282517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace82018054602080870180516040808a0180516001600160a01b039889166001600160a81b03199097168717600160a01b60ff958616021760ff60a81b1916600160a81b911515919091021790965593885260038352968390208690558751905193518351949097168452951515908301529293909116917f061e2f1597d055b0c76509673378162ceb3ae2263d44a4b9e1fb52a6f8c2eadb910160405180910390a250506001016109ec565b6000546001600160a01b03163314610b96576040516282b42960e81b815260040160405180910390fd5b600080546001600160a01b0319166001600160a01b0383169081178255604051909133917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a350565b80356001600160a01b0381168114610bf857600080fd5b919050565b600060208284031215610c0f57600080fd5b610c1882610be1565b9392505050565b80358015158114610bf857600080fd5b60008060408385031215610c4257600080fd5b610c4b83610be1565b9150610c5960208401610c1f565b90509250929050565b600060208284031215610c7457600080fd5b5035919050565b60008060208385031215610c8e57600080fd5b823567ffffffffffffffff811115610ca557600080fd5b8301601f81018513610cb657600080fd5b803567ffffffffffffffff811115610ccd57600080fd5b8560208260051b8401011115610ce257600080fd5b6020919091019590945092505050565b60008060208385031215610d0557600080fd5b823567ffffffffffffffff811115610d1c57600080fd5b8301601f81018513610d2d57600080fd5b803567ffffffffffffffff811115610d4457600080fd5b856020606083028401011115610ce257600080fd5b634e487b7160e01b600052603260045260246000fd5b818103818111156108d657634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b60006060828403128015610db957600080fd5b600090506040516060810181811067ffffffffffffffff82111715610dec57634e487b7160e01b83526041600452602483fd5b604052610df884610be1565b8152602084013560ff81168114610e0d578283fd5b6020820152610e1e60408501610c1f565b604082015294935050505056fea264697066735822122083d50a66f2589487e02548e88f3515317b93102139ba60dc540e141bfce9daad64736f6c634300081a0033000000000000000000000000fb3485c2e209a5cfbdc1447674256578f1a80ee3",
  "args_data": "0x000000000000000000000000fb3485c2e209a5cfbdc1447674256578f1a80ee3",
  "tx_hash": null,
  "args": [
    "0x3A2761F421b7E3Fd18C1aD50c461b2DE2F77c367"
  ],
  "data": "0xf2fde38b0000000000000000000000003a2761f421b7e3fd18c1ad50c461b2de2f77c367",
  "artifact_path": "CauldronRegistry.sol",
  "artifact_full_path": "CauldronRegistry.sol:CauldronRegistry",
  "standardJsonInput": {
    "language": "Solidity",
    "sources": {
      "src/periphery/CauldronRegistry.sol": {
        "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.0;\n\nimport {OwnableOperators} from \"/mixins/OwnableOperators.sol\";\n\nstruct CauldronInfo {\n    address cauldron;\n    uint8 version;\n    bool deprecated;\n}\n\ncontract CauldronRegistry is OwnableOperators {\n    event LogCauldronRegistered(address indexed cauldron, uint8 version, bool deprecated);\n    event LogCauldronRemoved(address indexed cauldron);\n    event LogCauldronDeprecated(address indexed cauldron, bool deprecated);\n\n    error ErrAlreadyRegistered(address cauldron_);\n    error ErrNotRegistered(address cauldron_);\n    error ErrEmptyRegistry();\n    error ErrTooManyCauldrons();\n    error ErrInvalidCauldron(address cauldron_);\n\n    CauldronInfo[] public cauldrons;\n    mapping(address => uint256) internal cauldronIndicies;\n\n    constructor(address owner_) {\n        _initializeOwner(owner_);\n    }\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // VIEWS\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    function length() public view returns (uint256) {\n        return cauldrons.length;\n    }\n\n    function get(address cauldron_) public view returns (CauldronInfo memory) {\n        uint256 cauldronIndex = cauldronIndicies[cauldron_];\n        if (!registered(cauldron_)) {\n            revert ErrNotRegistered(cauldron_);\n        }\n\n        return cauldrons[cauldronIndex];\n    }\n\n    function registered(address cauldron_) public view returns (bool) {\n        return cauldronIndicies[cauldron_] != 0 || (cauldrons.length != 0 && cauldrons[0].cauldron == cauldron_);\n    }\n\n    function get(uint256 index_) public view returns (CauldronInfo memory) {\n        if (index_ >= cauldrons.length) {\n            revert ErrNotRegistered(address(0));\n        }\n\n        return cauldrons[index_];\n    }\n\n    function isDeprecated(address cauldron_) public view returns (bool) {\n        return get(cauldron_).deprecated;\n    }\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // OPERATORS\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    function add(CauldronInfo[] calldata items_) external onlyOperators {\n        for (uint256 i = 0; i < items_.length; ++i) {\n            CauldronInfo memory item = items_[i];\n\n            if (item.cauldron == address(0)) {\n                revert ErrInvalidCauldron(item.cauldron);\n            }\n\n            if (registered(item.cauldron)) {\n                revert ErrAlreadyRegistered(item.cauldron);\n            }\n\n            uint256 cauldronIndex = cauldrons.length;\n            cauldrons.push(item);\n            cauldronIndicies[item.cauldron] = cauldronIndex;\n\n            emit LogCauldronRegistered(item.cauldron, item.version, item.deprecated);\n        }\n    }\n\n    function setDeprecated(address cauldron_, bool deprecated_) external onlyOperators {\n        if (!registered(cauldron_)) {\n            revert ErrNotRegistered(cauldron_);\n        }\n\n        cauldrons[cauldronIndicies[cauldron_]].deprecated = deprecated_;\n        emit LogCauldronDeprecated(cauldron_, deprecated_);\n    }\n\n    function remove(address[] calldata cauldrons_) external onlyOperators {\n        if (cauldrons.length == 0) {\n            revert ErrEmptyRegistry();\n        }\n\n        if (cauldrons.length < cauldrons_.length) {\n            revert ErrTooManyCauldrons();\n        }\n\n        for (uint256 i = 0; i < cauldrons_.length; ++i) {\n            address cauldron = cauldrons_[i];\n\n            if (address(cauldron) == address(0)) {\n                revert ErrInvalidCauldron(cauldron);\n            }\n\n            uint256 cauldronIndex = cauldronIndicies[cauldron];\n            if (cauldronIndex == 0 && cauldrons[0].cauldron != cauldron) {\n                revert ErrNotRegistered(cauldron);\n            }\n\n            uint256 lastIndex = cauldrons.length - 1;\n            if (cauldronIndex == lastIndex) {\n                cauldrons.pop();\n                delete cauldronIndicies[cauldron];\n                emit LogCauldronRemoved(cauldron);\n            } else {\n                cauldronIndicies[cauldrons[lastIndex].cauldron] = cauldronIndex;\n                cauldrons[cauldronIndex] = cauldrons[lastIndex];\n                cauldrons.pop();\n                delete cauldronIndicies[cauldron];\n                emit LogCauldronRemoved(cauldron);\n            }\n        }\n    }\n}\n"
      },
      "src/mixins/OwnableOperators.sol": {
        "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.0;\n\n/// @title OwnableOperators\n/// @dev must call `_initializeOwner` to initialize owner\ncontract OwnableOperators {\n    event OwnershipTransferred(address indexed user, address indexed newOwner);\n    event OperatorChanged(address indexed, bool);\n\n    error Unauthorized();\n\n    address public owner;\n    mapping(address => bool) public operators;\n\n    modifier onlyOwner() virtual {\n        if(msg.sender != owner) {\n            revert Unauthorized();\n        }\n        _;\n    }\n\n    modifier onlyOperators() {\n        if (!operators[msg.sender] && msg.sender != owner) {\n            revert Unauthorized();\n        }\n        _;\n    }\n\n    //////////////////////////////////////////////////////////////////////////////////////\n    /// Admin\n    //////////////////////////////////////////////////////////////////////////////////////\n\n    function setOperator(address operator, bool enable) external onlyOwner {\n        operators[operator] = enable;\n        emit OperatorChanged(operator, enable);\n    }\n\n    function transferOwnership(address newOwner) external onlyOwner {\n        owner = newOwner;\n        emit OwnershipTransferred(msg.sender, newOwner);\n    }\n\n    //////////////////////////////////////////////////////////////////////////////////////\n    /// Internals\n    //////////////////////////////////////////////////////////////////////////////////////\n\n    function _initializeOwner(address _owner) internal {\n        owner = _owner;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n}\n"
      }
    },
    "settings": {
      "remappings": [
        "/=src/",
        "forge-std/=lib/forge-std/src/",
        "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
        "@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
        "@BoringSolidity/=lib/BoringSolidity/contracts/",
        "@solady/=lib/solady/src/",
        "@solmate/=lib/solmate/src/",
        "@excessivelySafeCall/=lib/ExcessivelySafeCall/src/",
        "@safe-contracts/=lib/safe-contracts/contracts/",
        "@fuzzlib/=lib/fuzzlib/src/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 400
      },
      "metadata": {
        "useLiteralContent": false,
        "bytecodeHash": "ipfs",
        "appendCBOR": true
      },
      "outputSelection": {
        "*": {
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "evmVersion": "paris",
      "viaIR": false,
      "libraries": {}
    }
  },
  "compiler": "0.8.26+commit.8a97fa7a"
}