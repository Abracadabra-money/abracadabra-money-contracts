{
  "address": "0x5067d08c60E41Fa7F76390F128cFCaB5098345c0",
  "abi": [
    {
      "type": "constructor",
      "inputs": [
        {
          "name": "_owner",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "_fixedNativeFee",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "_oft",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "_aggregator",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "_feeTo",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "_quoteType",
          "type": "uint8",
          "internalType": "uint8"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "receive",
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "DEFAULT_USD_FEE",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "aggregator",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "contract IAggregator"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "feeTo",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "fixedNativeFee",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getFee",
      "inputs": [],
      "outputs": [
        {
          "name": "nativeFee",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "oft",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "contract ILzOFTV2"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "operators",
      "inputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "owner",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "quoteType",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint8",
          "internalType": "enum ILzFeeHandler.QuoteType"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "setAggregator",
      "inputs": [
        {
          "name": "_aggregator",
          "type": "address",
          "internalType": "contract IAggregator"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "setFeeTo",
      "inputs": [
        {
          "name": "_feeTo",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "setFixedNativeFee",
      "inputs": [
        {
          "name": "_fixedNativeFee",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "setOperator",
      "inputs": [
        {
          "name": "operator",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "enable",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "setQuoteType",
      "inputs": [
        {
          "name": "_quoteType",
          "type": "uint8",
          "internalType": "enum ILzFeeHandler.QuoteType"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "setUsdFee",
      "inputs": [
        {
          "name": "_usdFee",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "transferOwnership",
      "inputs": [
        {
          "name": "newOwner",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "usdFee",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "withdrawFees",
      "inputs": [],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "event",
      "name": "LogFeeCollected",
      "inputs": [
        {
          "name": "amount",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "LogFeeToChanged",
      "inputs": [
        {
          "name": "previous",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "current",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "LogFeeWithdrawn",
      "inputs": [
        {
          "name": "to",
          "type": "address",
          "indexed": false,
          "internalType": "address"
        },
        {
          "name": "amount",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "LogFixedNativeFeeChanged",
      "inputs": [
        {
          "name": "previous",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        },
        {
          "name": "current",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "LogOracleImplementationChange",
      "inputs": [
        {
          "name": "previous",
          "type": "address",
          "indexed": true,
          "internalType": "contract IAggregator"
        },
        {
          "name": "current",
          "type": "address",
          "indexed": true,
          "internalType": "contract IAggregator"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "LogQuoteTypeChanged",
      "inputs": [
        {
          "name": "previous",
          "type": "uint8",
          "indexed": false,
          "internalType": "enum ILzFeeHandler.QuoteType"
        },
        {
          "name": "current",
          "type": "uint8",
          "indexed": false,
          "internalType": "enum ILzFeeHandler.QuoteType"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "LogUsdFeeChanged",
      "inputs": [
        {
          "name": "previous",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        },
        {
          "name": "current",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "OperatorChanged",
      "inputs": [
        {
          "name": "",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "",
          "type": "bool",
          "indexed": false,
          "internalType": "bool"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "OwnershipTransferred",
      "inputs": [
        {
          "name": "user",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "newOwner",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "error",
      "name": "ErrInvalidQuoteType",
      "inputs": [
        {
          "name": "",
          "type": "uint8",
          "internalType": "enum ILzFeeHandler.QuoteType"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrUnauthorizedSender",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrValueTooLowToCoverFees",
      "inputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrWithdrawFailed",
      "inputs": []
    },
    {
      "type": "error",
      "name": "Unauthorized",
      "inputs": []
    }
  ],
  "bytecode": "0x60a06040526006805460ff1916600117905534801561001d57600080fd5b50604051610eb8380380610eb883398101604081905261003c91610149565b610045866100cc565b60048590556001600160a01b03848116608052600380546001600160a01b0319908116868416179091556002805490911691841691909117815560ff82169081111561009357610093610117565b6006805460ff191660018360028111156100af576100af610117565b021790555050670de0b6b3a7640000600555506101c09350505050565b600080546001600160a01b0319166001600160a01b03831690811782556040519091907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350565b634e487b7160e01b600052602160045260246000fd5b80516001600160a01b038116811461014457600080fd5b919050565b60008060008060008060c0878903121561016257600080fd5b61016b8761012d565b9550602087015194506101806040880161012d565b935061018e6060880161012d565b925061019c6080880161012d565b915060a087015160ff811681146101b257600080fd5b809150509295509295509295565b608051610cdd6101db60003960006102990152610cdd6000f3fe60806040526004361061010d5760003560e01c8063a28598d411610095578063ced72f8711610064578063ced72f8714610331578063dbdaad3a14610346578063f2fde38b14610366578063f46901ed14610386578063f9120af6146103a657600080fd5b8063a28598d4146102bb578063a626b852146102db578063bf01fb1c146102ff578063cbe95f8d1461031557600080fd5b8063558a7297116100dc578063558a72971461020057806355929b7e146102205780636d0f18c4146102475780638da5cb5b146102675780639b5215f61461028757600080fd5b8063017e7e581461014c57806313e7c9d814610189578063245a7bfc146101c9578063476343ee146101e957600080fd5b36610147576040513481527fd1ae1000117f80c29c2c0557e508821a94820657a8fdb7139c8f47e1eebcf19a9060200160405180910390a1005b600080fd5b34801561015857600080fd5b5060025461016c906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561019557600080fd5b506101b96101a4366004610a23565b60016020526000908152604090205460ff1681565b6040519015158152602001610180565b3480156101d557600080fd5b5060035461016c906001600160a01b031681565b3480156101f557600080fd5b506101fe6103c6565b005b34801561020c57600080fd5b506101fe61021b366004610a47565b610488565b34801561022c57600080fd5b5060065461023a9060ff1681565b6040516101809190610abd565b34801561025357600080fd5b506101fe610262366004610ad1565b610511565b34801561027357600080fd5b5060005461016c906001600160a01b031681565b34801561029357600080fd5b5061016c7f000000000000000000000000000000000000000000000000000000000000000081565b3480156102c757600080fd5b506101fe6102d6366004610ad1565b61059a565b3480156102e757600080fd5b506102f160055481565b604051908152602001610180565b34801561030b57600080fd5b506102f160045481565b34801561032157600080fd5b506102f1670de0b6b3a764000081565b34801561033d57600080fd5b506102f1610623565b34801561035257600080fd5b506101fe610361366004610aea565b61077e565b34801561037257600080fd5b506101fe610381366004610a23565b61086c565b34801561039257600080fd5b506101fe6103a1366004610a23565b6108e1565b3480156103b257600080fd5b506101fe6103c1366004610a23565b610967565b60025460405147916000916001600160a01b039091169083908381818185875af1925050503d8060008114610417576040519150601f19603f3d011682016040523d82523d6000602084013e61041c565b606091505b505090508061043e5760405163f5ef1ce360e01b815260040160405180910390fd5b600254604080516001600160a01b039092168252602082018490527f418b0ccedb3670086d8041f37709e230d4b319026a713e8f5df213619e924721910160405180910390a15050565b6000546001600160a01b031633146104b2576040516282b42960e81b815260040160405180910390fd5b6001600160a01b038216600081815260016020908152604091829020805460ff191685151590811790915591519182527f193de8d500b5cb7b720089b258a39e9c1d0b840019a73ae7c51c3f9101732b02910160405180910390a25050565b3360009081526001602052604090205460ff1615801561053c57506000546001600160a01b03163314155b15610559576040516282b42960e81b815260040160405180910390fd5b60045460408051918252602082018390527fc5aa5bf8b75bafcc972927146f61c0c06e7bce1f5f2601a3210e0e34b8236987910160405180910390a1600455565b3360009081526001602052604090205460ff161580156105c557506000546001600160a01b03163314155b156105e2576040516282b42960e81b815260040160405180910390fd5b60055460408051918252602082018390527f89fa9f9ef52364f929ffacff949493aa1aefe10a8ec34107a313b8287fa65450910160405180910390a1600555565b6000600160065460ff16600281111561063e5761063e610a85565b0361075857600360009054906101000a90046001600160a01b03166001600160a01b03166350d25bcd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610696573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ba9190610b0b565b600554600360009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610710573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107349190610b24565b61073f90600a610c44565b6107499190610c53565b6107539190610c6a565b905090565b600260065460ff16600281111561077157610771610a85565b0361077b57506004545b90565b3360009081526001602052604090205460ff161580156107a957506000546001600160a01b03163314155b156107c6576040516282b42960e81b815260040160405180910390fd5b60028160028111156107da576107da610a85565b1115610804578060405163a25fcb3160e01b81526004016107fb9190610abd565b60405180910390fd5b6006546040517f5bfc534944e42c228c39e4d0b49815e328e5fb00a2f8902592db327b0d35b49d9161083d9160ff909116908490610c8c565b60405180910390a16006805482919060ff1916600183600281111561086457610864610a85565b021790555050565b6000546001600160a01b03163314610896576040516282b42960e81b815260040160405180910390fd5b600080546001600160a01b0319166001600160a01b0383169081178255604051909133917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a350565b6000546001600160a01b0316331461090b576040516282b42960e81b815260040160405180910390fd5b6002546040516001600160a01b038084169216907f4d04c0a3649bb745c9de0ab085f8c69b31c001bdb16cd323f36b867a300d006290600090a3600280546001600160a01b0319166001600160a01b0392909216919091179055565b3360009081526001602052604090205460ff1615801561099257506000546001600160a01b03163314155b156109af576040516282b42960e81b815260040160405180910390fd5b6003546040516001600160a01b038084169216907f8e0352ee1de57032a7c8ddf4cb1daa3ff929d0a8534e42a124811b2fa033cccd90600090a3600380546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0381168114610a2057600080fd5b50565b600060208284031215610a3557600080fd5b8135610a4081610a0b565b9392505050565b60008060408385031215610a5a57600080fd5b8235610a6581610a0b565b915060208301358015158114610a7a57600080fd5b809150509250929050565b634e487b7160e01b600052602160045260246000fd5b60038110610ab957634e487b7160e01b600052602160045260246000fd5b9052565b60208101610acb8284610a9b565b92915050565b600060208284031215610ae357600080fd5b5035919050565b600060208284031215610afc57600080fd5b813560038110610a4057600080fd5b600060208284031215610b1d57600080fd5b5051919050565b600060208284031215610b3657600080fd5b815160ff81168114610a4057600080fd5b634e487b7160e01b600052601160045260246000fd5b6001815b6001841115610b9857808504811115610b7c57610b7c610b47565b6001841615610b8a57908102905b60019390931c928002610b61565b935093915050565b600082610baf57506001610acb565b81610bbc57506000610acb565b8160018114610bd25760028114610bdc57610bf8565b6001915050610acb565b60ff841115610bed57610bed610b47565b50506001821b610acb565b5060208310610133831016604e8410600b8410161715610c1b575081810a610acb565b610c286000198484610b5d565b8060001904821115610c3c57610c3c610b47565b029392505050565b6000610a4060ff841683610ba0565b8082028115828204841417610acb57610acb610b47565b600082610c8757634e487b7160e01b600052601260045260246000fd5b500490565b60408101610c9a8285610a9b565b610a406020830184610a9b56fea26469706673582212209bf935930b4426db0b2979a4c12770ac07b33ec6cba9a9ea09d22e5986766a5a64736f6c634300081a0033000000000000000000000000f68b78cb64c49967719214aa029a29712ddd567f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000005b80901ff867e541465057cb37de6b8c6e5fb133000000000000000000000000f4766552d15ae4d256ad41b6cf2933482b0680dc00000000000000000000000022209b0a774a88970201cfba3dc250ada5afdba50000000000000000000000000000000000000000000000000000000000000001",
  "args_data": "0x000000000000000000000000f68b78cb64c49967719214aa029a29712ddd567f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000005b80901ff867e541465057cb37de6b8c6e5fb133000000000000000000000000f4766552d15ae4d256ad41b6cf2933482b0680dc00000000000000000000000022209b0a774a88970201cfba3dc250ada5afdba50000000000000000000000000000000000000000000000000000000000000001",
  "tx_hash": "",
  "args": null,
  "data": "",
  "artifact_path": "LzOFTV2FeeHandler.sol",
  "artifact_full_path": "LzOFTV2FeeHandler.sol:LzOFTV2FeeHandler",
  "standardJsonInput": {
    "language": "Solidity",
    "sources": {
      "src/periphery/LzOFTV2FeeHandler.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\nimport {OwnableOperators} from \"/mixins/OwnableOperators.sol\";\nimport {ILzFeeHandler, ILzOFTV2} from \"/interfaces/ILayerZero.sol\";\nimport {IAggregator} from \"/interfaces/IAggregator.sol\";\n\ncontract LzOFTV2FeeHandler is OwnableOperators, ILzFeeHandler {\n    event LogFeeWithdrawn(address to, uint256 amount);\n    event LogFixedNativeFeeChanged(uint256 previous, uint256 current);\n    event LogOracleImplementationChange(IAggregator indexed previous, IAggregator indexed current);\n    event LogQuoteTypeChanged(QuoteType previous, QuoteType current);\n    event LogFeeToChanged(address indexed previous, address indexed current);\n    event LogUsdFeeChanged(uint256 previous, uint256 current);\n    event LogFeeCollected(uint256 amount);\n\n    error ErrInvalidQuoteType(QuoteType);\n    error ErrWithdrawFailed();\n    error ErrValueTooLowToCoverFees(uint256);\n    error ErrUnauthorizedSender();\n\n    modifier onlyFromOFT() {\n        if (msg.sender != address(oft)) {\n            revert ErrUnauthorizedSender();\n        }\n        _;\n    }\n\n    uint256 public constant DEFAULT_USD_FEE = 1e18;\n\n    ILzOFTV2 public immutable oft;\n\n    address public feeTo;\n    IAggregator public aggregator;\n    uint256 public fixedNativeFee;\n    uint256 public usdFee;\n    QuoteType public quoteType = QuoteType.Oracle;\n\n    constructor(\n        address _owner,\n        uint256 _fixedNativeFee,\n        address _oft,\n        address _aggregator,\n        address _feeTo,\n        uint8 _quoteType\n    ) {\n        _initializeOwner(_owner);\n        fixedNativeFee = _fixedNativeFee;\n        oft = ILzOFTV2(_oft);\n        aggregator = IAggregator(_aggregator);\n        feeTo = _feeTo;\n        quoteType = QuoteType(_quoteType);\n        usdFee = DEFAULT_USD_FEE;\n    }\n\n    receive() external payable {\n        emit LogFeeCollected(msg.value);\n    }\n\n    /************************************************************************\n     * Public\n     ************************************************************************/\n    function withdrawFees() external {\n        uint256 balance = address(this).balance;\n        (bool success, ) = feeTo.call{value: balance}(\"\");\n        if (!success) revert ErrWithdrawFailed();\n        emit LogFeeWithdrawn(feeTo, balance);\n    }\n\n    /************************************************************************\n     * Operations\n     ************************************************************************/\n    function setFixedNativeFee(uint256 _fixedNativeFee) external onlyOperators {\n        emit LogFixedNativeFeeChanged(fixedNativeFee, _fixedNativeFee);\n        fixedNativeFee = _fixedNativeFee;\n    }\n\n    function setAggregator(IAggregator _aggregator) external onlyOperators {\n        emit LogOracleImplementationChange(aggregator, _aggregator);\n        aggregator = _aggregator;\n    }\n\n    function setUsdFee(uint256 _usdFee) external onlyOperators {\n        emit LogUsdFeeChanged(usdFee, _usdFee);\n        usdFee = _usdFee;\n    }\n\n    function setQuoteType(QuoteType _quoteType) external onlyOperators {\n        if (_quoteType > QuoteType.Fixed) {\n            revert ErrInvalidQuoteType(_quoteType);\n        }\n\n        emit LogQuoteTypeChanged(quoteType, _quoteType);\n        quoteType = _quoteType;\n    }\n\n    /************************************************************************\n     * Owners\n     ************************************************************************/\n    function setFeeTo(address _feeTo) external onlyOwner {\n        emit LogFeeToChanged(feeTo, _feeTo);\n        feeTo = _feeTo;\n    }\n\n    /************************************************************************\n     * Views\n     ************************************************************************/\n    function getFee() public view override virtual returns (uint256 nativeFee) {\n        if (quoteType == QuoteType.Oracle) {\n            nativeFee = ((10 ** aggregator.decimals()) * usdFee) / uint256(aggregator.latestAnswer());\n        } else if (quoteType == QuoteType.Fixed) {\n            nativeFee = fixedNativeFee;\n        }\n    }\n}\n"
      },
      "src/mixins/OwnableOperators.sol": {
        "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.0;\n\n/// @title OwnableOperators\n/// @dev must call `_initializeOwner` to initialize owner\ncontract OwnableOperators {\n    event OwnershipTransferred(address indexed user, address indexed newOwner);\n    event OperatorChanged(address indexed, bool);\n\n    error Unauthorized();\n\n    address public owner;\n    mapping(address => bool) public operators;\n\n    modifier onlyOwner() virtual {\n        if(msg.sender != owner) {\n            revert Unauthorized();\n        }\n        _;\n    }\n\n    modifier onlyOperators() {\n        if (!operators[msg.sender] && msg.sender != owner) {\n            revert Unauthorized();\n        }\n        _;\n    }\n\n    //////////////////////////////////////////////////////////////////////////////////////\n    /// Admin\n    //////////////////////////////////////////////////////////////////////////////////////\n\n    function setOperator(address operator, bool enable) external onlyOwner {\n        operators[operator] = enable;\n        emit OperatorChanged(operator, enable);\n    }\n\n    function transferOwnership(address newOwner) external onlyOwner {\n        owner = newOwner;\n        emit OwnershipTransferred(msg.sender, newOwner);\n    }\n\n    //////////////////////////////////////////////////////////////////////////////////////\n    /// Internals\n    //////////////////////////////////////////////////////////////////////////////////////\n\n    function _initializeOwner(address _owner) internal {\n        owner = _owner;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    function _checkOwner() internal view {\n        if (msg.sender != owner) {\n            revert Unauthorized();\n        }\n    }\n}\n"
      },
      "src/interfaces/ILayerZero.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\nimport {IAggregator} from \"/interfaces/IAggregator.sol\";\n\ninterface ILzCommonOFT is IERC165 {\n    struct LzCallParams {\n        address payable refundAddress;\n        address zroPaymentAddress;\n        bytes adapterParams;\n    }\n\n    function estimateSendFee(\n        uint16 _dstChainId,\n        bytes32 _toAddress,\n        uint _amount,\n        bool _useZro,\n        bytes calldata _adapterParams\n    ) external view returns (uint nativeFee, uint zroFee);\n\n    function estimateSendAndCallFee(\n        uint16 _dstChainId,\n        bytes32 _toAddress,\n        uint _amount,\n        bytes calldata _payload,\n        uint64 _dstGasForCall,\n        bool _useZro,\n        bytes calldata _adapterParams\n    ) external view returns (uint nativeFee, uint zroFee);\n\n    function circulatingSupply() external view returns (uint);\n\n    function token() external view returns (address);\n}\n\ninterface ILzUserApplicationConfig {\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external;\n\n    function setSendVersion(uint16 _version) external;\n\n    function setReceiveVersion(uint16 _version) external;\n\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external;\n}\n\ninterface ILzEndpoint is ILzUserApplicationConfig {\n    function defaultSendLibrary() external view returns (address);\n\n    function send(\n        uint16 _dstChainId,\n        bytes calldata _destination,\n        bytes calldata _payload,\n        address payable _refundAddress,\n        address _zroPaymentAddress,\n        bytes calldata _adapterParams\n    ) external payable;\n\n    function receivePayload(\n        uint16 _srcChainId,\n        bytes calldata _srcAddress,\n        address _dstAddress,\n        uint64 _nonce,\n        uint _gasLimit,\n        bytes calldata _payload\n    ) external;\n\n    function getInboundNonce(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (uint64);\n\n    function getOutboundNonce(uint16 _dstChainId, address _srcAddress) external view returns (uint64);\n\n    function estimateFees(\n        uint16 _dstChainId,\n        address _userApplication,\n        bytes calldata _payload,\n        bool _payInZRO,\n        bytes calldata _adapterParam\n    ) external view returns (uint nativeFee, uint zroFee);\n\n    function getChainId() external view returns (uint16);\n\n    function retryPayload(uint16 _srcChainId, bytes calldata _srcAddress, bytes calldata _payload) external;\n\n    function hasStoredPayload(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool);\n\n    function getSendLibraryAddress(address _userApplication) external view returns (address);\n\n    function getReceiveLibraryAddress(address _userApplication) external view returns (address);\n\n    function isSendingPayload() external view returns (bool);\n\n    function isReceivingPayload() external view returns (bool);\n\n    function getConfig(uint16 _version, uint16 _chainId, address _userApplication, uint _configType) external view returns (bytes memory);\n\n    function getSendVersion(address _userApplication) external view returns (uint16);\n\n    function getReceiveVersion(address _userApplication) external view returns (uint16);\n\n    function defaultSendVersion() external view returns (uint16);\n\n    function defaultReceiveVersion() external view returns (uint16);\n\n    function defaultReceiveLibraryAddress() external view returns (address);\n\n    function uaConfigLookup(\n        address _address\n    ) external view returns (uint16 sendVersion, uint16 receiveVersion, address receiveLibraryAddress, address sendLibrary);\n}\n\ninterface ILzBaseOFTV2 {\n    function sharedDecimals() external view returns (uint8);\n\n    function innerToken() external view returns (address);\n\n    function feeHandler() external view returns (ILzFeeHandler);\n}\n\ninterface ILzApp {\n    function lzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) external;\n\n    function minDstGasLookup(uint16 _srcChainId, uint16 _dstChainId) external view returns (uint);\n\n    function setTrustedRemote(uint16 _remoteChainId, bytes calldata _path) external;\n\n    function trustedRemoteLookup(uint16 _srcChainId) external view returns (bytes memory);\n\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external;\n\n    function lzEndpoint() external view returns (ILzEndpoint);\n}\n\ninterface ILzFeeHandler {\n    enum QuoteType {\n        None,\n        Oracle,\n        Fixed\n    }\n\n    function getFee() external view returns (uint256);\n}\n\ninterface ILzOFTV2 is ILzCommonOFT {\n    function sendFrom(\n        address _from,\n        uint16 _dstChainId,\n        bytes32 _toAddress,\n        uint _amount,\n        LzCallParams calldata _callParams\n    ) external payable;\n\n    function sendAndCall(\n        address _from,\n        uint16 _dstChainId,\n        bytes32 _toAddress,\n        uint _amount,\n        bytes calldata _payload,\n        uint64 _dstGasForCall,\n        LzCallParams calldata _callParams\n    ) external payable;\n}\n\ninterface ILzOFTReceiverV2 {\n    function onOFTReceived(\n        uint16 _srcChainId,\n        bytes calldata _srcAddress,\n        uint64 _nonce,\n        bytes32 _from,\n        uint _amount,\n        bytes calldata _payload\n    ) external;\n}\n\ninterface ILzUltraLightNodeV2 {\n    function defaultAppConfig(\n        uint16\n    )\n        external\n        view\n        returns (\n            uint16 inboundProofLibraryVersion,\n            uint64 inboundBlockConfirmations,\n            address relayer,\n            uint16 outboundProofType,\n            uint64 outboundBlockConfirmations,\n            address oracle\n        );\n\n    function appConfig(\n        address,\n        uint16\n    )\n        external\n        view\n        returns (\n            uint16 inboundProofLibraryVersion,\n            uint64 inboundBlockConfirmations,\n            address relayer,\n            uint16 outboundProofType,\n            uint64 outboundBlockConfirmations,\n            address oracle\n        );\n}\n\ninterface ILzReceiver {\n    function lzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) external;\n}\n\ninterface ILzIndirectOFTV2 is ILzBaseOFTV2 {\n    function ld2sdRate() external view returns (uint);\n}\n\ninterface ILzProxyOFTV2 is ILzBaseOFTV2 {\n    function ld2sdRate() external view returns (uint);\n}\n\ninterface IOFTV2View {\n    function lzReceive(uint16 _srcChainId, bytes32 _scrAddress, bytes memory _payload, uint _totalSupply) external view returns (uint);\n\n    function getInboundNonce(uint16 _srcChainId) external view returns (uint64);\n\n    function getCurrentState() external view returns (uint);\n\n    function isProxy() external view returns (bool);\n}\n\ninterface IOFTWrapper {\n    event LogWrapperFeeWithdrawn(address to, uint256 amount);\n    event LogDefaultExchangeRateChanged(uint256 oldExchangeRate, uint256 newExchangeRate);\n    event LogOracleImplementationChange(IAggregator indexed oldOracle, IAggregator indexed newOracle);\n    event LogDefaultQuoteTypeChanged(QUOTE_TYPE oldValue, QUOTE_TYPE newValue);\n    event LogFeeToChange(address indexed oldAddress, address indexed newAddress);\n\n    enum QUOTE_TYPE {\n        ORACLE,\n        FIXED_EXCHANGE_RATE\n    }\n\n    function sendOFTV2(\n        uint16 _dstChainId,\n        bytes32 _toAddress,\n        uint _amount,\n        ILzCommonOFT.LzCallParams calldata _callParams\n    ) external payable;\n\n    function sendProxyOFTV2(\n        uint16 _dstChainId,\n        bytes32 _toAddress,\n        uint _amount,\n        ILzCommonOFT.LzCallParams calldata _callParams\n    ) external payable;\n\n    function estimateSendFeeV2(\n        uint16 _dstChainId,\n        bytes32 _toAddress,\n        uint _amount,\n        bytes calldata _adapterParams\n    ) external view returns (uint nativeFee, uint zroFee);\n}\n\ninterface IPreCrimeView {\n    struct Packet {\n        uint16 srcChainId;\n        bytes32 srcAddress;\n        uint64 nonce;\n        bytes payload;\n    }\n\n    struct SimulationResult {\n        uint chainTotalSupply;\n        bool isProxy;\n    }\n\n    function getConfig(Packet[] calldata _packets) external view returns (bytes memory);\n\n    function precrime(Packet[] calldata _packets, bytes[] calldata _simulation) external view returns (uint16 code, bytes memory reason);\n\n    function version() external view returns (uint16);\n\n    function simulate(Packet[] calldata _packets) external view returns (uint16 code, bytes memory result);\n}\n"
      },
      "src/interfaces/IAggregator.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\ninterface IAggregator {\n    function decimals() external view returns (uint8);\n\n    function latestAnswer() external view returns (int256 answer);\n\n    function latestRoundData()\n        external\n        view\n        returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n\ninterface IAggregatorWithMeta is IAggregator {\n    function description() external view returns (string memory);\n\n    function version() external view returns (uint256);\n}\n"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
      }
    },
    "settings": {
      "remappings": [
        "/=src/",
        "forge-std/=lib/forge-std/src/",
        "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
        "@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
        "@BoringSolidity/=lib/BoringSolidity/contracts/",
        "@solady/=lib/solady/src/",
        "@solmate/=lib/solmate/src/",
        "@excessivelySafeCall/=lib/ExcessivelySafeCall/src/",
        "@safe-contracts/=lib/safe-contracts/contracts/",
        "@fuzzlib/=lib/fuzzlib/src/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 400
      },
      "metadata": {
        "useLiteralContent": false,
        "bytecodeHash": "ipfs",
        "appendCBOR": true
      },
      "outputSelection": {
        "*": {
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "evmVersion": "paris",
      "viaIR": false,
      "libraries": {}
    }
  },
  "compiler": "0.8.26+commit.8a97fa7a"
}