{
  "address": "0x662a3FeB3e0444b9101B0E7623459Ee56F4126D6",
  "abi": [
    {
      "type": "constructor",
      "inputs": [
        {
          "name": "_owner",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "_localChainId",
          "type": "uint16",
          "internalType": "uint16"
        },
        {
          "name": "_oftView",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "_maxSize",
          "type": "uint64",
          "internalType": "uint64"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "CODE_MISS_SIMULATE_RESULT",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint16",
          "internalType": "uint16"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "CODE_PACKETS_OVERSIZE",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint16",
          "internalType": "uint16"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "CODE_PACKETS_UNSORTED",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint16",
          "internalType": "uint16"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "CODE_PRECRIME_FAILURE",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint16",
          "internalType": "uint16"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "CODE_SUCCESS",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint16",
          "internalType": "uint16"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "CONFIG_VERSION",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint16",
          "internalType": "uint16"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "PRECRIME_VERSION",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint16",
          "internalType": "uint16"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getConfig",
      "inputs": [
        {
          "name": "_packets",
          "type": "tuple[]",
          "internalType": "struct IPreCrimeView.Packet[]",
          "components": [
            {
              "name": "srcChainId",
              "type": "uint16",
              "internalType": "uint16"
            },
            {
              "name": "srcAddress",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "nonce",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "payload",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "localChainId",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint16",
          "internalType": "uint16"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "maxBatchSize",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint64",
          "internalType": "uint64"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "oftView",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "contract IOFTV2View"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "owner",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "precrime",
      "inputs": [
        {
          "name": "_packets",
          "type": "tuple[]",
          "internalType": "struct IPreCrimeView.Packet[]",
          "components": [
            {
              "name": "srcChainId",
              "type": "uint16",
              "internalType": "uint16"
            },
            {
              "name": "srcAddress",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "nonce",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "payload",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        },
        {
          "name": "_simulation",
          "type": "bytes[]",
          "internalType": "bytes[]"
        }
      ],
      "outputs": [
        {
          "name": "code",
          "type": "uint16",
          "internalType": "uint16"
        },
        {
          "name": "reason",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "remoteChainIds",
      "inputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "uint16",
          "internalType": "uint16"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "remotePrecrimeAddresses",
      "inputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "setMaxBatchSize",
      "inputs": [
        {
          "name": "_maxSize",
          "type": "uint64",
          "internalType": "uint64"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "setRemotePrecrimeAddresses",
      "inputs": [
        {
          "name": "_remoteChainIds",
          "type": "uint16[]",
          "internalType": "uint16[]"
        },
        {
          "name": "_remotePrecrimeAddresses",
          "type": "bytes32[]",
          "internalType": "bytes32[]"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "simulate",
      "inputs": [
        {
          "name": "_packets",
          "type": "tuple[]",
          "internalType": "struct IPreCrimeView.Packet[]",
          "components": [
            {
              "name": "srcChainId",
              "type": "uint16",
              "internalType": "uint16"
            },
            {
              "name": "srcAddress",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "nonce",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "payload",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        }
      ],
      "outputs": [
        {
          "name": "code",
          "type": "uint16",
          "internalType": "uint16"
        },
        {
          "name": "data",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "transferOwnership",
      "inputs": [
        {
          "name": "newOwner",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "version",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint16",
          "internalType": "uint16"
        }
      ],
      "stateMutability": "pure"
    },
    {
      "type": "event",
      "name": "OwnershipTransferred",
      "inputs": [
        {
          "name": "user",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "newOwner",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "error",
      "name": "ErrInvalidSize",
      "inputs": []
    }
  ],
  "bytecode": "0x60a060405234801561001057600080fd5b5060405161197f38038061197f83398101604081905261002f916100e8565b600080546001600160a01b0319166001600160a01b03861690811782556040518692907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506000805461ffff909416600160a01b0261ffff60a01b19909416939093179092556001600160a01b0316608052600380546001600160401b039092166001600160401b031990921691909117905550610154565b80516001600160a01b03811681146100e357600080fd5b919050565b600080600080608085870312156100fe57600080fd5b610107856100cc565b9350602085015161ffff8116811461011e57600080fd5b925061012c604086016100cc565b60608601519092506001600160401b038116811461014957600080fd5b939692955090935050565b6080516117f461018b6000396000818161013601528181610ca801528181610d8a01528181610e250152610eff01526117f46000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c80638da5cb5b116100ad578063c6be4b9b11610071578063c6be4b9b1461027f578063ec67df3014610287578063f0099e2a146102a8578063f2fde38b146102bb578063f95d1404146102ce57600080fd5b80638da5cb5b146102115780639590dc9d146102245780639eb51f5b14610244578063afea44ef14610257578063bb9683681461026c57600080fd5b806334e30097116100f457806334e30097146101cb578063472641c1146101cb5780634e0ab1ab146101d357806354fd4d50146101f45780635b056da5146101fc57600080fd5b8063028c382f146101315780630638fb64146101755780630e735a631461019057806317c9efb0146101985780632913daa0146101a0575b600080fd5b6101587f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b61017d600281565b60405161ffff909116815260200161016c565b61017d600381565b61017d600081565b6003546101b3906001600160401b031681565b6040516001600160401b03909116815260200161016c565b61017d600181565b6101e66101e136600461106b565b6102d7565b60405190815260200161016c565b61271161017d565b60005461017d90600160a01b900461ffff1681565b600054610158906001600160a01b031681565b6102376102323660046110c8565b6102f8565b60405161016c919061114f565b61017d61025236600461106b565b610351565b61026a610265366004611181565b610389565b005b61026a61027a36600461128b565b6103fa565b61017d600481565b61029a610295366004611352565b610491565b60405161016c9291906113c1565b61029a6102b63660046110c8565b6105fa565b61026a6102c93660046113e6565b610667565b61017d61271181565b600281815481106102e757600080fd5b600091825260209091200154905081565b60606000806103078585610708565b91509150600161031f6003546001600160401b031690565b8351848460405160200161033795949392919061140f565b604051602081830303815290604052925050505b92915050565b6001818154811061036157600080fd5b9060005260206000209060109182820401919006600202915054906101000a900461ffff1681565b6000546001600160a01b031633146103d75760405162461bcd60e51b815260206004820152600c60248201526b15539055551213d49256915160a21b60448201526064015b60405180910390fd5b6003805467ffffffffffffffff19166001600160401b0392909216919091179055565b6000546001600160a01b031633146104435760405162461bcd60e51b815260206004820152600c60248201526b15539055551213d49256915160a21b60448201526064016103ce565b8051825114610465576040516328374b8160e11b815260040160405180910390fd5b8151610478906001906020850190610f72565b50805161048c90600290602084019061101b565b505050565b6000606081836001600160401b038111156104ae576104ae61119e565b6040519080825280602002602001820160405280156104e157816020015b60608152602001906001900390816104cc5790505b5090506000846001600160401b038111156104fe576104fe61119e565b604051908082528060200260200182016040528015610527578160200160208202803683370190505b50905060005b858110156105be5760008088888481811061054a5761054a6114a3565b905060200281019061055c91906114b9565b810190610569919061156e565b9150915081848481518110610580576105806114a3565b602002602001019061ffff16908161ffff1681525050808584815181106105a9576105a96114a3565b6020908102919091010152505060010161052d565b506105ca8888836107e6565b909450925061ffff8416156105e05750506105f1565b6105e982610978565b909450925050505b94509492505050565b600060606106088484610a9b565b909250905061ffff8216610660576106208484610ca0565b909250905061ffff82166106605760005460405161064e91600160a01b900461ffff169083906020016113c1565b60405160208183030381529060405290505b9250929050565b6000546001600160a01b031633146106b05760405162461bcd60e51b815260206004820152600c60248201526b15539055551213d49256915160a21b60448201526064016103ce565b6000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081178255604051909133917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a350565b606080600160028180548060200260200160405190810160405280929190818152602001828054801561078257602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff16815260200190600201906020826001010492830192600103820291508084116107495790505b50505050509150808054806020026020016040519081016040528092919081815260200182805480156107d457602002820191906000526020600020905b8154815260200190600101908083116107c0575b50505050509050915091509250929050565b6000606083156108c05760006107fc8686610708565b50905060005b81518110156108bd576000805b865181101561086a5783838151811061082a5761082a6114a3565b602002602001015161ffff16878281518110610848576108486114a3565b602002602001015161ffff1603610862576001915061086a565b60010161080f565b50806108b45760046040518060400160405280602081526020017f6d697373696e672072656d6f74652073696d756c6174696f6e20726573756c7481525094509450505050610970565b50600101610802565b50505b6000805b845181101561091657600060149054906101000a900461ffff1661ffff168582815181106108f4576108f46114a3565b602002602001015161ffff160361090e5760019150610916565b6001016108c4565b508061095b57505060408051808201909152601f81527f6d697373696e67206c6f63616c2073696d756c6174696f6e20726573756c7400602082015260049150610970565b50506040805160208101909152600080825291505b935093915050565b6000606060008060005b8551811015610a3257600086828151811061099f5761099f6114a3565b60200260200101518060200190518101906109ba91906115c1565b9050806020015115610a1a578315610a115760016040518060400160405280601e81526020017f6d6f7265207468616e206f6e652070726f78792073696d756c6174696f6e00008152509550955050505050915091565b80519350610a29565b8051610a26908461162c565b92505b50600101610982565b5081811115610a7e5760016040518060400160405280601b81526020017f746f74616c206d696e746564203e20746f74616c206c6f636b65640000000000815250935093505050915091565b600060405180602001604052806000815250935093505050915091565b600060606000610ab36003546001600160401b031690565b90506001600160401b038116841115610b0e576040517f7061636b6574732073697a6520657863656564206c696d6974656400000000006020820152600290603b016040516020818303038152906040529250925050610660565b8315610c855760008080805b87811015610c80576000898983818110610b3657610b366114a3565b9050602002810190610b48919061163f565b610b519061165f565b90508461ffff16816000015161ffff16141580610b72575083816020015114155b15610c0f57805160208201516040830151919650945092506000610b9582610ee0565b610ba09060016116ef565b9050806001600160401b0316846001600160401b031614610c09576040517f736b697070656420696e626f756e644e6f6e636520666f7262696464656e00006020820152600390603e016040516020818303038152906040529850985050505050505050610660565b50610c77565b610c188361170e565b9250826001600160401b031681604001516001600160401b031614610c77576040516f756e736f72746564207061636b65747360801b602082015260039060300160405160208183030381529060405297509750505050505050610660565b50600101610b1a565b505050505b50506040805160208101909152600080825291509250929050565b6000606060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663378aa7016040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d289190611739565b905060005b84811015610e0f576000868683818110610d4957610d496114a3565b9050602002810190610d5b919061163f565b610d649061165f565b805160208201516060830151604051633125193360e11b81529394506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169363624a326693610dc393909290918990600401611752565b602060405180830381865afa158015610de0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e049190611739565b925050600101610d2d565b50600060405180604001604052808381526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166364da4e6f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea59190611786565b151590526040805182516020808301919091529092015115159082015260600160405160208183030381529060405292509250509250929050565b80516040516358b46b3160e01b815261ffff90911660048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906358b46b3190602401602060405180830381865afa158015610f4e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034b91906117a1565b82805482825590600052602060002090600f0160109004810192821561100b5791602002820160005b83821115610fdb57835183826101000a81548161ffff021916908361ffff1602179055509260200192600201602081600101049283019260010302610f9b565b80156110095782816101000a81549061ffff0219169055600201602081600101049283019260010302610fdb565b505b50611017929150611056565b5090565b82805482825590600052602060002090810192821561100b579160200282015b8281111561100b57825182559160200191906001019061103b565b5b808211156110175760008155600101611057565b60006020828403121561107d57600080fd5b5035919050565b60008083601f84011261109657600080fd5b5081356001600160401b038111156110ad57600080fd5b6020830191508360208260051b850101111561066057600080fd5b600080602083850312156110db57600080fd5b82356001600160401b038111156110f157600080fd5b6110fd85828601611084565b90969095509350505050565b6000815180845260005b8181101561112f57602081850181015186830182015201611113565b506000602082860101526020601f19601f83011685010191505092915050565b6020815260006111626020830184611109565b9392505050565b6001600160401b038116811461117e57600080fd5b50565b60006020828403121561119357600080fd5b813561116281611169565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156111dc576111dc61119e565b604052919050565b60006001600160401b038211156111fd576111fd61119e565b5060051b60200190565b803561ffff8116811461121957600080fd5b919050565b600082601f83011261122f57600080fd5b813561124261123d826111e4565b6111b4565b8082825260208201915060208360051b86010192508583111561126457600080fd5b602085015b83811015611281578035835260209283019201611269565b5095945050505050565b6000806040838503121561129e57600080fd5b82356001600160401b038111156112b457600080fd5b8301601f810185136112c557600080fd5b80356112d361123d826111e4565b8082825260208201915060208360051b8501019250878311156112f557600080fd5b6020840193505b8284101561131e5761130d84611207565b8252602093840193909101906112fc565b945050505060208301356001600160401b0381111561133c57600080fd5b6113488582860161121e565b9150509250929050565b6000806000806040858703121561136857600080fd5b84356001600160401b0381111561137e57600080fd5b61138a87828801611084565b90955093505060208501356001600160401b038111156113a957600080fd5b6113b587828801611084565b95989497509550505050565b61ffff831681526040602082015260006113de6040830184611109565b949350505050565b6000602082840312156113f857600080fd5b81356001600160a01b038116811461116257600080fd5b61ffff60f01b8660f01b1681526001600160401b0360c01b8560c01b16600282015283600a8201526000602a820184516020860160005b8281101561146857815161ffff16845260209384019390910190600101611446565b505084516020860192915060005b81811015611494578351835260209384019390920191600101611476565b50909998505050505050505050565b634e487b7160e01b600052603260045260246000fd5b6000808335601e198436030181126114d057600080fd5b8301803591506001600160401b038211156114ea57600080fd5b60200191503681900382131561066057600080fd5b600082601f83011261151057600080fd5b81356001600160401b038111156115295761152961119e565b61153c601f8201601f19166020016111b4565b81815284602083860101111561155157600080fd5b816020850160208301376000918101602001919091529392505050565b6000806040838503121561158157600080fd5b61158a83611207565b915060208301356001600160401b038111156115a557600080fd5b611348858286016114ff565b8051801515811461121957600080fd5b600060408284031280156115d457600080fd5b50604080519081016001600160401b03811182821017156115f7576115f761119e565b6040528251815261160a602084016115b1565b60208201529392505050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561034b5761034b611616565b60008235607e1983360301811261165557600080fd5b9190910192915050565b60006080823603121561167157600080fd5b604051608081016001600160401b03811182821017156116935761169361119e565b60405261169f83611207565b81526020838101359082015260408301356116b981611169565b604082015260608301356001600160401b038111156116d757600080fd5b6116e3368286016114ff565b60608301525092915050565b6001600160401b03818116838216019081111561034b5761034b611616565b60006001600160401b0382166001600160401b03810361173057611730611616565b60010192915050565b60006020828403121561174b57600080fd5b5051919050565b61ffff851681528360208201526080604082015260006117756080830185611109565b905082606083015295945050505050565b60006020828403121561179857600080fd5b611162826115b1565b6000602082840312156117b357600080fd5b81516111628161116956fea2646970667358221220a9f09789d72694e16871a1aacbb35b27a41bc629792a0c95758a652897eb0dcd64736f6c634300081a0033000000000000000000000000fb3485c2e209a5cfbdc1447674256578f1a80ee30000000000000000000000000000000000000000000000000000000000000070000000000000000000000000acda3be0ac20db02efe3a1061ffe375050830cb60000000000000000000000000000000000000000000000000000000000000064",
  "args_data": "0x000000000000000000000000fb3485c2e209a5cfbdc1447674256578f1a80ee30000000000000000000000000000000000000000000000000000000000000070000000000000000000000000acda3be0ac20db02efe3a1061ffe375050830cb60000000000000000000000000000000000000000000000000000000000000064",
  "tx_hash": "",
  "args": null,
  "data": "",
  "artifact_path": "PreCrimeView.sol",
  "artifact_full_path": "PreCrimeView.sol:PreCrimeView",
  "standardJsonInput": {
    "language": "Solidity",
    "sources": {
      "dependencies/abracadabra-oftv2-0.0.1/src/precrime/PreCrimeView.sol": {
        "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport {Owned} from \"@solmate/auth/Owned.sol\";\nimport {IOFTV2View, IPreCrimeView} from \"../interfaces/ILayerZero.sol\";\n\ncontract PreCrimeView is IPreCrimeView, Owned {\n    error ErrInvalidSize();\n\n    uint16 public constant CONFIG_VERSION = 1;\n\n    //---------------- error code ----------------------\n    // --- UA scope code ---\n    uint16 public constant CODE_SUCCESS = 0; // success\n    uint16 public constant CODE_PRECRIME_FAILURE = 1; // !!! crimes found\n\n    // --- protocol scope error code ---\n    // simualte\n    uint16 public constant CODE_PACKETS_OVERSIZE = 2; // packets number bigger then max size\n    uint16 public constant CODE_PACKETS_UNSORTED = 3; // packets are unsorted, need backfill and keep order\n    // precrime\n    uint16 public constant CODE_MISS_SIMULATE_RESULT = 4; // miss simulation result\n\n    /**\n     * @dev 10000 - 20000 is for view mode, 20000 - 30000 is for precrime inherit mode\n     */\n    uint16 public constant PRECRIME_VERSION = 10001;\n\n    /// @notice a view for OFTV2 or ProxyOFTV2\n    IOFTV2View public immutable oftView;\n\n    uint16 public localChainId;\n    uint16[] public remoteChainIds;\n    bytes32[] public remotePrecrimeAddresses;\n    uint64 public maxBatchSize;\n\n    constructor(address _owner, uint16 _localChainId, address _oftView, uint64 _maxSize) Owned(_owner) {\n        localChainId = _localChainId;\n        oftView = IOFTV2View(_oftView);\n        maxBatchSize = _maxSize;\n    }\n\n    function setRemotePrecrimeAddresses(uint16[] memory _remoteChainIds, bytes32[] memory _remotePrecrimeAddresses) public onlyOwner {\n        if (_remoteChainIds.length != _remotePrecrimeAddresses.length) {\n            revert ErrInvalidSize();\n        }\n\n        remoteChainIds = _remoteChainIds;\n        remotePrecrimeAddresses = _remotePrecrimeAddresses;\n    }\n\n    function setMaxBatchSize(uint64 _maxSize) public onlyOwner {\n        maxBatchSize = _maxSize;\n    }\n\n    /**\n     * @dev get precrime config,\n     * @param _packets packets\n     * @return configation bytes\n     */\n    function getConfig(Packet[] calldata _packets) external view virtual override returns (bytes memory) {\n        (uint16[] memory remoteChains, bytes32[] memory remoteAddresses) = _remotePrecrimeAddress(_packets);\n        return\n            abi.encodePacked(\n                CONFIG_VERSION,\n                //---- max packets size for simulate batch ---\n                _maxBatchSize(),\n                //------------- remote precrimes -------------\n                remoteChains.length,\n                remoteChains,\n                remoteAddresses\n            );\n    }\n\n    /**\n     * @dev\n     * @param _simulation all simulation results from difference chains\n     * @return code     precrime result code; check out the error code definition\n     * @return reason   error reason\n     */\n    function precrime(\n        Packet[] calldata _packets,\n        bytes[] calldata _simulation\n    ) external view override returns (uint16 code, bytes memory reason) {\n        bytes[] memory originSimulateResult = new bytes[](_simulation.length);\n        uint16[] memory chainIds = new uint16[](_simulation.length);\n        for (uint256 i = 0; i < _simulation.length; i++) {\n            (uint16 chainId, bytes memory simulateResult) = abi.decode(_simulation[i], (uint16, bytes));\n            chainIds[i] = chainId;\n            originSimulateResult[i] = simulateResult;\n        }\n\n        (code, reason) = _checkResultsCompleteness(_packets, chainIds);\n        if (code != CODE_SUCCESS) {\n            return (code, reason);\n        }\n\n        (code, reason) = _precrime(originSimulateResult);\n    }\n\n    /**\n     * @dev simulate run cross chain packets and get a simulation result for precrime later\n     * @param _packets packets, the packets item should group by srcChainId, srcAddress, then sort by nonce\n     * @return code   simulation result code; see the error code defination\n     * @return data the result is use for precrime params\n     */\n    function simulate(Packet[] calldata _packets) external view override returns (uint16 code, bytes memory data) {\n        // params check\n        (code, data) = _checkPacketsMaxSizeAndNonceOrder(_packets);\n        if (code != CODE_SUCCESS) {\n            return (code, data);\n        }\n\n        (code, data) = _simulate(_packets);\n        if (code == CODE_SUCCESS) {\n            data = abi.encode(localChainId, data); // add localChainId to the header\n        }\n    }\n\n    function version() external pure override returns (uint16) {\n        return PRECRIME_VERSION;\n    }\n\n    function _checkPacketsMaxSizeAndNonceOrder(Packet[] calldata _packets) internal view returns (uint16 code, bytes memory reason) {\n        uint64 maxSize = _maxBatchSize();\n        if (_packets.length > maxSize) {\n            return (CODE_PACKETS_OVERSIZE, abi.encodePacked(\"packets size exceed limited\"));\n        }\n\n        // check packets nonce, sequence order\n        // packets should group by srcChainId and srcAddress, then sort by nonce ascending\n        if (_packets.length > 0) {\n            uint16 srcChainId;\n            bytes32 srcAddress;\n            uint64 nonce;\n            for (uint256 i = 0; i < _packets.length; i++) {\n                Packet memory packet = _packets[i];\n                // start from a new chain packet or a new source UA\n                if (packet.srcChainId != srcChainId || packet.srcAddress != srcAddress) {\n                    srcChainId = packet.srcChainId;\n                    srcAddress = packet.srcAddress;\n                    nonce = packet.nonce;\n                    uint64 nextInboundNonce = _getInboundNonce(packet) + 1;\n                    // the first packet's nonce must equal to dst InboundNonce+1\n                    if (nonce != nextInboundNonce) {\n                        return (CODE_PACKETS_UNSORTED, abi.encodePacked(\"skipped inboundNonce forbidden\"));\n                    }\n                } else {\n                    // the following packet's nonce add 1 in order\n                    if (packet.nonce != ++nonce) {\n                        return (CODE_PACKETS_UNSORTED, abi.encodePacked(\"unsorted packets\"));\n                    }\n                }\n            }\n        }\n        return (CODE_SUCCESS, \"\");\n    }\n\n    function _checkResultsCompleteness(\n        Packet[] calldata _packets,\n        uint16[] memory _resultChainIds\n    ) internal view returns (uint16 code, bytes memory reason) {\n        // check if all remote result included\n        if (_packets.length > 0) {\n            (uint16[] memory remoteChains, ) = _remotePrecrimeAddress(_packets);\n            for (uint256 i = 0; i < remoteChains.length; i++) {\n                bool resultChainIdChecked;\n                for (uint256 j = 0; j < _resultChainIds.length; j++) {\n                    if (_resultChainIds[j] == remoteChains[i]) {\n                        resultChainIdChecked = true;\n                        break;\n                    }\n                }\n                if (!resultChainIdChecked) {\n                    return (CODE_MISS_SIMULATE_RESULT, \"missing remote simulation result\");\n                }\n            }\n        }\n        // check if local result included\n        bool localChainIdResultChecked;\n        for (uint256 j = 0; j < _resultChainIds.length; j++) {\n            if (_resultChainIds[j] == localChainId) {\n                localChainIdResultChecked = true;\n                break;\n            }\n        }\n        if (!localChainIdResultChecked) {\n            return (CODE_MISS_SIMULATE_RESULT, \"missing local simulation result\");\n        }\n\n        return (CODE_SUCCESS, \"\");\n    }\n\n    /**\n     * @dev UA execute the logic by _packets, and return simulation result for precrime. would revert state after returned result.\n     * @param _packets packets\n     * @return code\n     * @return result\n     */\n    function _simulate(Packet[] calldata _packets) internal view returns (uint16, bytes memory) {\n        uint totalSupply = oftView.getCurrentState();\n\n        for (uint i = 0; i < _packets.length; i++) {\n            Packet memory packet = _packets[i];\n            totalSupply = oftView.lzReceive(packet.srcChainId, packet.srcAddress, packet.payload, totalSupply);\n        }\n\n        return (CODE_SUCCESS, abi.encode(SimulationResult({chainTotalSupply: totalSupply, isProxy: oftView.isProxy()})));\n    }\n\n    /**\n     * @dev\n     * @param _simulation all simulation results from difference chains\n     * @return code     precrime result code; check out the error code defination\n     * @return reason   error reason\n     */\n    function _precrime(bytes[] memory _simulation) internal pure returns (uint16 code, bytes memory reason) {\n        uint totalLocked = 0;\n        uint totalMinted = 0;\n\n        for (uint i = 0; i < _simulation.length; i++) {\n            SimulationResult memory result = abi.decode(_simulation[i], (SimulationResult));\n            if (result.isProxy) {\n                if (totalLocked > 0) {\n                    return (CODE_PRECRIME_FAILURE, \"more than one proxy simulation\");\n                }\n                totalLocked = result.chainTotalSupply;\n            } else {\n                totalMinted += result.chainTotalSupply;\n            }\n        }\n\n        if (totalMinted > totalLocked) {\n            return (CODE_PRECRIME_FAILURE, \"total minted > total locked\");\n        }\n\n        return (CODE_SUCCESS, \"\");\n    }\n\n    /**\n     * @dev Always returns all remote chain ids and precrime addresses\n     */\n    function _remotePrecrimeAddress(\n        Packet[] calldata\n    ) internal view returns (uint16[] memory chainIds, bytes32[] memory precrimeAddresses) {\n        return (remoteChainIds, remotePrecrimeAddresses);\n    }\n\n    /**\n     * @dev max batch size for simulate\n     */\n    function _maxBatchSize() internal view virtual returns (uint64) {\n        return maxBatchSize;\n    }\n\n    /**\n     * get srcChain & srcAddress InboundNonce by packet\n     */\n    function _getInboundNonce(Packet memory _packet) internal view returns (uint64) {\n        return oftView.getInboundNonce(_packet.srcChainId);\n    }\n}\n"
      },
      "dependencies/solmate-6.2.0/src/auth/Owned.sol": {
        "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\n/// @notice Simple single owner authorization mixin.\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/auth/Owned.sol)\nabstract contract Owned {\n    /*//////////////////////////////////////////////////////////////\n                                 EVENTS\n    //////////////////////////////////////////////////////////////*/\n\n    event OwnershipTransferred(address indexed user, address indexed newOwner);\n\n    /*//////////////////////////////////////////////////////////////\n                            OWNERSHIP STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    address public owner;\n\n    modifier onlyOwner() virtual {\n        require(msg.sender == owner, \"UNAUTHORIZED\");\n\n        _;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                               CONSTRUCTOR\n    //////////////////////////////////////////////////////////////*/\n\n    constructor(address _owner) {\n        owner = _owner;\n\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                             OWNERSHIP LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        owner = newOwner;\n\n        emit OwnershipTransferred(msg.sender, newOwner);\n    }\n}\n"
      },
      "dependencies/abracadabra-oftv2-0.0.1/src/interfaces/ILayerZero.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\ninterface ILzFeeHandler {\n    enum QuoteType {\n        None,\n        Oracle,\n        Fixed\n    }\n\n    function getFee() external view returns (uint256);\n}\n\ninterface ILzCommonOFT is IERC165 {\n    struct LzCallParams {\n        address payable refundAddress;\n        address zroPaymentAddress;\n        bytes adapterParams;\n    }\n\n    function estimateSendFee(\n        uint16 _dstChainId,\n        bytes32 _toAddress,\n        uint _amount,\n        bool _useZro,\n        bytes calldata _adapterParams\n    ) external view returns (uint nativeFee, uint zroFee);\n\n    function estimateSendAndCallFee(\n        uint16 _dstChainId,\n        bytes32 _toAddress,\n        uint _amount,\n        bytes calldata _payload,\n        uint64 _dstGasForCall,\n        bool _useZro,\n        bytes calldata _adapterParams\n    ) external view returns (uint nativeFee, uint zroFee);\n\n    function circulatingSupply() external view returns (uint);\n\n    function token() external view returns (address);\n}\n\ninterface ILzUserApplicationConfig {\n    function setConfig(\n        uint16 _version,\n        uint16 _chainId,\n        uint _configType,\n        bytes calldata _config\n    ) external;\n\n    function setSendVersion(uint16 _version) external;\n\n    function setReceiveVersion(uint16 _version) external;\n\n    function forceResumeReceive(\n        uint16 _srcChainId,\n        bytes calldata _srcAddress\n    ) external;\n}\n\ninterface ILzEndpoint is ILzUserApplicationConfig {\n    function defaultSendLibrary() external view returns (address);\n\n    function send(\n        uint16 _dstChainId,\n        bytes calldata _destination,\n        bytes calldata _payload,\n        address payable _refundAddress,\n        address _zroPaymentAddress,\n        bytes calldata _adapterParams\n    ) external payable;\n\n    function receivePayload(\n        uint16 _srcChainId,\n        bytes calldata _srcAddress,\n        address _dstAddress,\n        uint64 _nonce,\n        uint _gasLimit,\n        bytes calldata _payload\n    ) external;\n\n    function getInboundNonce(\n        uint16 _srcChainId,\n        bytes calldata _srcAddress\n    ) external view returns (uint64);\n\n    function getOutboundNonce(\n        uint16 _dstChainId,\n        address _srcAddress\n    ) external view returns (uint64);\n\n    function estimateFees(\n        uint16 _dstChainId,\n        address _userApplication,\n        bytes calldata _payload,\n        bool _payInZRO,\n        bytes calldata _adapterParam\n    ) external view returns (uint nativeFee, uint zroFee);\n\n    function getChainId() external view returns (uint16);\n\n    function retryPayload(\n        uint16 _srcChainId,\n        bytes calldata _srcAddress,\n        bytes calldata _payload\n    ) external;\n\n    function hasStoredPayload(\n        uint16 _srcChainId,\n        bytes calldata _srcAddress\n    ) external view returns (bool);\n\n    function getSendLibraryAddress(\n        address _userApplication\n    ) external view returns (address);\n\n    function getReceiveLibraryAddress(\n        address _userApplication\n    ) external view returns (address);\n\n    function isSendingPayload() external view returns (bool);\n\n    function isReceivingPayload() external view returns (bool);\n\n    function getConfig(\n        uint16 _version,\n        uint16 _chainId,\n        address _userApplication,\n        uint _configType\n    ) external view returns (bytes memory);\n\n    function getSendVersion(\n        address _userApplication\n    ) external view returns (uint16);\n\n    function getReceiveVersion(\n        address _userApplication\n    ) external view returns (uint16);\n\n    function defaultSendVersion() external view returns (uint16);\n\n    function defaultReceiveVersion() external view returns (uint16);\n\n    function defaultReceiveLibraryAddress() external view returns (address);\n\n    function uaConfigLookup(\n        address _address\n    )\n        external\n        view\n        returns (\n            uint16 sendVersion,\n            uint16 receiveVersion,\n            address receiveLibraryAddress,\n            address sendLibrary\n        );\n}\n\ninterface ILzBaseOFTV2 {\n    function sharedDecimals() external view returns (uint8);\n\n    function innerToken() external view returns (address);\n\n    function feeHandler() external view returns (ILzFeeHandler);\n}\n\ninterface ILzApp {\n    function lzReceive(\n        uint16 _srcChainId,\n        bytes calldata _srcAddress,\n        uint64 _nonce,\n        bytes calldata _payload\n    ) external;\n\n    function minDstGasLookup(\n        uint16 _srcChainId,\n        uint16 _dstChainId\n    ) external view returns (uint);\n\n    function setTrustedRemote(\n        uint16 _remoteChainId,\n        bytes calldata _path\n    ) external;\n\n    function trustedRemoteLookup(\n        uint16 _srcChainId\n    ) external view returns (bytes memory);\n\n    function setConfig(\n        uint16 _version,\n        uint16 _chainId,\n        uint _configType,\n        bytes calldata _config\n    ) external;\n\n    function lzEndpoint() external view returns (ILzEndpoint);\n}\n\ninterface ILzOFTV2 is ILzCommonOFT {\n    function sendFrom(\n        address _from,\n        uint16 _dstChainId,\n        bytes32 _toAddress,\n        uint _amount,\n        LzCallParams calldata _callParams\n    ) external payable;\n\n    function sendAndCall(\n        address _from,\n        uint16 _dstChainId,\n        bytes32 _toAddress,\n        uint _amount,\n        bytes calldata _payload,\n        uint64 _dstGasForCall,\n        LzCallParams calldata _callParams\n    ) external payable;\n}\n\ninterface ILzOFTReceiverV2 {\n    function onOFTReceived(\n        uint16 _srcChainId,\n        bytes calldata _srcAddress,\n        uint64 _nonce,\n        bytes32 _from,\n        uint _amount,\n        bytes calldata _payload\n    ) external;\n}\n\ninterface ILzUltraLightNodeV2 {\n    function defaultAppConfig(\n        uint16\n    )\n        external\n        view\n        returns (\n            uint16 inboundProofLibraryVersion,\n            uint64 inboundBlockConfirmations,\n            address relayer,\n            uint16 outboundProofType,\n            uint64 outboundBlockConfirmations,\n            address oracle\n        );\n\n    function appConfig(\n        address,\n        uint16\n    )\n        external\n        view\n        returns (\n            uint16 inboundProofLibraryVersion,\n            uint64 inboundBlockConfirmations,\n            address relayer,\n            uint16 outboundProofType,\n            uint64 outboundBlockConfirmations,\n            address oracle\n        );\n}\n\ninterface ILzReceiver {\n    function lzReceive(\n        uint16 _srcChainId,\n        bytes calldata _srcAddress,\n        uint64 _nonce,\n        bytes calldata _payload\n    ) external;\n}\n\ninterface ILzIndirectOFTV2 is ILzBaseOFTV2 {\n    function ld2sdRate() external view returns (uint);\n}\n\ninterface ILzProxyOFTV2 is ILzBaseOFTV2 {\n    function ld2sdRate() external view returns (uint);\n}\n\ninterface IOFTV2View {\n    function lzReceive(\n        uint16 _srcChainId,\n        bytes32 _scrAddress,\n        bytes memory _payload,\n        uint _totalSupply\n    ) external view returns (uint);\n\n    function getInboundNonce(uint16 _srcChainId) external view returns (uint64);\n\n    function getCurrentState() external view returns (uint);\n\n    function isProxy() external view returns (bool);\n}\n\ninterface IPreCrimeView {\n    struct Packet {\n        uint16 srcChainId;\n        bytes32 srcAddress;\n        uint64 nonce;\n        bytes payload;\n    }\n\n    struct SimulationResult {\n        uint chainTotalSupply;\n        bool isProxy;\n    }\n\n    function getConfig(\n        Packet[] calldata _packets\n    ) external view returns (bytes memory);\n\n    function precrime(\n        Packet[] calldata _packets,\n        bytes[] calldata _simulation\n    ) external view returns (uint16 code, bytes memory reason);\n\n    function version() external view returns (uint16);\n\n    function simulate(\n        Packet[] calldata _packets\n    ) external view returns (uint16 code, bytes memory result);\n}\n"
      },
      "dependencies/openzeppelin-contracts-5.0.2/contracts/utils/introspection/IERC165.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
      }
    },
    "settings": {
      "remappings": [
        "/=src/",
        "forge-std/=dependencies/forge-std-1.9.2/src/",
        "halmos-cheatcodes/=dependencies/halmos-cheatcodes-3ca0e11/src/",
        "@openzeppelin/contracts/=dependencies/openzeppelin-contracts-5.0.2/contracts/",
        "@openzeppelin/contracts-upgradeable/=dependencies/openzeppelin-contracts-upgradeable-5.0.2/contracts/",
        "@BoringSolidity/=dependencies/BoringSolidity-1.0.0/contracts/",
        "@solady/=dependencies/solady-0.0.231/src/",
        "@solmate/=dependencies/solmate-6.2.0/src/",
        "@excessivelySafeCall/=dependencies/ExcessivelySafeCall-0.0.1/src/",
        "@safe-contracts/=dependencies/safe-contracts-1.3.0/contracts/",
        "@fuzzlib/=dependencies/fuzzlib-0.0.1/src/",
        "@abracadabra-oftv2/=dependencies/abracadabra-oftv2-0.0.1/src/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 400
      },
      "metadata": {
        "useLiteralContent": false,
        "bytecodeHash": "ipfs",
        "appendCBOR": true
      },
      "outputSelection": {
        "*": {
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "evmVersion": "paris",
      "viaIR": false,
      "libraries": {}
    }
  },
  "compiler": "0.8.26+commit.8a97fa7a"
}