{
  "address": "0xefCDC6FB4973aC30325Fb2B39e1a2F384E254b7A",
  "abi": [
    {
      "type": "constructor",
      "inputs": [
        {
          "name": "owner_",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "add",
      "inputs": [
        {
          "name": "items_",
          "type": "tuple[]",
          "internalType": "struct CauldronInfo[]",
          "components": [
            {
              "name": "cauldron",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "version",
              "type": "uint8",
              "internalType": "uint8"
            },
            {
              "name": "deprecated",
              "type": "bool",
              "internalType": "bool"
            }
          ]
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "cauldrons",
      "inputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "cauldron",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "version",
          "type": "uint8",
          "internalType": "uint8"
        },
        {
          "name": "deprecated",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "get",
      "inputs": [
        {
          "name": "index_",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "tuple",
          "internalType": "struct CauldronInfo",
          "components": [
            {
              "name": "cauldron",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "version",
              "type": "uint8",
              "internalType": "uint8"
            },
            {
              "name": "deprecated",
              "type": "bool",
              "internalType": "bool"
            }
          ]
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "get",
      "inputs": [
        {
          "name": "cauldron_",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "tuple",
          "internalType": "struct CauldronInfo",
          "components": [
            {
              "name": "cauldron",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "version",
              "type": "uint8",
              "internalType": "uint8"
            },
            {
              "name": "deprecated",
              "type": "bool",
              "internalType": "bool"
            }
          ]
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "isDeprecated",
      "inputs": [
        {
          "name": "cauldron_",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "length",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "operators",
      "inputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "owner",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "registered",
      "inputs": [
        {
          "name": "cauldron_",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "remove",
      "inputs": [
        {
          "name": "cauldrons_",
          "type": "address[]",
          "internalType": "address[]"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "setDeprecated",
      "inputs": [
        {
          "name": "cauldron_",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "deprecated_",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "setOperator",
      "inputs": [
        {
          "name": "operator",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "enable",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "transferOwnership",
      "inputs": [
        {
          "name": "newOwner",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "event",
      "name": "LogCauldronDeprecated",
      "inputs": [
        {
          "name": "cauldron",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "deprecated",
          "type": "bool",
          "indexed": false,
          "internalType": "bool"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "LogCauldronRegistered",
      "inputs": [
        {
          "name": "cauldron",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "version",
          "type": "uint8",
          "indexed": false,
          "internalType": "uint8"
        },
        {
          "name": "deprecated",
          "type": "bool",
          "indexed": false,
          "internalType": "bool"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "LogCauldronRemoved",
      "inputs": [
        {
          "name": "cauldron",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "OperatorChanged",
      "inputs": [
        {
          "name": "",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "",
          "type": "bool",
          "indexed": false,
          "internalType": "bool"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "OwnershipTransferred",
      "inputs": [
        {
          "name": "user",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "newOwner",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "error",
      "name": "ErrAlreadyRegistered",
      "inputs": [
        {
          "name": "cauldron_",
          "type": "address",
          "internalType": "address"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrEmptyRegistry",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrInvalidCauldron",
      "inputs": [
        {
          "name": "cauldron_",
          "type": "address",
          "internalType": "address"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrNotRegistered",
      "inputs": [
        {
          "name": "cauldron_",
          "type": "address",
          "internalType": "address"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrTooManyCauldrons",
      "inputs": []
    },
    {
      "type": "error",
      "name": "Unauthorized",
      "inputs": []
    }
  ],
  "bytecode": "0x6080604052348015600e575f80fd5b50604051610ec8380380610ec8833981016040819052602b916081565b6032816037565b5060ac565b5f80546001600160a01b0319166001600160a01b03831690811782556040519091907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350565b5f602082840312156090575f80fd5b81516001600160a01b038116811460a5575f80fd5b9392505050565b610e0f806100b95f395ff3fe608060405234801561000f575f80fd5b50600436106100da575f3560e01c80638da5cb5b11610088578063b2dd5c0711610063578063b2dd5c071461021d578063c2bc2efc14610230578063eada3cae14610243578063f2fde38b14610256575f80fd5b80638da5cb5b1461019d57806394543c15146101c75780639507d39a146101da575f80fd5b80635626265c116100b85780635626265c1461013b5780635740d43c146101775780635e4ba17c1461018a575f80fd5b806313e7c9d8146100de5780631f7b6d3214610115578063558a729714610126575b5f80fd5b6101006100ec366004610bca565b60016020525f908152604090205460ff1681565b60405190151581526020015b60405180910390f35b60025460405190815260200161010c565b610139610134366004610bf9565b610269565b005b61014e610149366004610c2a565b6102f1565b604080516001600160a01b03909416845260ff909216602084015215159082015260600161010c565b610139610185366004610bf9565b61032e565b610139610198366004610c41565b610438565b5f546101af906001600160a01b031681565b6040516001600160a01b03909116815260200161010c565b6101006101d5366004610bca565b61079a565b6101ed6101e8366004610c2a565b6107ae565b6040805182516001600160a01b0316815260208084015160ff16908201529181015115159082015260600161010c565b61010061022b366004610bca565b61084e565b6101ed61023e366004610bca565b6108b3565b610139610251366004610cb2565b610976565b610139610264366004610bca565b610b3c565b5f546001600160a01b03163314610292576040516282b42960e81b815260040160405180910390fd5b6001600160a01b0382165f81815260016020908152604091829020805460ff191685151590811790915591519182527f193de8d500b5cb7b720089b258a39e9c1d0b840019a73ae7c51c3f9101732b0291015b60405180910390a25050565b60028181548110610300575f80fd5b5f918252602090912001546001600160a01b038116915060ff600160a01b8204811691600160a81b90041683565b335f9081526001602052604090205460ff1615801561035757505f546001600160a01b03163314155b15610374576040516282b42960e81b815260040160405180910390fd5b61037d8261084e565b6103aa5760405163faeb04df60e01b81526001600160a01b03831660048201526024015b60405180910390fd5b6001600160a01b0382165f908152600360205260409020546002805483929081106103d7576103d7610d13565b5f918252602091829020018054921515600160a81b0260ff60a81b199093169290921790915560405182151581526001600160a01b038416917fc3eefbf82dc083837ae72f27bb95420dfefba61f16ebc7f2665eac4fed2dc09191016102e5565b335f9081526001602052604090205460ff1615801561046157505f546001600160a01b03163314155b1561047e576040516282b42960e81b815260040160405180910390fd5b6002545f036104a05760405163724c98a960e11b815260040160405180910390fd5b6002548111156104c3576040516363847b9d60e11b815260040160405180910390fd5b5f5b81811015610795575f8383838181106104e0576104e0610d13565b90506020020160208101906104f59190610bca565b90506001600160a01b03811661052957604051632d0776e960e11b81526001600160a01b03821660048201526024016103a1565b6001600160a01b0381165f908152600360205260409020548015801561057e5750816001600160a01b031660025f8154811061056757610567610d13565b5f918252602090912001546001600160a01b031614155b156105a75760405163faeb04df60e01b81526001600160a01b03831660048201526024016103a1565b6002545f906105b890600190610d27565b905080820361063b5760028054806105d2576105d2610d46565b5f828152602080822083015f1990810180546001600160b01b03191690559092019092556001600160a01b038516808352600390915260408083208390555190917f62f5816340476eae9e2870d1ec8ae65572cf8757ac5068ba89a098b5f457275991a2610787565b8160035f6002848154811061065257610652610d13565b5f9182526020808320909101546001600160a01b03168352820192909252604001902055600280548290811061068a5761068a610d13565b905f5260205f2001600283815481106106a5576106a5610d13565b5f91825260209091208254910180546001600160a01b039092166001600160a01b031983168117825583546001600160a81b031990931617600160a01b9283900460ff90811690930217808255925460ff60a81b19909316600160a81b938490049092161515909202179055600280548061072257610722610d46565b5f828152602080822083015f1990810180546001600160b01b03191690559092019092556001600160a01b038516808352600390915260408083208390555190917f62f5816340476eae9e2870d1ec8ae65572cf8757ac5068ba89a098b5f457275991a25b5050508060010190506104c5565b505050565b5f6107a4826108b3565b6040015192915050565b604080516060810182525f808252602082018190529181019190915260025482106107ee5760405163faeb04df60e01b81525f60048201526024016103a1565b6002828154811061080157610801610d13565b5f9182526020918290206040805160608101825291909201546001600160a01b038116825260ff600160a01b8204811694830194909452600160a81b900490921615159082015292915050565b6001600160a01b0381165f908152600360205260408120541515806108ad5750600254158015906108ad5750816001600160a01b031660025f8154811061089757610897610d13565b5f918252602090912001546001600160a01b0316145b92915050565b604080516060810182525f80825260208083018290528284018290526001600160a01b03851682526003905291909120546108ed8361084e565b6109155760405163faeb04df60e01b81526001600160a01b03841660048201526024016103a1565b6002818154811061092857610928610d13565b5f9182526020918290206040805160608101825291909201546001600160a01b038116825260ff600160a01b8204811694830194909452600160a81b90049092161515908201529392505050565b335f9081526001602052604090205460ff1615801561099f57505f546001600160a01b03163314155b156109bc576040516282b42960e81b815260040160405180910390fd5b5f5b81811015610795575f8383838181106109d9576109d9610d13565b9050606002018036038101906109ef9190610d5a565b80519091506001600160a01b0316610a28578051604051632d0776e960e11b81526001600160a01b0390911660048201526024016103a1565b8051610a339061084e565b15610a5f5780516040516332abf0bd60e01b81526001600160a01b0390911660048201526024016103a1565b600280546001810182555f91825282517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace82018054602080870180516040808a0180516001600160a01b039889166001600160a81b03199097168717600160a01b60ff958616021760ff60a81b1916600160a81b911515919091021790965593885260038352968390208690558751905193518351949097168452951515908301529293909116917f061e2f1597d055b0c76509673378162ceb3ae2263d44a4b9e1fb52a6f8c2eadb910160405180910390a250506001016109be565b5f546001600160a01b03163314610b65576040516282b42960e81b815260040160405180910390fd5b5f80546001600160a01b0319166001600160a01b0383169081178255604051909133917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a350565b80356001600160a01b0381168114610bc5575f80fd5b919050565b5f60208284031215610bda575f80fd5b610be382610baf565b9392505050565b80358015158114610bc5575f80fd5b5f8060408385031215610c0a575f80fd5b610c1383610baf565b9150610c2160208401610bea565b90509250929050565b5f60208284031215610c3a575f80fd5b5035919050565b5f8060208385031215610c52575f80fd5b823567ffffffffffffffff811115610c68575f80fd5b8301601f81018513610c78575f80fd5b803567ffffffffffffffff811115610c8e575f80fd5b8560208260051b8401011115610ca2575f80fd5b6020919091019590945092505050565b5f8060208385031215610cc3575f80fd5b823567ffffffffffffffff811115610cd9575f80fd5b8301601f81018513610ce9575f80fd5b803567ffffffffffffffff811115610cff575f80fd5b856020606083028401011115610ca2575f80fd5b634e487b7160e01b5f52603260045260245ffd5b818103818111156108ad57634e487b7160e01b5f52601160045260245ffd5b634e487b7160e01b5f52603160045260245ffd5b5f6060828403128015610d6b575f80fd5b506040516060810167ffffffffffffffff81118282101715610d9b57634e487b7160e01b5f52604160045260245ffd5b604052610da783610baf565b8152602083013560ff81168114610dbc575f80fd5b6020820152610dcd60408401610bea565b6040820152939250505056fea26469706673582212202f75c1875fbdda7523ed30f245eb5c379ee370d2570f171c57aa856fc661b6c664736f6c634300081a0033000000000000000000000000fb3485c2e209a5cfbdc1447674256578f1a80ee3",
  "args_data": "0x000000000000000000000000fb3485c2e209a5cfbdc1447674256578f1a80ee3",
  "tx_hash": "",
  "args": null,
  "data": "",
  "artifact_path": "CauldronRegistry.sol",
  "artifact_full_path": "CauldronRegistry.sol:CauldronRegistry",
  "standardJsonInput": {
    "language": "Solidity",
    "sources": {
      "src/periphery/CauldronRegistry.sol": {
        "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.0;\n\nimport {OwnableOperators} from \"/mixins/OwnableOperators.sol\";\n\nstruct CauldronInfo {\n    address cauldron;\n    uint8 version;\n    bool deprecated;\n}\n\ncontract CauldronRegistry is OwnableOperators {\n    event LogCauldronRegistered(address indexed cauldron, uint8 version, bool deprecated);\n    event LogCauldronRemoved(address indexed cauldron);\n    event LogCauldronDeprecated(address indexed cauldron, bool deprecated);\n\n    error ErrAlreadyRegistered(address cauldron_);\n    error ErrNotRegistered(address cauldron_);\n    error ErrEmptyRegistry();\n    error ErrTooManyCauldrons();\n    error ErrInvalidCauldron(address cauldron_);\n\n    CauldronInfo[] public cauldrons;\n    mapping(address => uint256) internal cauldronIndicies;\n\n    constructor(address owner_) {\n        _initializeOwner(owner_);\n    }\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // VIEWS\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    function length() public view returns (uint256) {\n        return cauldrons.length;\n    }\n\n    function get(address cauldron_) public view returns (CauldronInfo memory) {\n        uint256 cauldronIndex = cauldronIndicies[cauldron_];\n        if (!registered(cauldron_)) {\n            revert ErrNotRegistered(cauldron_);\n        }\n\n        return cauldrons[cauldronIndex];\n    }\n\n    function registered(address cauldron_) public view returns (bool) {\n        return cauldronIndicies[cauldron_] != 0 || (cauldrons.length != 0 && cauldrons[0].cauldron == cauldron_);\n    }\n\n    function get(uint256 index_) public view returns (CauldronInfo memory) {\n        if (index_ >= cauldrons.length) {\n            revert ErrNotRegistered(address(0));\n        }\n\n        return cauldrons[index_];\n    }\n\n    function isDeprecated(address cauldron_) public view returns (bool) {\n        return get(cauldron_).deprecated;\n    }\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // OPERATORS\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    function add(CauldronInfo[] calldata items_) external onlyOperators {\n        for (uint256 i = 0; i < items_.length; ++i) {\n            CauldronInfo memory item = items_[i];\n\n            if (item.cauldron == address(0)) {\n                revert ErrInvalidCauldron(item.cauldron);\n            }\n\n            if (registered(item.cauldron)) {\n                revert ErrAlreadyRegistered(item.cauldron);\n            }\n\n            uint256 cauldronIndex = cauldrons.length;\n            cauldrons.push(item);\n            cauldronIndicies[item.cauldron] = cauldronIndex;\n\n            emit LogCauldronRegistered(item.cauldron, item.version, item.deprecated);\n        }\n    }\n\n    function setDeprecated(address cauldron_, bool deprecated_) external onlyOperators {\n        if (!registered(cauldron_)) {\n            revert ErrNotRegistered(cauldron_);\n        }\n\n        cauldrons[cauldronIndicies[cauldron_]].deprecated = deprecated_;\n        emit LogCauldronDeprecated(cauldron_, deprecated_);\n    }\n\n    function remove(address[] calldata cauldrons_) external onlyOperators {\n        if (cauldrons.length == 0) {\n            revert ErrEmptyRegistry();\n        }\n\n        if (cauldrons.length < cauldrons_.length) {\n            revert ErrTooManyCauldrons();\n        }\n\n        for (uint256 i = 0; i < cauldrons_.length; ++i) {\n            address cauldron = cauldrons_[i];\n\n            if (address(cauldron) == address(0)) {\n                revert ErrInvalidCauldron(cauldron);\n            }\n\n            uint256 cauldronIndex = cauldronIndicies[cauldron];\n            if (cauldronIndex == 0 && cauldrons[0].cauldron != cauldron) {\n                revert ErrNotRegistered(cauldron);\n            }\n\n            uint256 lastIndex = cauldrons.length - 1;\n            if (cauldronIndex == lastIndex) {\n                cauldrons.pop();\n                delete cauldronIndicies[cauldron];\n                emit LogCauldronRemoved(cauldron);\n            } else {\n                cauldronIndicies[cauldrons[lastIndex].cauldron] = cauldronIndex;\n                cauldrons[cauldronIndex] = cauldrons[lastIndex];\n                cauldrons.pop();\n                delete cauldronIndicies[cauldron];\n                emit LogCauldronRemoved(cauldron);\n            }\n        }\n    }\n}\n"
      },
      "src/mixins/OwnableOperators.sol": {
        "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.0;\n\n/// @title OwnableOperators\n/// @dev must call `_initializeOwner` to initialize owner\ncontract OwnableOperators {\n    event OwnershipTransferred(address indexed user, address indexed newOwner);\n    event OperatorChanged(address indexed, bool);\n\n    error Unauthorized();\n\n    address public owner;\n    mapping(address => bool) public operators;\n\n    modifier onlyOwner() virtual {\n        if(msg.sender != owner) {\n            revert Unauthorized();\n        }\n        _;\n    }\n\n    modifier onlyOperators() {\n        if (!operators[msg.sender] && msg.sender != owner) {\n            revert Unauthorized();\n        }\n        _;\n    }\n\n    //////////////////////////////////////////////////////////////////////////////////////\n    /// Admin\n    //////////////////////////////////////////////////////////////////////////////////////\n\n    function setOperator(address operator, bool enable) external onlyOwner {\n        operators[operator] = enable;\n        emit OperatorChanged(operator, enable);\n    }\n\n    function transferOwnership(address newOwner) external onlyOwner {\n        owner = newOwner;\n        emit OwnershipTransferred(msg.sender, newOwner);\n    }\n\n    //////////////////////////////////////////////////////////////////////////////////////\n    /// Internals\n    //////////////////////////////////////////////////////////////////////////////////////\n\n    function _initializeOwner(address _owner) internal {\n        owner = _owner;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n}\n"
      }
    },
    "settings": {
      "remappings": [
        "/=src/",
        "forge-std/=lib/forge-std/src/",
        "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
        "@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
        "@BoringSolidity/=lib/BoringSolidity/contracts/",
        "@solady/=lib/solady/src/",
        "@solmate/=lib/solmate/src/",
        "@excessivelySafeCall/=lib/ExcessivelySafeCall/src/",
        "@safe-contracts/=lib/safe-contracts/contracts/",
        "@fuzzlib/=lib/fuzzlib/src/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 400
      },
      "metadata": {
        "useLiteralContent": false,
        "bytecodeHash": "ipfs",
        "appendCBOR": true
      },
      "outputSelection": {
        "*": {
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "evmVersion": "shanghai",
      "viaIR": false,
      "libraries": {}
    }
  },
  "compiler": "0.8.26+commit.8a97fa7a"
}