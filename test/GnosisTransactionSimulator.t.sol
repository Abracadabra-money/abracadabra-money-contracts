// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import "utils/BaseTest.sol";
import {Enum} from "safe-contracts/common/Enum.sol";
import {GnosisSafeMock} from "./mocks/GnosisSafeMock.sol";

contract GnosisTransactionSimulatorTest is BaseTest {
    function setUp() public override {
        fork(ChainId.Kava, 7222870);
        super.setUp();
    }

    function xtest() public {
        address safeAddress = 0x1261894F79E6CF21bF7E586Af7905Ec173C8805b;
        address multicall = 0x40A2aCCbd92BCA938b02010E17A5b8929b49130D;
        bytes
            memory data = hex"8d80ff0a0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000028b00471ee749ba270eb4c1165b5ad95e614947f6fceb00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044095ea7b3000000000000000000000000630fc1758de85c566bdec1d75a894794e1819d7e00000000000000000000000000000000000000000001a784379d99db4200000000630fc1758de85c566bdec1d75a894794e1819d7e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a402b9446c000000000000000000000000471ee749ba270eb4c1165b5ad95e614947f6fceb0000000000000000000000001261894f79e6cf21bf7e586af7905ec173c8805b000000000000000000000000895731a0c3836a5534561268f15eba377218651d00000000000000000000000000000000000000000000d3c21bcecceda1000000000000000000000000000000000000000000000000000000000000000000000000630fc1758de85c566bdec1d75a894794e1819d7e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a402b9446c000000000000000000000000471ee749ba270eb4c1165b5ad95e614947f6fceb0000000000000000000000001261894f79e6cf21bf7e586af7905ec173c8805b0000000000000000000000003cff6f628ebc88e167640966e67314cf6466e6a800000000000000000000000000000000000000000000d3c21bcecceda10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

        deployCodeTo("GnosisSafeMock.sol:GnosisSafeMock", "", safeAddress);
        GnosisSafeMock(payable(safeAddress)).execTransaction(multicall, 0, data, Enum.Operation.DelegateCall);
    }
}
