// SPDX-License-Identifier: UNLICENSED
pragma solidity >=0.8.0;

import {UUPSUpgradeable} from "@solady/utils/UUPSUpgradeable.sol";
import {Initializable} from "@solady/utils/Initializable.sol";
import {SafeTransferLib} from "@solady/utils/SafeTransferLib.sol";
import {OwnableOperators} from "/mixins/OwnableOperators.sol";
import {ERC4626} from "/tokens/ERC4626.sol";

contract Magic{{name}} is ERC4626, OwnableOperators, UUPSUpgradeable, Initializable {
    using SafeTransferLib for address;

    {{#if staking}}
    event LogStakingChanged(address staking);
    {{/if}}
    address private immutable _asset;
    {{#if staking}}

    address public staking;
    {{/if}}

    constructor(address __asset) {
        _asset = __asset;
        _disableInitializers();
    }

    function initialize(address _owner{{#if staking}}, address _staking{{/if}}) public initializer {
        _initializeOwner(_owner);
        {{#if staking}}
        _asset.safeApprove(address(_staking), type(uint256).max);
        staking = _staking;
        {{/if}}
    }

    ////////////////////////////////////////////////////////////////////////////////
    // Views
    ////////////////////////////////////////////////////////////////////////////////

    function name() public view virtual override returns (string memory) {
        {{#if useDynamicName}}
        // TODO: return name
        return string(abi.encodePacked("Magic{{name}} ", ""));
        {{else}}
        return "Magic{{name}}";
        {{/if}}
    }

    function symbol() public view virtual override returns (string memory) {
        {{#if useDynamicName}}
        // TODO: return symbol
        return string(abi.encodePacked("Magic{{name}} ", ""));
        {{else}}
        return "Magic{{name}}";
        {{/if}}
    }

    function asset() public view virtual override returns (address) {
        return _asset;
    }

    ////////////////////////////////////////////////////////////////////////////////
    // Operators
    ////////////////////////////////////////////////////////////////////////////////

    function harvest(address harvester) external onlyOperators {
        // TODO: harvest rewards
        {{#if staking}}
        //staking.claim_rewards(address(this), harvester);
        {{/if}}
    }

    function distributeRewards(uint256 amount) external onlyOperators {
        _asset.safeTransferFrom(msg.sender, address(this), amount);

        // TODO: deposit reward assets
        {{#if staking}}
        //staking.deposit(amount, address(this), false);
        {{/if}}

        unchecked {
            _totalAssets += amount;
        }
    }

    {{#if staking}}
    ////////////////////////////////////////////////////////////////////////////////
    // Admin
    ////////////////////////////////////////////////////////////////////////////////

    function setStaking(address _staking) external onlyOwner {
        if (address(staking) != address(0)) {
            _asset.safeApprove(address(staking), 0);
        }

        _asset.safeApprove(address(_staking), type(uint256).max);

        staking = _staking;
        emit LogStakingChanged(address(_staking));
    }
    {{/if}}
    ////////////////////////////////////////////////////////////////////////////////
    // Internals
    ////////////////////////////////////////////////////////////////////////////////

    function _afterDeposit(uint256 assets, uint256 /* shares */) internal override {
        {{#if staking}}
        // TODO: deposit assets
        //staking.deposit(assets, address(this), false);
        {{/if}}
    }

    function _beforeWithdraw(uint256 assets, uint256 /* shares */) internal override {
        {{#if staking}}
        // TODO: withdraw assets
        //staking.withdraw(assets);
        {{/if}}
    }

    function _authorizeUpgrade(address /*newImplementation*/) internal virtual override {
        _checkOwner();
    }
}
