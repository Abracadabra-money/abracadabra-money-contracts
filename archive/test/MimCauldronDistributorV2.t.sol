// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import "utils/BaseTest.sol";
import "interfaces/IGmxGlpRewardHandler.sol";
import "periphery/MimCauldronDistributor.sol";
import "periphery/GmxGlpRewardHandler.sol";
import "periphery/GlpWrapperHarvestor.sol";
import "script/MimCauldronDistributorV2.s.sol";

contract MimCauldronDistributorV2Test is BaseTest {
    event LogRepayForAll(uint256 amount, uint128 previousElastic, uint128 newElastic);

    MimCauldronDistributor distributorV1;
    MimCauldronDistributor distributorV2;
    GmxGlpRewardHandler wrapper;
    GlpWrapperHarvestor harvestor;
    ICauldronV4 cauldron;

    function setUp() public override {
        forkArbitrum(42587006);
        super.setUp();

        MimCauldronDistributorV2Script script = new MimCauldronDistributorV2Script();
        (distributorV2) = script.deploy();

        distributorV1 = MimCauldronDistributor(0xc5c01568a3B5d8c203964049615401Aaf0783191);
        wrapper = GmxGlpRewardHandler(0x3477Df28ce70Cecf61fFfa7a95be4BEC3B3c7e75);
        harvestor = GlpWrapperHarvestor(0x8E534c5D52C921dBd6dEbc56503cF0e2DCe6d534);
        cauldron = ICauldronV4(0xE09223bBdb85a20111DCD72299142a8626d5eA4b);
    }

    function testOldBehaviourSuccess() public {
        vm.startPrank(0xfB3485c2e209A5cfBDC1447674256578f1A80eE3);

        _showTotalBorrow();

        // from the offchain gelato offchain resolver data.execData at block 42587006
        // https://dashboard.tenderly.co/abracadabra/magic-internet-money/simulator/b6fc4754-7d84-4b6a-a598-a304ac3b3816?trace=0.2.2.0.0
        (bool success, ) = address(harvestor).call(
            hex"220eb9b600000000000000000000000000000000000000000000000000132cbab5e4179600000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000628415565b000000000000000000000000082af49447d8a07e3bd95bd0d56f35241523fbab1000000000000000000000000fea7a6a0b346362bf88a9e4a88416b77a57d6c2a000000000000000000000000000000000000000000000000000003dbb6854d4200000000000000000000000000000000000000000000000000132cbab5e4179500000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000003e0000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000003400000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000082af49447d8a07e3bd95bd0d56f35241523fbab1000000000000000000000000fea7a6a0b346362bf88a9e4a88416b77a57d6c2a00000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000002c0000000000000000000000000000000000000000000000000000003dbb6854d4200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000253757368695377617000000000000000000000000000000000000000000000000000000000000000000003dbb6854d4200000000000000000000000000000000000000000000000000132cbab5e41795000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000001b02da8cb0d097eb8d57a175b88c7d8b479975060000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000200000000000000000000000082af49447d8a07e3bd95bd0d56f35241523fbab1000000000000000000000000fea7a6a0b346362bf88a9e4a88416b77a57d6c2a0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000082af49447d8a07e3bd95bd0d56f35241523fbab1000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000000000000000869584cd000000000000000000000000100000000000000000000000000000000000001100000000000000000000000000000000000000000000008ab6a56d8a638809e8000000000000000000000000000000000000000000000000"
        );

        _showTotalBorrow();

        assertEq(success, true);

        _showMimBalance(address(distributorV1));
        vm.stopPrank();
    }

    function testOldBehaviourFailing() public {
        // transfer too much mim, overflowing totalBorrow.elastic
        _transferMimTo(address(distributorV1), 1_000_000 ether);

        vm.prank(0xfB3485c2e209A5cfBDC1447674256578f1A80eE3);
        // from the offchain gelato offchain resolver data.execData at block 42587006
        // https://dashboard.tenderly.co/abracadabra/magic-internet-money/simulator/b6fc4754-7d84-4b6a-a598-a304ac3b3816?trace=0.2.2.0.0
        (bool success, ) = address(harvestor).call(
            hex"220eb9b600000000000000000000000000000000000000000000000000132cbab5e4179600000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000628415565b000000000000000000000000082af49447d8a07e3bd95bd0d56f35241523fbab1000000000000000000000000fea7a6a0b346362bf88a9e4a88416b77a57d6c2a000000000000000000000000000000000000000000000000000003dbb6854d4200000000000000000000000000000000000000000000000000132cbab5e4179500000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000003e0000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000003400000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000082af49447d8a07e3bd95bd0d56f35241523fbab1000000000000000000000000fea7a6a0b346362bf88a9e4a88416b77a57d6c2a00000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000002c0000000000000000000000000000000000000000000000000000003dbb6854d4200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000253757368695377617000000000000000000000000000000000000000000000000000000000000000000003dbb6854d4200000000000000000000000000000000000000000000000000132cbab5e41795000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000001b02da8cb0d097eb8d57a175b88c7d8b479975060000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000200000000000000000000000082af49447d8a07e3bd95bd0d56f35241523fbab1000000000000000000000000fea7a6a0b346362bf88a9e4a88416b77a57d6c2a0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000082af49447d8a07e3bd95bd0d56f35241523fbab1000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000000000000000869584cd000000000000000000000000100000000000000000000000000000000000001100000000000000000000000000000000000000000000008ab6a56d8a638809e8000000000000000000000000000000000000000000000000"
        );

        assertEq(success, false);
        _showMimBalance(address(distributorV1));
    }

    function testUpgradingStillWorks() public {
        _showTotalBorrow();
        vm.startPrank(wrapper.owner());

        // disallow previous distributor
        GmxGlpRewardHandler(address(wrapper)).setAllowedSwappingRecipient(address(0xc5c01568a3B5d8c203964049615401Aaf0783191), false);

        // enable new distributor
        GmxGlpRewardHandler(address(wrapper)).setAllowedSwappingRecipient(address(distributorV2), true);

        // update harvestor distributor
        harvestor.setDistributor(distributorV2);

        vm.stopPrank();

        vm.prank(0xfB3485c2e209A5cfBDC1447674256578f1A80eE3);
        // from the offchain gelato offchain resolver data.execData at block 42587006
        // https://dashboard.tenderly.co/abracadabra/magic-internet-money/simulator/b6fc4754-7d84-4b6a-a598-a304ac3b3816?trace=0.2.2.0.0
        (bool success, ) = address(harvestor).call(
            hex"220eb9b600000000000000000000000000000000000000000000000000132cbab5e4179600000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000628415565b000000000000000000000000082af49447d8a07e3bd95bd0d56f35241523fbab1000000000000000000000000fea7a6a0b346362bf88a9e4a88416b77a57d6c2a000000000000000000000000000000000000000000000000000003dbb6854d4200000000000000000000000000000000000000000000000000132cbab5e4179500000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000003e0000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000003400000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000082af49447d8a07e3bd95bd0d56f35241523fbab1000000000000000000000000fea7a6a0b346362bf88a9e4a88416b77a57d6c2a00000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000002c0000000000000000000000000000000000000000000000000000003dbb6854d4200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000253757368695377617000000000000000000000000000000000000000000000000000000000000000000003dbb6854d4200000000000000000000000000000000000000000000000000132cbab5e41795000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000001b02da8cb0d097eb8d57a175b88c7d8b479975060000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000200000000000000000000000082af49447d8a07e3bd95bd0d56f35241523fbab1000000000000000000000000fea7a6a0b346362bf88a9e4a88416b77a57d6c2a0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000082af49447d8a07e3bd95bd0d56f35241523fbab1000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000000000000000869584cd000000000000000000000000100000000000000000000000000000000000001100000000000000000000000000000000000000000000008ab6a56d8a638809e8000000000000000000000000000000000000000000000000"
        );

        assertEq(success, true);
        _showTotalBorrow();

        _showMimBalance(address(distributorV2));
    }

    function testUpgradingFixBug() public {
        _showTotalBorrow();
        vm.startPrank(wrapper.owner());

        // disallow previous distributor
        GmxGlpRewardHandler(address(wrapper)).setAllowedSwappingRecipient(address(0xc5c01568a3B5d8c203964049615401Aaf0783191), false);

        // enable new distributor
        GmxGlpRewardHandler(address(wrapper)).setAllowedSwappingRecipient(address(distributorV2), true);

        // update harvestor distributor
        harvestor.setDistributor(distributorV2);

        vm.stopPrank();

        // transfer too much mim, doesn't overflow totalBorrow.elastic
        _transferMimTo(address(distributorV2), 1_000_000 ether);

        vm.prank(0xfB3485c2e209A5cfBDC1447674256578f1A80eE3);
        // from the offchain gelato offchain resolver data.execData at block 42587006
        // https://dashboard.tenderly.co/abracadabra/magic-internet-money/simulator/b6fc4754-7d84-4b6a-a598-a304ac3b3816?trace=0.2.2.0.0
        (bool success, ) = address(harvestor).call(
            hex"220eb9b600000000000000000000000000000000000000000000000000132cbab5e4179600000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000628415565b000000000000000000000000082af49447d8a07e3bd95bd0d56f35241523fbab1000000000000000000000000fea7a6a0b346362bf88a9e4a88416b77a57d6c2a000000000000000000000000000000000000000000000000000003dbb6854d4200000000000000000000000000000000000000000000000000132cbab5e4179500000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000003e0000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000003400000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000082af49447d8a07e3bd95bd0d56f35241523fbab1000000000000000000000000fea7a6a0b346362bf88a9e4a88416b77a57d6c2a00000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000002c0000000000000000000000000000000000000000000000000000003dbb6854d4200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000253757368695377617000000000000000000000000000000000000000000000000000000000000000000003dbb6854d4200000000000000000000000000000000000000000000000000132cbab5e41795000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000001b02da8cb0d097eb8d57a175b88c7d8b479975060000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000200000000000000000000000082af49447d8a07e3bd95bd0d56f35241523fbab1000000000000000000000000fea7a6a0b346362bf88a9e4a88416b77a57d6c2a0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000082af49447d8a07e3bd95bd0d56f35241523fbab1000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000000000000000869584cd000000000000000000000000100000000000000000000000000000000000001100000000000000000000000000000000000000000000008ab6a56d8a638809e8000000000000000000000000000000000000000000000000"
        );

        assertEq(success, true);
        _showTotalBorrow();
        _showMimBalance(address(distributorV2));

        // should be able to retrieve remaining mim
        vm.startPrank(wrapper.owner());
        _showMimBalance(wrapper.owner());
        distributorV2.withdraw();
        _showMimBalance(wrapper.owner());
        _showMimBalance(address(distributorV2));
        vm.stopPrank();
    }

    function _showTotalBorrow() private view {
        Rebase memory totalBorrow = cauldron.totalBorrow();
        console2.log("totalBorrow", totalBorrow.elastic, totalBorrow.base);
    }

    function _transferMimTo(address to, uint256 amount) private {
        vm.startPrank(0x30dF229cefa463e991e29D42DB0bae2e122B2AC7);
        ERC20(0xFEa7a6a0B346362BF88A9e4A88416B77a57D6c2A).transfer(to, amount);
        vm.stopPrank();
    }

    function _showMimBalance(address account) private {
        console2.log(vm.toString(account));
        console2.log("MIM Balance", ERC20(0xFEa7a6a0B346362BF88A9e4A88416B77a57D6c2A).balanceOf(account));
    }
}
